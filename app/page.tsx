'use client';

import { useState, useMemo, useEffect, ChangeEvent } from 'react';
import * as XLSX from 'xlsx';
import { Upload, AlertCircle, TrendingUp, DollarSign, FileSpreadsheet } from 'lucide-react';
import { INDUSTRY_SECTORS, SECTOR_CATEGORIES } from '../data/industrySectors';
import { assessmentData } from '../data/assessmentData';
import { authApi, companiesApi, usersApi, consultantsApi, financialsApi, assessmentsApi, profilesApi, benchmarksApi, ApiError } from '@/lib/api-client';

// Types
type Mappings = {
  date: string;
  // Income Statement
  revenue?: string;
  cogsPayroll?: string;
  cogsOwnerPay?: string;
  cogsContractors?: string;
  cogsMaterials?: string;
  cogsCommissions?: string;
  cogsOther?: string;
  cogsTotal?: string;
  opexSalesMarketing?: string;
  rentLease?: string;
  utilities?: string;
  equipment?: string;
  travel?: string;
  professionalServices?: string;
  insurance?: string;
  opexOther?: string;
  opexPayroll?: string;
  ownersBasePay?: string;
  ownersRetirement?: string;
  contractorsDistribution?: string;
  interestExpense?: string;
  depreciationExpense?: string;
  operatingExpenseTotal?: string;
  nonOperatingIncome?: string;
  extraordinaryItems?: string;
  expense?: string;
  netProfit?: string;
  // Balance Sheet - Assets
  cash?: string;
  ar?: string;
  inventory?: string;
  otherCA?: string;
  tca?: string;
  fixedAssets?: string;
  otherAssets?: string;
  totalAssets?: string;
  // Balance Sheet - Liabilities & Equity
  ap?: string;
  otherCL?: string;
  tcl?: string;
  ltd?: string;
  totalLiab?: string;
  totalEquity?: string;
  totalLAndE?: string;
};

type NormalRow = {
  date: Date;
  month: string;
  revenue: number;
  expense: number;
  cash: number;
  ar: number;
  inventory: number;
  otherCA: number;
  tca: number;
  fixedAssets: number;
  otherAssets: number;
  totalAssets: number;
  ap: number;
  otherCL: number;
  tcl: number;
  ltd: number;
  totalLiab: number;
  totalEquity: number;
  totalLAndE: number;
};

type MonthlyDataRow = {
  month: string;
  revenue: number;
  expense: number;
  cogsPayroll: number;
  cogsOwnerPay: number;
  cogsContractors: number;
  cogsMaterials: number;
  cogsCommissions: number;
  cogsOther: number;
  cogsTotal: number;
  opexSalesMarketing: number;
  rentLease: number;
  utilities: number;
  equipment: number;
  travel: number;
  professionalServices: number;
  insurance: number;
  opexOther: number;
  opexPayroll: number;
  ownersBasePay: number;
  ownersRetirement: number;
  contractorsDistribution: number;
  interestExpense: number;
  depreciationExpense: number;
  operatingExpenseTotal: number;
  nonOperatingIncome: number;
  extraordinaryItems: number;
  netProfit: number;
  totalAssets: number;
  totalLiab: number;
  cash: number;
  ar: number;
  inventory: number;
  otherCA: number;
  tca: number;
  fixedAssets: number;
  otherAssets: number;
  ap: number;
  otherCL: number;
  tcl: number;
  ltd: number;
  totalEquity: number;
  totalLAndE: number;
};

interface Company {
  id: string;
  name: string;
  consultantEmail: string;
  consultantId?: string;
  createdDate: string;
  location?: string;
  industrySector?: number;
  subscriptionMonthlyPrice?: number;
  subscriptionQuarterlyPrice?: number;
  subscriptionAnnualPrice?: number;
}

interface CompanyProfile {
  companyId: string;
  legalStructure: string;
  businessStatus: string;
  ownership: string;
  workforce: string;
  keyAdvisors: string;
  specialNotes: string;
  qoeNotes: string;
  disclosures: {
    bankruptcies: string;
    liens: string;
    contracts: string;
    lawsuits: string;
    mostFavoredNation: string;
    equityControl: string;
    rightOfFirstRefusal: string;
    shareholderProtections: string;
    changeInControl: string;
    regulatoryApprovals: string;
    auditedFinancials: string;
  };
}

interface AssessmentResponses {
  [questionId: string]: number;
}

interface AssessmentNotes {
  [categoryId: number]: string;
}

interface AssessmentRecord {
  id: string;
  userId: string;
  user?: {
    id: string;
    name: string;
    email: string;
  };
  companyId: string;
  company?: {
    id: string;
    name: string;
  };
  responses: AssessmentResponses;
  notes: AssessmentNotes;
  completedAt: string;
  overallScore: number;
  // Legacy fields for backward compatibility
  userEmail?: string;
  userName?: string;
  companyName?: string;
  completedDate?: string;
}

interface Consultant {
  id: string;
  type: string;
  fullName: string;
  address: string;
  email: string;
  phone: string;
  password: string;
}

interface User {
  id: string;
  name: string;
  email: string;
  password: string;
  companyId: string;
  consultantId?: string;
  role: 'consultant' | 'user' | 'siteadmin';
  userType?: 'company' | 'assessment'; // company = management team, assessment = fills questionnaire
}

interface FinancialDataRecord {
  id: string;
  companyId: string;
  uploadedBy: string;
  uploadDate: string;
  rawRows: any[];
  mapping: Mappings;
  fileName: string;
}

// Helper functions
function parseDateLike(v: any): Date | null {
  if (v instanceof Date && !isNaN(v.getTime())) return v;
  if (typeof v === 'number') {
    const d = XLSX.SSF.parse_date_code(v);
    if (d) return new Date(Date.UTC(d.y, d.m - 1, d.d || 1));
  }
  if (typeof v === 'string') {
    const s = v.trim();
    const iso = new Date(s);
    if (!isNaN(iso.getTime())) return iso;
    const m = s.match(/^(\d{1,2})\/(\d{4})$/);
    if (m) {
      const mm = Number(m[1]);
      const yyyy = Number(m[2]);
      return new Date(Date.UTC(yyyy, mm - 1, 1));
    }
  }
  return null;
}

function monthKey(d: Date) {
  return `${d.getUTCFullYear()}-${String(d.getUTCMonth() + 1).padStart(2, '0')}`;
}

function sum(arr: number[]) {
  return arr.reduce((a, b) => a + (Number.isFinite(b) ? b : 0), 0);
}

function pctChange(curr: number, prior: number) {
  if (!Number.isFinite(curr) || !Number.isFinite(prior) || prior === 0) return null;
  return (curr / prior - 1) * 100;
}

function getAssetSizeCategory(totalAssets: number): string {
  if (totalAssets < 500000) return '<500k';
  if (totalAssets < 1000000) return '500k-1m';
  if (totalAssets < 5000000) return '1m-5m';
  if (totalAssets < 10000000) return '5m-10m';
  if (totalAssets < 25000000) return '10m-25m';
  if (totalAssets < 50000000) return '25m-50m';
  if (totalAssets < 100000000) return '50m-100m';
  if (totalAssets < 250000000) return '100m-250m';
  if (totalAssets < 500000000) return '250m-500m';
  return '>500m';
}

// Map KPI ratio names to benchmark metric names
const KPI_TO_BENCHMARK_MAP: Record<string, string[]> = {
  // Liquidity
  'Current Ratio': ['Current Ratio'],
  'Quick Ratio': ['Quick Ratio', 'Acid Test Ratio'],
  // Activity
  'Inventory Turnover': ['Inventory Turnover'],
  'Receivables Turnover': ['Sales/Receivables', 'Receivables Turnover', 'Receivable Turnover', 'Accounts Receivable Turnover'],
  'Payables Turnover': ['Payables Turnover', 'Payable Turnover', 'Accounts Payable Turnover'],
  'Days Inventory': ['Days Inventory', 'Days\' Inventory', 'Days Inventory on Hand'],
  'Days Receivables': ['Days Receivables', 'Days\' Receivables', 'Days Receivable', 'Days Sales Outstanding'],
  'Days Payables': ['Days Payables', 'Days\' Payables', 'Days Payable', 'Days Payables Outstanding'],
  'Sales/Working Capital': ['Sales to Working Capital', 'Sales/Working Capital'],
  // Coverage
  'Interest Coverage': ['Times Interest Earned', 'Interest Coverage', 'Interest Coverage Ratio'],
  'Debt Service Coverage': ['Debt Service Coverage Ratio', 'Debt Service Coverage'],
  'Cash Flow to Debt': ['Cash Flow to Total Debt', 'Cash Flow/Total Debt'],
  // Leverage
  'Debt/Net Worth': ['Debt to Net Worth', 'Debt/Net Worth'],
  'Fixed Assets/Net Worth': ['Fixed Assets to Net Worth', 'Fixed Assets/Net Worth'],
  'Leverage Ratio': ['Total Debt to Assets', 'Debt to Assets', 'Leverage Ratio'],
  // Operating
  'Total Asset Turnover': ['Sales/Total Assets', 'Total Asset Turnover', 'Asset Turnover'],
  'ROE': ['Return on Equity', 'Return on Net Worth, %', 'Return on Equity (%)', 'ROE'],
  'ROA': ['Return on Assets', 'Return on Assets, %', 'Return on Assets (%)', 'ROA'],
  'EBITDA/Revenue': ['EBITDA Margin', 'EBITDA Margin (%)', 'EBITDA/Revenue'],
  'EBIT/Revenue': ['EBIT Margin', 'EBIT Margin (%)', 'EBIT/Revenue']
};

function getBenchmarkValue(benchmarks: any[], metricName: string): number | null {
  if (!benchmarks || benchmarks.length === 0) return null;
  
  // Try exact match first
  const exactMatch = benchmarks.find(b => b.metricName === metricName);
  if (exactMatch && exactMatch.fiveYearValue != null) {
    return exactMatch.fiveYearValue;
  }
  
  // Try all possible mapped names
  const possibleNames = KPI_TO_BENCHMARK_MAP[metricName];
  if (possibleNames) {
    for (const name of possibleNames) {
      const match = benchmarks.find(b => b.metricName === name);
      if (match && match.fiveYearValue != null) {
        return match.fiveYearValue;
      }
    }
  }
  
  // Log missing benchmark for debugging
  if (benchmarks.length > 0) {
    console.log(`No benchmark found for "${metricName}". Available: ${benchmarks.map(b => b.metricName).slice(0, 5).join(', ')}...`);
  }
  
  return null;
}

function revenueGrowthScore_24mo(growthPct: number | null) {
  if (growthPct === null) return null;
  const g = growthPct;
  if (g >= 25) return 100;
  if (g >= 15) return 80;
  if (g >= 5) return 60;
  if (g >= 0) return 50;
  if (g >= -5) return 40;
  if (g >= -15) return 20;
  return 10;
}

function rgsAdjustmentFrom6mo(rgs: number | null, growth6moPct: number | null) {
  if (rgs === null || growth6moPct === null) return null;
  const g = growth6moPct;
  if (g >= 25) return rgs + 50;
  if (g >= 15) return ((100 - rgs) * 0.8) + rgs;
  if (g >= 5) return ((100 - rgs) * 0.6) + rgs;
  if (g >= 0) return ((100 - rgs) * 0.4) + rgs;
  if (g >= -5) return rgs * 0.9;
  if (g >= -15) return rgs * 0.7;
  if (g >= -25) return rgs * 0.5;
  return rgs * 0.3;
}

function clamp(x: number, min = 10, max = 100) {
  return Math.min(max, Math.max(min, x));
}

function sixMonthGrowthFromMonthly(series: Array<{ month: string; value: number }>) {
  if (series.length < 12) return null;
  const keys = [...series.map(r => r.month)].sort();
  const uniq = Array.from(new Set(keys));
  if (uniq.length < 12) return null;
  const map = new Map(series.map(r => [r.month, r.value]));
  const last6 = uniq.slice(-6);
  const prev6 = uniq.slice(-12, -6);
  const qsum = (months: string[]) => sum(months.map(m => map.get(m) || 0));
  const curr = qsum(last6);
  const prior = qsum(prev6);
  return pctChange(curr, prior);
}

function normalizeRows(raw: any[], mapping: Mappings): NormalRow[] {
  const rows: NormalRow[] = [];
  for (const r of raw) {
    const d = parseDateLike(r[mapping.date]);
    if (!d) continue;
    function N(col?: string) {
      const v = col ? r[col] : null;
      const n = Number(v);
      return Number.isFinite(n) ? n : 0;
    }
    const row: NormalRow = {
      date: d,
      month: monthKey(new Date(Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), 1))),
      revenue: N(mapping.revenue),
      expense: N(mapping.expense),
      cash: N(mapping.cash),
      ar: N(mapping.ar),
      inventory: N(mapping.inventory),
      otherCA: N(mapping.otherCA),
      tca: N(mapping.tca),
      fixedAssets: N(mapping.fixedAssets),
      otherAssets: N(mapping.otherAssets),
      totalAssets: N(mapping.totalAssets),
      ap: N(mapping.ap),
      otherCL: N(mapping.otherCL),
      tcl: N(mapping.tcl),
      ltd: N(mapping.ltd),
      totalLiab: N(mapping.totalLiab),
      totalEquity: N(mapping.totalEquity),
      totalLAndE: N(mapping.totalLAndE),
    };
    rows.push(row);
  }
  
  const acc = new Map<string, NormalRow>();
  for (const r of rows) {
    const k = r.month;
    const v = acc.get(k) || { ...r };
    if (acc.has(k)) {
      for (const key of Object.keys(r) as (keyof NormalRow)[]) {
        if (key === 'date' || key === 'month') continue;
        (v as any)[key] = ((v as any)[key] || 0) + ((r as any)[key] || 0);
      }
    }
    acc.set(k, v);
  }
  const months = Array.from(acc.keys()).sort();
  return months.map(m => acc.get(m)!);
}

function ltmVsPrior(series: Array<{ month: string; value: number }>) {
  if (series.length < 24) return { curr: null, prior: null, pct: null };
  const values = [...series].sort((a, b) => a.month.localeCompare(b.month));
  const last12 = values.slice(-12);
  const prev12 = values.slice(-24, -12);
  const curr = sum(last12.map(r => r.value));
  const prior = sum(prev12.map(r => r.value));
  return { curr, prior, pct: pctChange(curr, prior) };
}

// KPI Formula Definitions
const KPI_FORMULAS: Record<string, { formula: string; period: string; description: string }> = {
  'Current Ratio': {
    formula: 'Current Assets ÷ Current Liabilities',
    period: 'Point in Time (End of Month)',
    description: 'Measures the company\'s ability to pay short-term obligations. Current Assets include Cash, AR, Inventory, and Other Current Assets. Current Liabilities include AP and Other Current Liabilities.'
  },
  'Quick Ratio': {
    formula: '(Current Assets - Inventory) ÷ Current Liabilities',
    period: 'Point in Time (End of Month)',
    description: 'Measures the company\'s ability to meet short-term obligations without relying on inventory sales. Also known as the Acid Test Ratio.'
  },
  'Inventory Turnover': {
    formula: 'Cost of Goods Sold (LTM) ÷ Average Inventory',
    period: 'Last Twelve Months (LTM)',
    description: 'Measures how many times inventory is sold and replaced over the period. Higher values indicate efficient inventory management.'
  },
  'Receivables Turnover': {
    formula: 'Revenue (LTM) ÷ Average Accounts Receivable',
    period: 'Last Twelve Months (LTM)',
    description: 'Measures how efficiently a company collects revenue from its credit customers. Higher values indicate faster collection.'
  },
  'Payables Turnover': {
    formula: 'Cost of Goods Sold (LTM) ÷ Average Accounts Payable',
    period: 'Last Twelve Months (LTM)',
    description: 'Measures how quickly a company pays off its suppliers. Lower values may indicate better use of supplier financing.'
  },
  'Days\' Inventory': {
    formula: '365 ÷ Inventory Turnover',
    period: 'Last Twelve Months (LTM)',
    description: 'Average number of days it takes to sell inventory. Lower values indicate faster inventory movement.'
  },
  'Days\' Receivables': {
    formula: '365 ÷ Receivables Turnover',
    period: 'Last Twelve Months (LTM)',
    description: 'Average number of days to collect payment after a sale. Also known as Days Sales Outstanding (DSO).'
  },
  'Days\' Payables': {
    formula: '365 ÷ Payables Turnover',
    period: 'Last Twelve Months (LTM)',
    description: 'Average number of days a company takes to pay its suppliers. Also known as Days Payable Outstanding (DPO).'
  },
  'Sales/Working Capital': {
    formula: 'Revenue (LTM) ÷ (Current Assets - Current Liabilities)',
    period: 'Last Twelve Months (LTM)',
    description: 'Measures how efficiently a company uses working capital to generate sales. Higher values indicate more efficient use of working capital.'
  },
  'Interest Coverage': {
    formula: 'EBIT (LTM) ÷ Interest Expense (LTM)',
    period: 'Last Twelve Months (LTM)',
    description: 'Measures the company\'s ability to pay interest on outstanding debt. Values above 2.5 are generally considered healthy.'
  },
  'Debt Service Coverage': {
    formula: 'Net Income (LTM) ÷ (Principal Payments + Interest Expense)',
    period: 'Last Twelve Months (LTM)',
    description: 'Measures ability to service total debt obligations. Values above 1.25 indicate sufficient cash flow to cover debt payments.'
  },
  'Cash Flow to Debt': {
    formula: 'Operating Cash Flow (LTM) ÷ Total Debt',
    period: 'Last Twelve Months (LTM)',
    description: 'Measures the company\'s ability to cover total debt with its operating cash flow. Higher values indicate better debt coverage.'
  },
  'Debt/Net Worth': {
    formula: 'Total Liabilities ÷ Total Equity',
    period: 'Point in Time (End of Month)',
    description: 'Measures financial leverage. Also known as Debt-to-Equity ratio. Lower values indicate less leverage and lower financial risk.'
  },
  'Fixed Assets/Net Worth': {
    formula: 'Fixed Assets ÷ Total Equity',
    period: 'Point in Time (End of Month)',
    description: 'Indicates the proportion of equity invested in fixed assets. Shows how much of the company\'s equity is tied up in long-term assets.'
  },
  'Leverage Ratio': {
    formula: 'Total Assets ÷ Total Equity',
    period: 'Point in Time (End of Month)',
    description: 'Measures the degree to which a company is utilizing borrowed money. Higher values indicate higher financial leverage.'
  },
  'Total Asset Turnover': {
    formula: 'Revenue (LTM) ÷ Average Total Assets',
    period: 'Last Twelve Months (LTM)',
    description: 'Measures how efficiently a company uses its assets to generate sales. Higher values indicate better asset utilization.'
  },
  'Return on Equity (ROE)': {
    formula: 'Net Income (LTM) ÷ Average Total Equity',
    period: 'Last Twelve Months (LTM)',
    description: 'Measures profitability relative to shareholders\' equity. Indicates how effectively management is using equity to generate profits.'
  },
  'Return on Assets (ROA)': {
    formula: 'Net Income (LTM) ÷ Average Total Assets',
    period: 'Last Twelve Months (LTM)',
    description: 'Measures how profitable a company is relative to its total assets. Indicates how efficiently management uses assets to generate earnings.'
  },
  'EBITDA Margin': {
    formula: 'EBITDA (LTM) ÷ Revenue (LTM)',
    period: 'Last Twelve Months (LTM)',
    description: 'Measures operating profitability before interest, taxes, depreciation, and amortization. Shows pure operational efficiency.'
  },
  'EBIT Margin': {
    formula: 'EBIT (LTM) ÷ Revenue (LTM)',
    period: 'Last Twelve Months (LTM)',
    description: 'Measures operating profitability before interest and taxes. Also known as Operating Profit Margin.'
  }
};

// LineChart Component
function LineChart({ title, data, valueKey, color, yMax, showTable, compact, formatter, benchmarkValue, showFormulaButton, onFormulaClick }: { 
  title: string; 
  data: Array<any>;
  valueKey?: string;
  color: string;
  yMax?: number | null;
  showTable?: boolean;
  compact?: boolean;
  formatter?: (val: number) => string;
  benchmarkValue?: number | null;
  showFormulaButton?: boolean;
  onFormulaClick?: () => void;
}) {
  const chartData = valueKey ? data.map(d => ({ month: d.month, value: d[valueKey] })) : data;
  const validData = chartData.filter(d => d.value !== null && Number.isFinite(d.value));
  if (validData.length === 0) return null;

  const values = validData.map(d => d.value as number);
  const sorted = [...values].sort((a, b) => a - b);
  const q1 = sorted[Math.floor(sorted.length * 0.25)];
  const q3 = sorted[Math.floor(sorted.length * 0.75)];
  const iqr = q3 - q1;
  const lowerBound = q1 - 3 * iqr;
  const upperBound = q3 + 3 * iqr;
  
  const filteredValues = values.filter(v => v >= lowerBound && v <= upperBound);
  const minValue = filteredValues.length > 0 ? Math.min(...filteredValues) : Math.min(...values);
  const maxValue = filteredValues.length > 0 ? Math.max(...filteredValues) : Math.max(...values);
  
  const yMaxCalc = yMax || Math.ceil(maxValue * 1.1);
  const yMinCalc = yMax ? 0 : Math.floor(minValue * 0.9);
  const range = yMaxCalc - yMinCalc;
  
  if (range === 0 || !Number.isFinite(range)) {
    return (
      <div style={{ background: '#f8fafc', borderRadius: '12px', padding: '20px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
        <h3 style={{ fontSize: '16px', fontWeight: '700', color: '#1e293b', marginBottom: '15px' }}>{title}</h3>
        <p style={{ fontSize: '14px', color: '#64748b', textAlign: 'center', padding: '40px 0' }}>
          Unable to display chart - insufficient data variation
        </p>
      </div>
    );
  }

  const width = compact ? 500 : 1100;
  const height = compact ? 250 : 300;
  const padding = { top: 15, right: 30, bottom: 50, left: 50 };
  const chartWidth = width - padding.left - padding.right;
  const chartHeight = height - padding.top - padding.bottom;

  const points = validData.map((d, i) => {
    const x = padding.left + (i / (validData.length - 1)) * chartWidth;
    const clampedValue = Math.max(yMinCalc, Math.min(yMaxCalc, d.value!));
    const y = padding.top + chartHeight - ((clampedValue - yMinCalc) / range) * chartHeight;
    return { x, y, month: d.month, value: d.value!, isOutOfRange: d.value! < yMinCalc || d.value! > yMaxCalc };
  });

  const pathD = points.map((p, i) => `${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`).join(' ');

  return (
    <div style={{ background: '#f8fafc', borderRadius: '12px', padding: '20px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '15px' }}>
        <h3 style={{ fontSize: '16px', fontWeight: '700', color: '#1e293b', margin: 0 }}>{title}</h3>
        {showFormulaButton && (
          <button
            onClick={onFormulaClick}
            style={{
              background: 'none',
              border: 'none',
              cursor: 'pointer',
              padding: '4px 8px',
              color: '#667eea',
              fontSize: '14px',
              fontWeight: '600',
              display: 'flex',
              alignItems: 'center',
              gap: '4px',
              transition: 'all 0.2s'
            }}
            onMouseOver={(e) => e.currentTarget.style.color = '#4f46e5'}
            onMouseOut={(e) => e.currentTarget.style.color = '#667eea'}
            title="View formula"
          >
            <span style={{ fontSize: '16px' }}>ℹ️</span> Formula
          </button>
        )}
      </div>
      <svg width={width} height={height} style={{ maxWidth: '100%', height: 'auto' }}>
        {(() => {
          const gridValues = [];
          const step = range / 4;
          for (let i = 0; i <= 4; i++) {
            gridValues.push(yMinCalc + step * i);
          }
          return gridValues.map((val, idx) => {
            const y = padding.top + chartHeight - ((val - yMinCalc) / range) * chartHeight;
            return (
              <g key={idx}>
                <line x1={padding.left} y1={y} x2={width - padding.right} y2={y} stroke="#e2e8f0" strokeWidth="1" />
                <text x={padding.left - 10} y={y + 4} textAnchor="end" fontSize="11" fill="#94a3b8">
                  {Math.abs(val) >= 100 ? val.toFixed(0) : val.toFixed(1)}
                </text>
              </g>
            );
          });
        })()}
        <line x1={padding.left} y1={height - padding.bottom} x2={width - padding.right} y2={height - padding.bottom} stroke="#cbd5e1" strokeWidth="2" />
        <line x1={padding.left} y1={padding.top} x2={padding.left} y2={height - padding.bottom} stroke="#cbd5e1" strokeWidth="2" />
        <path d={pathD} fill="none" stroke={color} strokeWidth="3" strokeLinecap="round" strokeLinejoin="round" />
        {benchmarkValue != null && benchmarkValue >= yMinCalc && benchmarkValue <= yMaxCalc && (
          <>
            <line 
              x1={padding.left} 
              y1={padding.top + chartHeight - ((benchmarkValue - yMinCalc) / range) * chartHeight} 
              x2={width - padding.right} 
              y2={padding.top + chartHeight - ((benchmarkValue - yMinCalc) / range) * chartHeight} 
              stroke="#f59e0b" 
              strokeWidth="2" 
              strokeDasharray="5,5"
            />
            <text 
              x={width - padding.right + 5} 
              y={padding.top + chartHeight - ((benchmarkValue - yMinCalc) / range) * chartHeight + 4} 
              fontSize="10" 
              fill="#f59e0b" 
              fontWeight="600"
            >
              Industry
            </text>
          </>
        )}
        {points.map((p, i) => (
          <circle key={i} cx={p.x} cy={p.y} r="5" fill={p.isOutOfRange ? '#ef4444' : color} stroke="white" strokeWidth="2">
            <title>{`${p.month}: ${p.value.toFixed(1)}${p.isOutOfRange ? ' (out of range)' : ''}`}</title>
          </circle>
        ))}
        {points.map((p, i) => {
          const showLabel = i === 0 || i === points.length - 1 || i % Math.ceil(points.length / 8) === 0;
          if (!showLabel) return null;
          return <text key={i} x={p.x} y={height - padding.bottom + 20} textAnchor="middle" fontSize="11" fill="#64748b">{p.month}</text>;
        })}
      </svg>
      <div style={{ display: 'grid', gridTemplateColumns: benchmarkValue != null ? 'repeat(5, 1fr)' : 'repeat(4, 1fr)', gap: '10px', marginTop: '15px', padding: '3px 12px', background: 'white', borderRadius: '8px' }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
          <div style={{ fontSize: '10px', color: '#64748b', fontWeight: '600' }}>CURRENT:</div>
          <div style={{ fontSize: '16px', fontWeight: '700', color: color }}>{formatter ? formatter(validData[validData.length - 1].value!) : validData[validData.length - 1].value!.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</div>
        </div>
        <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
          <div style={{ fontSize: '10px', color: '#64748b', fontWeight: '600' }}>AVG:</div>
          <div style={{ fontSize: '16px', fontWeight: '700', color: '#1e293b' }}>{formatter ? formatter(sum(values) / values.length) : (sum(values) / values.length).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</div>
        </div>
        <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
          <div style={{ fontSize: '10px', color: '#64748b', fontWeight: '600' }}>MIN:</div>
          <div style={{ fontSize: '16px', fontWeight: '700', color: '#64748b' }}>{formatter ? formatter(Math.min(...values)) : Math.min(...values).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</div>
        </div>
        <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
          <div style={{ fontSize: '10px', color: '#64748b', fontWeight: '600' }}>MAX:</div>
          <div style={{ fontSize: '16px', fontWeight: '700', color: '#64748b' }}>{formatter ? formatter(Math.max(...values)) : Math.max(...values).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</div>
        </div>
        {benchmarkValue != null && (
          <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
            <div style={{ fontSize: '10px', color: '#f59e0b', fontWeight: '600' }}>INDUSTRY:</div>
            <div style={{ fontSize: '16px', fontWeight: '700', color: '#f59e0b' }}>{formatter ? formatter(benchmarkValue) : benchmarkValue.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</div>
          </div>
        )}
      </div>
      
      {showTable && (
        <div style={{ marginTop: '16px', overflowX: 'auto' }}>
          <table style={{ width: '100%', fontSize: '10px', borderCollapse: 'collapse' }}>
            <tbody>
              <tr style={{ background: '#f1f5f9', borderBottom: '2px solid #cbd5e1' }}>
                <td style={{ padding: '6px 8px', fontWeight: '700', color: '#1e293b', position: 'sticky', left: 0, background: '#f1f5f9', zIndex: 1, minWidth: '60px' }}>
                  Month
                </td>
                {validData.map((d, i) => (
                  <td key={`month-${i}`} style={{ padding: '6px', textAlign: 'center', fontWeight: '600', color: '#64748b', minWidth: '70px' }}>
                    {d.month}
                  </td>
                ))}
              </tr>
              <tr style={{ borderBottom: '1px solid #e2e8f0' }}>
                <td style={{ padding: '6px 8px', fontWeight: '700', color: '#1e293b', position: 'sticky', left: 0, background: '#f8fafc', zIndex: 1 }}>
                  Value
                </td>
                {validData.map((d, i) => (
                  <td key={`val-${i}`} style={{ padding: '6px', textAlign: 'center', fontWeight: '700', color: color }}>
                    {formatter ? formatter(d.value!) : d.value!.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                  </td>
                ))}
              </tr>
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}

// ProjectionChart Component
function ProjectionChart({ title, historicalData, projectedData, valueKey, formatValue }: {
  title: string;
  historicalData: any[];
  projectedData: { mostLikely: any[]; bestCase: any[]; worstCase: any[] };
  valueKey: string;
  formatValue?: (val: number) => string;
}) {
  if (!historicalData || historicalData.length === 0) return null;
  
  const formatter = formatValue || ((v: number) => v.toFixed(1));
  const hist = historicalData.slice(-12).map(d => ({ month: d.month, value: d[valueKey], type: 'historical' }));
  const mostLikely = projectedData.mostLikely.map(d => ({ month: d.month, value: d[valueKey], type: 'mostLikely' }));
  const bestCase = projectedData.bestCase.map(d => ({ month: d.month, value: d[valueKey], type: 'bestCase' }));
  const worstCase = projectedData.worstCase.map(d => ({ month: d.month, value: d[valueKey], type: 'worstCase' }));
  
  const allData = [...hist, ...mostLikely];
  const allValues = [...hist.map(d => d.value), ...mostLikely.map(d => d.value), ...bestCase.map(d => d.value), ...worstCase.map(d => d.value)];
  const minValue = Math.min(...allValues);
  const maxValue = Math.max(...allValues);
  const yMin = Math.floor(minValue * 0.9);
  const yMax = Math.ceil(maxValue * 1.1);
  const range = yMax - yMin;
  
  const width = 580;
  const height = 300;
  const padding = { top: 20, right: 15, bottom: 50, left: 55 };
  const chartWidth = width - padding.left - padding.right;
  const chartHeight = height - padding.top - padding.bottom;
  
  const toPoint = (d: any, i: number) => {
    const x = padding.left + (i / (allData.length - 1)) * chartWidth;
    const y = padding.top + chartHeight - ((d.value - yMin) / range) * chartHeight;
    return { x, y, ...d };
  };
  
  const histPoints = hist.map((d, i) => toPoint(d, i));
  const mlPoints = mostLikely.map((d, i) => toPoint(d, hist.length + i));
  const bcPoints = bestCase.map((d, i) => toPoint(d, hist.length + i));
  const wcPoints = worstCase.map((d, i) => toPoint(d, hist.length + i));
  const lastHistPoint = histPoints[histPoints.length - 1];
  
  const histPath = histPoints.map((p, i) => `${i === 0 ? 'M' : 'L'} ${p.x} ${p.y}`).join(' ');
  const mlPath = `M ${lastHistPoint.x} ${lastHistPoint.y} ` + mlPoints.map(p => `L ${p.x} ${p.y}`).join(' ');
  const bcPath = `M ${lastHistPoint.x} ${lastHistPoint.y} ` + bcPoints.map(p => `L ${p.x} ${p.y}`).join(' ');
  const wcPath = `M ${lastHistPoint.x} ${lastHistPoint.y} ` + wcPoints.map(p => `L ${p.x} ${p.y}`).join(' ');
  
  const firstHistMonth = hist[0].month;
  const lastHistMonth = hist[hist.length - 1].month;
  const lastProjMonth = mostLikely[mostLikely.length - 1].month;
  
  return (
    <div style={{ background: '#f8fafc', borderRadius: '12px', padding: '20px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
      <div style={{ marginBottom: '12px' }}>
        <h3 style={{ fontSize: '16px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>{title}</h3>
        <div style={{ fontSize: '12px', color: '#64748b' }}>
          <span style={{ fontWeight: '600' }}>Historical:</span> {firstHistMonth} to {lastHistMonth} (12 months) 
          <span style={{ margin: '0 8px', color: '#cbd5e1' }}>|</span>
          <span style={{ fontWeight: '600' }}>Projected:</span> {hist[hist.length - 1].month} to {lastProjMonth} (12 months)
        </div>
      </div>
      
      <div style={{ display: 'flex', gap: '16px', alignItems: 'flex-start', flexWrap: 'wrap' }}>
        <div style={{ flex: '1', minWidth: '400px', maxWidth: '580px' }}>
          <svg width={width} height={height} style={{ width: '100%', height: 'auto' }}>
            {[0, 0.25, 0.5, 0.75, 1].map((pct, idx) => {
              const val = yMin + range * pct;
              const y = padding.top + chartHeight - (chartHeight * pct);
              return (
                <g key={idx}>
                  <line x1={padding.left} y1={y} x2={width - padding.right} y2={y} stroke="#e2e8f0" strokeWidth="1" />
                  <text x={padding.left - 10} y={y + 4} textAnchor="end" fontSize="11" fill="#94a3b8">
                    {formatter(val)}
                  </text>
                </g>
              );
            })}
            <line x1={lastHistPoint.x} y1={padding.top} x2={lastHistPoint.x} y2={height - padding.bottom} stroke="#94a3b8" strokeWidth="2" strokeDasharray="5,5" />
            <text x={lastHistPoint.x} y={padding.top - 5} textAnchor="middle" fontSize="11" fill="#64748b" fontWeight="600">Now</text>
            <line x1={padding.left} y1={height - padding.bottom} x2={width - padding.right} y2={height - padding.bottom} stroke="#cbd5e1" strokeWidth="2" />
            <line x1={padding.left} y1={padding.top} x2={padding.left} y2={height - padding.bottom} stroke="#cbd5e1" strokeWidth="2" />
            <path d={histPath} fill="none" stroke="#1e293b" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round" />
            <path d={mlPath} fill="none" stroke="#667eea" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round" />
            <path d={bcPath} fill="none" stroke="#10b981" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" strokeDasharray="5,5" />
            <path d={wcPath} fill="none" stroke="#ef4444" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" strokeDasharray="5,5" />
            {histPoints.map((p, i) => (
              <circle key={`hist-${i}`} cx={p.x} cy={p.y} r="4" fill="#1e293b" stroke="white" strokeWidth="2">
                <title>Historical {p.month}: {formatter(p.value)}</title>
              </circle>
            ))}
            {mlPoints.map((p, i) => (
              <circle key={`ml-${i}`} cx={p.x} cy={p.y} r="5" fill="#667eea" stroke="white" strokeWidth="2">
                <title>Most Likely {p.month}: {formatter(p.value)}</title>
              </circle>
            ))}
            {allData.map((d, i) => {
              const showLabel = i === 0 || i === hist.length - 1 || i === allData.length - 1 || i % 4 === 0;
              if (!showLabel) return null;
              const p = toPoint(d, i);
              return <text key={i} x={p.x} y={height - padding.bottom + 20} textAnchor="middle" fontSize="10" fill="#64748b">{d.month}</text>;
            })}
          </svg>
        </div>
        
        <div style={{ width: '280px', flexShrink: 0, display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '8px' }}>
          <div style={{ background: 'white', borderRadius: '8px', padding: '12px', border: '2px solid #1e293b', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>
            <div style={{ fontSize: '9px', fontWeight: '700', color: '#64748b', letterSpacing: '0.5px', marginBottom: '2px' }}>CURRENT</div>
            <div style={{ fontSize: '9px', color: '#64748b', marginBottom: '6px' }}>Now</div>
            <div style={{ fontSize: '18px', fontWeight: '700', color: '#1e293b' }}>
              {formatter(hist[hist.length - 1].value)}
            </div>
          </div>
          <div style={{ background: '#ede9fe', borderRadius: '8px', padding: '12px', border: '2px solid #667eea', boxShadow: '0 2px 4px rgba(102,126,234,0.2)' }}>
            <div style={{ fontSize: '9px', fontWeight: '700', color: '#5b21b6', letterSpacing: '0.5px', marginBottom: '2px' }}>MOST LIKELY</div>
            <div style={{ fontSize: '9px', color: '#7c3aed', marginBottom: '6px' }}>{lastProjMonth}</div>
            <div style={{ fontSize: '18px', fontWeight: '700', color: '#667eea' }}>
              {formatter(mostLikely[11].value)}
            </div>
            <div style={{ fontSize: '10px', color: '#5b21b6', marginTop: '2px', fontWeight: '600' }}>
              {((mostLikely[11].value / hist[hist.length - 1].value - 1) * 100) >= 0 ? '+' : ''}
              {((mostLikely[11].value / hist[hist.length - 1].value - 1) * 100).toFixed(2)}%
            </div>
          </div>
          <div style={{ background: '#f0fdf4', borderRadius: '8px', padding: '12px', border: '2px solid #10b981', boxShadow: '0 2px 4px rgba(16,185,129,0.2)' }}>
            <div style={{ fontSize: '9px', fontWeight: '700', color: '#166534', letterSpacing: '0.5px', marginBottom: '2px' }}>BEST CASE</div>
            <div style={{ fontSize: '9px', color: '#059669', marginBottom: '6px' }}>{lastProjMonth}</div>
            <div style={{ fontSize: '18px', fontWeight: '700', color: '#10b981' }}>
              {formatter(bestCase[11].value)}
            </div>
            <div style={{ fontSize: '10px', color: '#166534', marginTop: '2px', fontWeight: '600' }}>
              {((bestCase[11].value / hist[hist.length - 1].value - 1) * 100) >= 0 ? '+' : ''}
              {((bestCase[11].value / hist[hist.length - 1].value - 1) * 100).toFixed(2)}%
            </div>
          </div>
          <div style={{ background: '#fef2f2', borderRadius: '8px', padding: '12px', border: '2px solid #ef4444', boxShadow: '0 2px 4px rgba(239,68,68,0.2)' }}>
            <div style={{ fontSize: '9px', fontWeight: '700', color: '#991b1b', letterSpacing: '0.5px', marginBottom: '2px' }}>WORST CASE</div>
            <div style={{ fontSize: '9px', color: '#dc2626', marginBottom: '6px' }}>{lastProjMonth}</div>
            <div style={{ fontSize: '18px', fontWeight: '700', color: '#ef4444' }}>
              {formatter(worstCase[11].value)}
            </div>
            <div style={{ fontSize: '10px', color: '#991b1b', marginTop: '2px', fontWeight: '600' }}>
              {((worstCase[11].value / hist[hist.length - 1].value - 1) * 100) >= 0 ? '+' : ''}
              {((worstCase[11].value / hist[hist.length - 1].value - 1) * 100).toFixed(2)}%
            </div>
          </div>
        </div>
      </div>
      
      <div style={{ marginTop: '20px', overflowX: 'auto', maxWidth: '100%' }}>
        <table style={{ fontSize: '10px', borderCollapse: 'collapse', width: '100%' }}>
          <tbody>
            <tr style={{ background: '#f1f5f9', borderBottom: '2px solid #cbd5e1' }}>
              <td style={{ padding: '6px 8px', fontWeight: '700', color: '#1e293b', position: 'sticky', left: 0, background: '#f1f5f9', zIndex: 1, minWidth: '50px' }}>Month</td>
              {hist.map((d, i) => (
                <td key={`month-hist-${i}`} style={{ padding: '6px 4px', textAlign: 'center', fontWeight: '600', color: '#64748b', background: 'white', minWidth: '60px' }}>
                  {d.month}
                </td>
              ))}
              {mostLikely.slice(0, 6).map((d, i) => (
                <td key={`month-proj-${i}`} style={{ padding: '6px 4px', textAlign: 'center', fontWeight: '600', color: '#667eea', background: '#ede9fe', minWidth: '60px' }}>
                  {d.month}
                </td>
              ))}
            </tr>
            <tr style={{ borderBottom: '1px solid #e2e8f0' }}>
              <td style={{ padding: '6px 8px', fontWeight: '700', color: '#1e293b', position: 'sticky', left: 0, background: '#f8fafc', zIndex: 1, minWidth: '50px' }}>Value</td>
              {hist.map((d, i) => (
                <td key={`val-hist-${i}`} style={{ padding: '6px 4px', textAlign: 'center', fontWeight: '700', color: '#1e293b', background: 'white', fontSize: '10px' }}>
                  {formatter(d.value)}
                </td>
              ))}
              {mostLikely.slice(0, 6).map((d, i) => (
                <td key={`val-proj-${i}`} style={{ padding: '6px 4px', textAlign: 'center', fontWeight: '700', color: '#667eea', background: '#ede9fe', fontSize: '10px' }}>
                  {formatter(d.value)}
                </td>
              ))}
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default function FinancialScorePage() {
  // State - Authentication
  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [loginEmail, setLoginEmail] = useState('');
  const [loginPassword, setLoginPassword] = useState('');
  const [loginName, setLoginName] = useState('');
  const [isRegistering, setIsRegistering] = useState(false);
  const [loginError, setLoginError] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showForgotPassword, setShowForgotPassword] = useState(false);
  const [resetEmail, setResetEmail] = useState('');
  const [resetSuccess, setResetSuccess] = useState('');
  
  // State - Consultants
  const [consultants, setConsultants] = useState<Consultant[]>([]);
  const [newConsultantType, setNewConsultantType] = useState('');
  const [newConsultantFullName, setNewConsultantFullName] = useState('');
  const [newConsultantAddress, setNewConsultantAddress] = useState('');
  const [newConsultantEmail, setNewConsultantEmail] = useState('');
  const [newConsultantPhone, setNewConsultantPhone] = useState('');
  const [newConsultantPassword, setNewConsultantPassword] = useState('');
  const [selectedConsultantId, setSelectedConsultantId] = useState('');
  const [expandedCompanyIds, setExpandedCompanyIds] = useState<string[]>([]);
  
  // State - Companies & Users
  const [companies, setCompanies] = useState<Company[]>([]);
  const [users, setUsers] = useState<User[]>([]);
  const [selectedCompanyId, setSelectedCompanyId] = useState('');
  const [newCompanyName, setNewCompanyName] = useState('');
  const [newUserName, setNewUserName] = useState('');
  const [newUserEmail, setNewUserEmail] = useState('');
  const [newUserPassword, setNewUserPassword] = useState('');
  // Separate state for Company Users
  const [newCompanyUserName, setNewCompanyUserName] = useState('');
  const [newCompanyUserTitle, setNewCompanyUserTitle] = useState('');
  const [newCompanyUserEmail, setNewCompanyUserEmail] = useState('');
  const [newCompanyUserPhone, setNewCompanyUserPhone] = useState('');
  const [newCompanyUserPassword, setNewCompanyUserPassword] = useState('');
  // Separate state for Assessment Users (no phone field)
  const [newAssessmentUserName, setNewAssessmentUserName] = useState('');
  const [newAssessmentUserTitle, setNewAssessmentUserTitle] = useState('');
  const [newAssessmentUserEmail, setNewAssessmentUserEmail] = useState('');
  const [newAssessmentUserPassword, setNewAssessmentUserPassword] = useState('');
  
  // State - Company Details
  const [showCompanyDetailsModal, setShowCompanyDetailsModal] = useState(false);
  const [editingCompanyId, setEditingCompanyId] = useState('');
  const [companyAddressStreet, setCompanyAddressStreet] = useState('');
  const [companyAddressCity, setCompanyAddressCity] = useState('');
  const [companyAddressState, setCompanyAddressState] = useState('');
  const [companyAddressZip, setCompanyAddressZip] = useState('');
  const [companyAddressCountry, setCompanyAddressCountry] = useState('USA');
  const [companyIndustrySector, setCompanyIndustrySector] = useState<number | ''>('');
  const [expandedCompanyInfoId, setExpandedCompanyInfoId] = useState('');
  const [isManagementAssessmentExpanded, setIsManagementAssessmentExpanded] = useState(false);
  const [isFinancialScoreExpanded, setIsFinancialScoreExpanded] = useState(false);
  
  // State - Projections
  const [defaultBestCaseRevMult, setDefaultBestCaseRevMult] = useState(1.5);
  const [defaultBestCaseExpMult, setDefaultBestCaseExpMult] = useState(0.7);
  const [defaultWorstCaseRevMult, setDefaultWorstCaseRevMult] = useState(0.5);
  const [defaultWorstCaseExpMult, setDefaultWorstCaseExpMult] = useState(1.3);
  const [bestCaseRevMultiplier, setBestCaseRevMultiplier] = useState(1.5);
  const [bestCaseExpMultiplier, setBestCaseExpMultiplier] = useState(0.7);
  const [worstCaseRevMultiplier, setWorstCaseRevMultiplier] = useState(0.5);
  const [worstCaseExpMultiplier, setWorstCaseExpMultiplier] = useState(1.3);
  const [showDefaultSettings, setShowDefaultSettings] = useState(false);
  
  // State - Financial Data
  const [financialDataRecords, setFinancialDataRecords] = useState<FinancialDataRecord[]>([]);
  const [file, setFile] = useState<File | null>(null);
  const [rawRows, setRawRows] = useState<any[]>([]);
  const [columns, setColumns] = useState<string[]>([]);
  const [mapping, setMapping] = useState<Mappings>({ date: '' });
  const [error, setError] = useState<string | null>(null);
  const [isFreshUpload, setIsFreshUpload] = useState<boolean>(false);
  const [loadedMonthlyData, setLoadedMonthlyData] = useState<MonthlyDataRow[]>([]);
  const [currentView, setCurrentView] = useState<'login' | 'admin' | 'siteadmin' | 'upload' | 'results' | 'kpis' | 'mda' | 'projections' | 'working-capital' | 'valuation' | 'cash-flow' | 'financial-statements' | 'trend-analysis' | 'profile' | 'fs-intro' | 'fs-score' | 'ma-welcome' | 'ma-questionnaire' | 'ma-your-results' | 'ma-scores-summary' | 'ma-scoring-guide' | 'ma-charts'>('login');

  // Check if current view is allowed for assessment users
  const isAssessmentUserViewAllowed = (view: string) => {
    if (currentUser?.userType !== 'assessment') return true;
    const allowedViews = ['ma-welcome', 'ma-questionnaire', 'ma-your-results', 'ma-scores-summary', 'ma-scoring-guide', 'ma-charts'];
    return allowedViews.includes(view);
  };

  // Redirect assessment users if they try to access unauthorized views - but not during login
  useEffect(() => {
    if (currentUser?.userType === 'assessment' && isLoggedIn && currentView !== 'login' && !isAssessmentUserViewAllowed(currentView)) {
      console.log('🚫 useEffect redirecting from', currentView, 'to ma-welcome');
      setCurrentView('ma-welcome');
    }
  }, [currentView, currentUser, isLoggedIn]);

  // Helper function to handle view changes for assessment users
  const handleViewChange = (newView: string) => {
    console.log('🔄 handleViewChange called - newView:', newView, 'userType:', currentUser?.userType, 'isAllowed:', isAssessmentUserViewAllowed(newView));
    if (currentUser?.userType === 'assessment' && !isAssessmentUserViewAllowed(newView)) {
      console.log('❌ View not allowed, redirecting to ma-welcome');
      setCurrentView('ma-welcome');
    } else {
      console.log('✅ Setting view to:', newView);
      setCurrentView(newView as any);
    }
  };
  const [adminDashboardTab, setAdminDashboardTab] = useState<'company-management' | 'import-financials' | 'api-connections' | 'data-review' | 'data-mapping' | 'payments' | 'profile'>('company-management');
  const [kpiDashboardTab, setKpiDashboardTab] = useState<'all-ratios' | 'priority-ratios'>('all-ratios');
  const [priorityRatios, setPriorityRatios] = useState<string[]>([
    'Current Ratio', 'Quick Ratio', 'ROE', 'ROA', 'Interest Coverage', 'Debt/Net Worth'
  ]);

  // Available ratios by category for Priority Ratios tab
  const ratioCategories = {
    'Liquidity': ['Current Ratio', 'Quick Ratio'],
    'Activity': ['Inventory Turnover', 'Receivables Turnover', 'Payables Turnover', 'Days Inventory', 'Days Receivables', 'Days Payables', 'Sales/Working Capital'],
    'Coverage': ['Interest Coverage', 'Debt Service Coverage', 'Cash Flow to Debt'],
    'Leverage': ['Debt/Net Worth', 'Fixed Assets/Net Worth', 'Leverage Ratio'],
    'Operating': ['Total Asset Turnover', 'ROE', 'ROA', 'EBITDA Margin', 'EBIT Margin']
  };

  const allAvailableRatios = Object.values(ratioCategories).flat();

  // Helper function to get ratio value key for LineChart
  const getRatioValueKey = (ratioName: string): string => {
    const ratioMap: Record<string, string> = {
      'Current Ratio': 'currentRatio',
      'Quick Ratio': 'quickRatio',
      'Inventory Turnover': 'invTurnover',
      'Receivables Turnover': 'arTurnover',
      'Payables Turnover': 'apTurnover',
      'Days Inventory': 'daysInv',
      'Days Receivables': 'daysAR',
      'Days Payables': 'daysAP',
      'Sales/Working Capital': 'salesWC',
      'Interest Coverage': 'interestCov',
      'Debt Service Coverage': 'debtSvcCov',
      'Cash Flow to Debt': 'cfToDebt',
      'Debt/Net Worth': 'debtToNW',
      'Fixed Assets/Net Worth': 'fixedToNW',
      'Leverage Ratio': 'leverage',
      'Total Asset Turnover': 'totalAssetTO',
      'ROE': 'roe',
      'ROA': 'roa',
      'EBITDA Margin': 'ebitdaMargin',
      'EBIT Margin': 'ebitMargin'
    };
    return ratioMap[ratioName] || '';
  };

  // Helper function to get ratio color
  const getRatioColor = (ratioName: string): string => {
    const colorMap: Record<string, string> = {
      'Current Ratio': '#10b981',
      'Quick Ratio': '#14b8a6',
      'Inventory Turnover': '#f59e0b',
      'Receivables Turnover': '#f97316',
      'Payables Turnover': '#ef4444',
      'Days Inventory': '#fbbf24',
      'Days Receivables': '#fb923c',
      'Days Payables': '#f87171',
      'Sales/Working Capital': '#06b6d4',
      'Interest Coverage': '#8b5cf6',
      'Debt Service Coverage': '#a78bfa',
      'Cash Flow to Debt': '#c4b5fd',
      'Debt/Net Worth': '#ec4899',
      'Fixed Assets/Net Worth': '#f472b6',
      'Leverage Ratio': '#f9a8d4',
      'Total Asset Turnover': '#3b82f6',
      'ROE': '#60a5fa',
      'ROA': '#93c5fd',
      'EBITDA Margin': '#2563eb',
      'EBIT Margin': '#1e40af'
    };
    return colorMap[ratioName] || '#64748b';
  };

  // Helper function to get ratio formatter
  const getRatioFormatter = (ratioName: string): ((v: number) => string) => {
    if (ratioName.includes('Days')) {
      return (v: number) => v.toFixed(0);
    }
    return (v: number) => v.toFixed(1);
  };

  // Function to save priority ratios
  const savePriorityRatios = () => {
    localStorage.setItem('fs_priorityRatios', JSON.stringify(priorityRatios));
    alert('Priority ratios saved successfully!');
  };
  
  // State - Subscription Pricing
  const [subscriptionMonthlyPrice, setSubscriptionMonthlyPrice] = useState<number | undefined>();
  const [subscriptionQuarterlyPrice, setSubscriptionQuarterlyPrice] = useState<number | undefined>();
  const [subscriptionAnnualPrice, setSubscriptionAnnualPrice] = useState<number | undefined>();
  
  // State - Management Assessment
  const [assessmentResponses, setAssessmentResponses] = useState<AssessmentResponses>({});
  const [assessmentNotes, setAssessmentNotes] = useState<AssessmentNotes>({});
  const [assessmentRecords, setAssessmentRecords] = useState<AssessmentRecord[]>([]);
  const [unansweredQuestions, setUnansweredQuestions] = useState<string[]>([]);
  
  // State - Trend Analysis
  const [selectedTrendItem, setSelectedTrendItem] = useState<string>('revenue');
  const [trendAnalysisTab, setTrendAnalysisTab] = useState<'item-trends' | 'expense-analysis'>('item-trends');
  
  // State - Valuation
  const [sdeMultiplier, setSdeMultiplier] = useState(2.5);
  const [ebitdaMultiplier, setEbitdaMultiplier] = useState(5.0);
  const [dcfDiscountRate, setDcfDiscountRate] = useState(10.0);
  const [dcfTerminalGrowth, setDcfTerminalGrowth] = useState(2.0);

  // State - Industry Benchmarks
  const [benchmarks, setBenchmarks] = useState<any[]>([]);

  // State - Company Profiles
  const [companyProfiles, setCompanyProfiles] = useState<CompanyProfile[]>([]);
  
  // State - QuickBooks Raw Data
  const [qbRawData, setQbRawData] = useState<any>(null);
  const [dataRefreshKey, setDataRefreshKey] = useState(0);

  // State - QuickBooks Connection
  const [qbConnected, setQbConnected] = useState(false);

  // State - Financial Statements
  const [statementType, setStatementType] = useState<'income-statement' | 'balance-sheet' | 'income-statement-percent'>('income-statement');
  const [statementPeriod, setStatementPeriod] = useState<'current-month' | 'current-quarter' | 'last-12-months' | 'ytd' | 'last-year' | 'last-3-years'>('current-month');
  const [financialStatementsTab, setFinancialStatementsTab] = useState<'aggregated' | 'line-of-business'>('aggregated');
  const [selectedLineOfBusiness, setSelectedLineOfBusiness] = useState<string>('all');
  const [statementDisplay, setStatementDisplay] = useState<'monthly' | 'quarterly' | 'annual'>('monthly');
  
  // State - MD&A Tabs
  const [mdaTab, setMdaTab] = useState<'executive-summary' | 'strengths-insights' | 'key-metrics'>('executive-summary');
  
  // State - Formula Popup
  const [showFormulaPopup, setShowFormulaPopup] = useState<string | null>(null);

  // State - AI Mapping
  const [aiMappings, setAiMappings] = useState<any[]>([]);
  const [isGeneratingMappings, setIsGeneratingMappings] = useState(false);
  const [isSavingMappings, setIsSavingMappings] = useState(false);
  
  // State - Lines of Business
  const [linesOfBusiness, setLinesOfBusiness] = useState<string[]>(['', '', '', '', '']);
  const [showMappingSection, setShowMappingSection] = useState(false);
  const [isProcessingMonthlyData, setIsProcessingMonthlyData] = useState(false);
  const [qbStatus, setQbStatus] = useState<'ACTIVE' | 'INACTIVE' | 'ERROR' | 'EXPIRED' | 'NOT_CONNECTED'>('NOT_CONNECTED');
  const [qbLastSync, setQbLastSync] = useState<Date | null>(null);
  const [qbSyncing, setQbSyncing] = useState(false);
  const [qbError, setQbError] = useState<string | null>(null);
  

  // State - API Loading & Errors
  const [isLoading, setIsLoading] = useState(false);
  const [apiError, setApiError] = useState<string | null>(null);
  const [dataLoaded, setDataLoaded] = useState(false);

  // Load from localStorage (DEPRECATED - will be removed)
  useEffect(() => {
    const saved = {
      consultants: localStorage.getItem('fs_consultants'),
      companies: localStorage.getItem('fs_companies'),
      users: localStorage.getItem('fs_users'),
      currentUser: localStorage.getItem('fs_currentUser'),
      records: localStorage.getItem('fs_financialDataRecords'),
      selectedCompany: localStorage.getItem('fs_selectedCompanyId'),
      defaults: localStorage.getItem('fs_projectionDefaults'),
      assessmentResponses: localStorage.getItem('fs_assessmentResponses'),
      assessmentNotes: localStorage.getItem('fs_assessmentNotes'),
      assessmentRecords: localStorage.getItem('fs_assessmentRecords'),
      companyProfiles: localStorage.getItem('fs_companyProfiles'),
      priorityRatios: localStorage.getItem('fs_priorityRatios')
    };
    
    // Check user type first to determine if we should load assessment data
    const savedUser = saved.currentUser ? JSON.parse(saved.currentUser) : null;
    const isAssessmentUser = savedUser?.userType === 'assessment';
    
    if (saved.consultants) setConsultants(JSON.parse(saved.consultants));
    if (saved.companies) setCompanies(JSON.parse(saved.companies));
    if (saved.users) setUsers(JSON.parse(saved.users));
    if (saved.records) setFinancialDataRecords(JSON.parse(saved.records));
    if (saved.selectedCompany) setSelectedCompanyId(saved.selectedCompany);
    // Don't load assessment responses from localStorage for assessment users - they'll load from DB
    if (saved.assessmentResponses && !isAssessmentUser) setAssessmentResponses(JSON.parse(saved.assessmentResponses));
    if (saved.assessmentNotes && !isAssessmentUser) setAssessmentNotes(JSON.parse(saved.assessmentNotes));
    if (saved.assessmentRecords) setAssessmentRecords(JSON.parse(saved.assessmentRecords));
    if (saved.companyProfiles) setCompanyProfiles(JSON.parse(saved.companyProfiles));
    if (saved.priorityRatios) setPriorityRatios(JSON.parse(saved.priorityRatios));
    
    if (saved.defaults) {
      const d = JSON.parse(saved.defaults);
      setDefaultBestCaseRevMult(d.bestCaseRev || 1.5);
      setDefaultBestCaseExpMult(d.bestCaseExp || 0.7);
      setDefaultWorstCaseRevMult(d.worstCaseRev || 0.5);
      setDefaultWorstCaseExpMult(d.worstCaseExp || 1.3);
      setBestCaseRevMultiplier(d.bestCaseRev || 1.5);
      setBestCaseExpMultiplier(d.bestCaseExp || 0.7);
      setWorstCaseRevMultiplier(d.worstCaseRev || 0.5);
      setWorstCaseExpMultiplier(d.worstCaseExp || 1.3);
    }
    
    if (saved.currentUser) {
      const user = JSON.parse(saved.currentUser);
      
      // Don't auto-login assessment users from localStorage - they should login fresh each time
      if (user.userType === 'assessment') {
        localStorage.removeItem('fs_currentUser');
        return;
      }
      
      setCurrentUser(user);
      setIsLoggedIn(true);
      
      // Set appropriate default view based on user type
      if (user.role === 'siteadmin') {
        setCurrentView('siteadmin');
      } else if (user.role === 'consultant') {
        setCurrentView('admin');
      } else {
        setCurrentView('upload');
      }
    }
  }, []);

  useEffect(() => { if (consultants.length > 0) localStorage.setItem('fs_consultants', JSON.stringify(consultants)); }, [consultants]);
  useEffect(() => { if (companies.length > 0) localStorage.setItem('fs_companies', JSON.stringify(companies)); }, [companies]);
  useEffect(() => { if (users.length > 0) localStorage.setItem('fs_users', JSON.stringify(users)); }, [users]);
  useEffect(() => { if (currentUser) localStorage.setItem('fs_currentUser', JSON.stringify(currentUser)); }, [currentUser]);
  useEffect(() => { if (financialDataRecords.length > 0) localStorage.setItem('fs_financialDataRecords', JSON.stringify(financialDataRecords)); }, [financialDataRecords]);
  
  useEffect(() => { if (Object.keys(assessmentResponses).length > 0 && currentUser?.userType !== 'assessment') localStorage.setItem('fs_assessmentResponses', JSON.stringify(assessmentResponses)); }, [assessmentResponses, currentUser]);
  useEffect(() => { if (Object.keys(assessmentNotes).length > 0 && currentUser?.userType !== 'assessment') localStorage.setItem('fs_assessmentNotes', JSON.stringify(assessmentNotes)); }, [assessmentNotes, currentUser]);
  useEffect(() => { if (assessmentRecords.length > 0) localStorage.setItem('fs_assessmentRecords', JSON.stringify(assessmentRecords)); }, [assessmentRecords]);
  useEffect(() => { if (companyProfiles.length > 0) localStorage.setItem('fs_companyProfiles', JSON.stringify(companyProfiles)); }, [companyProfiles]);
  useEffect(() => { if (priorityRatios.length > 0) localStorage.setItem('fs_priorityRatios', JSON.stringify(priorityRatios)); }, [priorityRatios]);

  useEffect(() => {
    if (selectedCompanyId) {
      localStorage.setItem('fs_selectedCompanyId', selectedCompanyId);
      const record = financialDataRecords.find(r => r.companyId === selectedCompanyId);
      if (record) {
        setIsFreshUpload(false);
        setRawRows(record.rawRows);
        setMapping(record.mapping);
        setFile({ name: record.fileName } as File);
        setColumns(record.rawRows.length > 0 ? Object.keys(record.rawRows[0]) : []);
      } else {
        setRawRows([]);
        setMapping({ date: '' });
        setFile(null);
        setColumns([]);
        setIsFreshUpload(false);
      }
    }
  }, [selectedCompanyId, financialDataRecords]);

  // Handle URL parameters for navigation and messages
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const view = urlParams.get('view');
    const tab = urlParams.get('tab');
    const success = urlParams.get('success');
    const error = urlParams.get('error');

    // Set view if specified
    if (view === 'admin') {
      setCurrentView('admin');
    }

    // Set admin dashboard tab if specified
    if (tab === 'api-connections' || tab === 'import-financials' || tab === 'company-management' || tab === 'data-review') {
      setAdminDashboardTab(tab);
    }

    // Show success message
    if (success === 'quickbooks_connected') {
      alert('QuickBooks connected successfully! You can now sync your financial data.');
      // Clean URL
      window.history.replaceState({}, '', window.location.pathname + '?view=admin');
    }

    // Show error message
    if (error === 'quickbooks_connection_failed') {
      alert('Failed to connect to QuickBooks. Please try again.');
      // Clean URL
      window.history.replaceState({}, '', window.location.pathname + '?view=admin');
    }
  }, []);

  // Load company-specific data from API when company is selected
  useEffect(() => {
    const loadCompanyData = async () => {
      if (!selectedCompanyId || !currentUser) return;
      
      try {
        // ALWAYS clear state at the start to prevent stale data
        console.log('🧹 Clearing all state before loading new company data');
        setQbRawData(null);
        setRawRows([]);
        setMapping({ date: '' });
        setFile(null);
        setColumns([]);
        
        // Load users for this company
        console.log('Loading users for company:', selectedCompanyId);
        const { users: companyUsers } = await usersApi.getByCompany(selectedCompanyId);
        console.log('Users loaded from API:', companyUsers);
        
        // Normalize role and userType to lowercase
        const normalizedUsers = companyUsers.map((u: any) => ({
          ...u,
          role: u.role.toLowerCase(),
          userType: u.userType?.toLowerCase()
        }));
        console.log('Normalized users:', normalizedUsers);
        
        setUsers((prevUsers) => {
          const otherUsers = prevUsers.filter(u => u.companyId !== selectedCompanyId);
          const newUsers = [...otherUsers, ...normalizedUsers];
          console.log('Setting users state:', newUsers);
          return newUsers;
        });
        
        // Load financial records
        const selectedCompany = companies.find(c => c.id === selectedCompanyId);
        const companyName = selectedCompany?.name || 'Unknown';
        console.log(`📂 LOADING DATA FOR: "${companyName}" (ID: ${selectedCompanyId})`);
        
        const { records } = await financialsApi.getByCompany(selectedCompanyId);
        console.log(`📂 Found ${records.length} financial records for company "${companyName}"`);
        
        // If no records found, clear aiMappings as well
        if (!records || records.length === 0) {
          console.log(`🧹 No records found - clearing aiMappings too`);
          setAiMappings([]);
        } else if (records && records.length > 0) {
          const latestRecord = records[0];
          console.log(`📂 Latest record ID: ${latestRecord.id}, created: ${latestRecord.createdAt}`);
          
          // Check if this is QuickBooks data and extract raw QB financial statements
          if (latestRecord.rawData && typeof latestRecord.rawData === 'object' && 
              !Array.isArray(latestRecord.rawData) &&
              (latestRecord.rawData.profitAndLoss || latestRecord.rawData.balanceSheet)) {
            // QuickBooks data - use monthlyData directly
            console.log(`🔄 Loading QB data for company: "${companyName}" (${selectedCompanyId})`);
            console.log(`📄 Record belongs to company ID: ${latestRecord.companyId}`);
            console.log(`📅 QB Data sync date:`, latestRecord.rawData.syncDate);
            console.log(`🔑 QB rawData object keys:`, Object.keys(latestRecord.rawData));
            console.log(`✅ SETTING qbRawData with sync date:`, latestRecord.rawData.syncDate);
            // Add companyId to the raw data so we can verify it matches
            setQbRawData({
              ...latestRecord.rawData,
              _companyId: selectedCompanyId,
              _recordId: latestRecord.id
            });
            console.log(`⚠️ Set qbRawData for company: ${selectedCompanyId}, record: ${latestRecord.id}`);
            // Force re-render of Financial Statements view
            setDataRefreshKey(prev => prev + 1);
            setRawRows([]); // Set empty array since rawRows is not used for QB data
            setMapping(latestRecord.columnMapping || { date: '' });
            setFile({ name: latestRecord.fileName } as File);
            setColumns([]);
            
            // Convert monthlyData to the format expected by the app
            const convertedMonthly = latestRecord.monthlyData.map((m: any) => ({
              date: new Date(m.monthDate),
              month: new Date(m.monthDate).toLocaleDateString('en-US', { month: '2-digit', year: 'numeric' }),
              revenue: m.revenue || 0,
              expense: m.expense || 0,
              cogsPayroll: m.cogsPayroll || 0,
              cogsOwnerPay: m.cogsOwnerPay || 0,
              cogsContractors: m.cogsContractors || 0,
              cogsMaterials: m.cogsMaterials || 0,
              cogsCommissions: m.cogsCommissions || 0,
              cogsOther: m.cogsOther || 0,
              cogsTotal: m.cogsTotal || 0,
              cash: m.cash || 0,
              ar: m.ar || 0,
              inventory: m.inventory || 0,
              otherCA: m.otherCA || 0,
              tca: m.tca || 0,
              fixedAssets: m.fixedAssets || 0,
              otherAssets: m.otherAssets || 0,
              totalAssets: m.totalAssets || 0,
              ap: m.ap || 0,
              otherCL: m.otherCL || 0,
              tcl: m.tcl || 0,
              ltd: m.ltd || 0,
              totalLiab: m.totalLiab || 0,
              totalEquity: m.totalEquity || 0,
              totalLAndE: m.totalLAndE || 0
            }));
            setLoadedMonthlyData(convertedMonthly);
          } else {
            // CSV data - set rawRows for processing
            setQbRawData(null);
            setRawRows(latestRecord.rawData);
            setMapping(latestRecord.columnMapping);
            setFile({ name: latestRecord.fileName } as File);
            setColumns(Object.keys(latestRecord.rawData[0] || {}));
            setLoadedMonthlyData([]); // Clear loaded data for CSV
          }
        }
        
        // Load assessment records
        console.log(`📊 Loading assessment records for company: ${selectedCompanyId}`);
        const { records: assessments } = await assessmentsApi.getByCompany(selectedCompanyId);
        console.log(`📊 Loaded ${assessments?.length || 0} assessment records:`, assessments);
        setAssessmentRecords(assessments || []);
        console.log(`✅ Assessment records set in state`);
        
        // Load company profile
        const { profile } = await profilesApi.get(selectedCompanyId);
        if (profile) {
          setCompanyProfiles((prev) => {
            const filtered = prev.filter(p => p.companyId !== selectedCompanyId);
            return [...filtered, profile];
          });
        }
        
        // Load saved account mappings
        try {
          const mappingsResponse = await fetch(`/api/account-mappings?companyId=${selectedCompanyId}`);
          if (mappingsResponse.ok) {
            const { mappings } = await mappingsResponse.json();
            if (mappings && mappings.length > 0) {
              console.log('Loaded saved account mappings:', mappings);
              setAiMappings(mappings);
              setShowMappingSection(true);
            }
          }
        } catch (error) {
          console.error('Error loading account mappings:', error);
        }
        
        // Load industry benchmarks
        const company = companies.find(c => c.id === selectedCompanyId);
        if (company && company.industrySector) {
          console.log('Company has industry sector:', company.industrySector);
          // Get the latest Total Assets to determine asset size category
          let assetCategory = '1m-5m'; // Default to middle range
          if (records && records.length > 0) {
            const latestRecord = records[0];
            const monthlyData = latestRecord.monthlyData || [];
            if (monthlyData.length > 0) {
              const mostRecentMonth = monthlyData[monthlyData.length - 1];
              const totalAssets = mostRecentMonth.totalAssets || 0;
              assetCategory = getAssetSizeCategory(totalAssets);
              console.log('Total Assets:', totalAssets, '-> Asset Category:', assetCategory);
            }
          }
          
          // Fetch benchmarks for this industry and asset size
          console.log('Fetching benchmarks for industry:', company.industrySector, 'assetSize:', assetCategory);
          const benchmarkData = await benchmarksApi.get(String(company.industrySector), assetCategory);
          setBenchmarks(benchmarkData || []);
          console.log('✅ Loaded', benchmarkData?.length || 0, 'benchmarks');
          if (benchmarkData && benchmarkData.length > 0) {
            console.log('Sample benchmarks:', benchmarkData.slice(0, 3).map(b => b.metricName).join(', '));
          }
        } else {
          console.log('⚠️ Cannot load benchmarks:', !company ? 'Company not found' : 'Industry sector not set');
        }

        // Load subscription pricing for this company
        if (company) {
          setSubscriptionMonthlyPrice(company.subscriptionMonthlyPrice);
          setSubscriptionQuarterlyPrice(company.subscriptionQuarterlyPrice);
          setSubscriptionAnnualPrice(company.subscriptionAnnualPrice);
        }

        // Check QuickBooks connection status
        await checkQBStatus(selectedCompanyId);
      } catch (error) {
        console.error('Error loading company data:', error);
      }
    };
    
    loadCompanyData();
  }, [selectedCompanyId, currentUser, qbLastSync]);


  // Load companies for consultants
  useEffect(() => {
    const loadConsultantCompanies = async () => {
      if (!currentUser || currentUser.role !== 'consultant' || !currentUser.consultantId) return;
      
      try {
        const { companies: consultantCompanies } = await companiesApi.getAll(currentUser.consultantId);
        setCompanies(consultantCompanies || []);
        
        // Load all users and assessment records for all companies
        const allUsers: User[] = [];
        const allAssessments: AssessmentRecord[] = [];
        for (const company of consultantCompanies || []) {
          try {
            // Load users for this company
            const { users: companyUsers } = await usersApi.getByCompany(company.id);
            if (companyUsers) {
              const normalizedUsers = companyUsers.map((u: any) => ({
                ...u,
                role: u.role?.toLowerCase() || 'user',
                userType: u.userType?.toLowerCase() || 'company'
              }));
              allUsers.push(...normalizedUsers);
            }
            
            // Load assessment records for this company
            const { records } = await assessmentsApi.getByCompany(company.id);
            if (records) {
              console.log(`📊 Loaded ${records.length} assessment records for company ${company.id} (${company.name}):`, 
                records.map(r => ({ userEmail: r.user?.email, companyId: r.companyId, answersCount: Object.keys(r.responses || {}).length }))
              );
              allAssessments.push(...records);
            }
          } catch (error) {
            console.error(`Error loading data for company ${company.id}:`, error);
          }
        }
        console.log(`✅ Total loaded: ${allUsers.length} users, ${allAssessments.length} assessment records`);
        console.log(`Assessment users:`, allUsers.filter(u => u.userType === 'assessment').map(u => ({ email: u.email, companyId: u.companyId })));
        setUsers(allUsers);
        setAssessmentRecords(allAssessments);
      } catch (error) {
        console.error('Error loading consultant companies:', error);
      }
    };
    
    loadConsultantCompanies();
  }, [currentUser]);

  // Load consultants for site admin
  useEffect(() => {
    const loadConsultants = async () => {
      if (!currentUser || currentUser.role !== 'siteadmin') return;
      
      try {
        const { consultants: loadedConsultants } = await consultantsApi.getAll();
        setConsultants(loadedConsultants || []);
        
        // Also load all companies and users for display
        const allCompanies: any[] = [];
        const allUsers: any[] = [];
        for (const consultant of loadedConsultants || []) {
          if (consultant.companies) {
            allCompanies.push(...consultant.companies);
          }
        }
        setCompanies(allCompanies);
      } catch (error) {
        console.error('Error loading consultants:', error);
      }
    };
    
    loadConsultants();
  }, [currentUser]);

  // Load financial data when company is selected
  useEffect(() => {
    const loadFinancialData = async () => {
      if (!selectedCompanyId) {
        setLoadedMonthlyData([]);
        return;
      }
      
      try {
        console.log('Loading financial data for company:', selectedCompanyId);
        const response = await fetch(`/api/financials?companyId=${selectedCompanyId}`);
        
        if (!response.ok) {
          console.log('No financial data found for company');
          setLoadedMonthlyData([]);
          return;
        }
        
        const data = await response.json();
        if (data.records && data.records.length > 0 && data.records[0].monthlyData) {
          const monthlyData = data.records[0].monthlyData;
          
          // Convert API data to the format expected by the app
          const formattedData = monthlyData.map((m: any) => ({
            date: new Date(m.monthDate),
            month: m.month || new Date(m.monthDate).toLocaleDateString('en-US', { month: '2-digit', year: 'numeric' }),
            revenue: m.revenue || 0,
            expense: m.expense || 0,
            cogsPayroll: m.cogsPayroll || 0,
            cogsOwnerPay: m.cogsOwnerPay || 0,
            cogsContractors: m.cogsContractors || 0,
            cogsMaterials: m.cogsMaterials || 0,
            cogsCommissions: m.cogsCommissions || 0,
            cogsOther: m.cogsOther || 0,
            cogsTotal: m.cogsTotal || 0,
            opexSalesMarketing: m.salesExpense || m.opexSalesMarketing || 0,
            rentLease: m.rent || m.rentLease || 0,
            utilities: m.utilities || 0,
            equipment: m.infrastructure || m.equipment || 0,
            travel: m.autoTravel || m.travel || 0,
            professionalServices: m.professionalFees || m.professionalServices || 0,
            insurance: m.insurance || 0,
            opexOther: m.marketing || m.opexOther || 0,
            opexPayroll: m.payroll || m.opexPayroll || 0,
            ownersBasePay: m.ownerBasePay || m.ownersBasePay || 0,
            ownersRetirement: m.ownersRetirement || 0,
            contractorsDistribution: m.subcontractors || m.contractorsDistribution || 0,
            interestExpense: m.interestExpense || 0,
            depreciationExpense: m.depreciationAmortization || m.depreciationExpense || 0,
            operatingExpenseTotal: m.operatingExpenseTotal || 0,
            nonOperatingIncome: m.nonOperatingIncome || 0,
            extraordinaryItems: m.extraordinaryItems || 0,
            netProfit: m.netProfit || 0,
            totalAssets: m.totalAssets || 0,
            totalLiab: m.totalLiab || 0,
            cash: m.cash || 0,
            ar: m.ar || 0,
            inventory: m.inventory || 0,
            otherCA: m.otherCA || 0,
            tca: m.tca || 0,
            fixedAssets: m.fixedAssets || 0,
            otherAssets: m.otherAssets || 0,
            ap: m.ap || 0,
            otherCL: m.otherCL || 0,
            tcl: m.tcl || 0,
            ltd: m.ltd || 0,
            totalEquity: m.totalEquity || 0,
            totalLAndE: m.totalLAndE || 0
          }));
          
          console.log('✅ Loaded', formattedData.length, 'months of financial data from database');
          console.log('📊 RAW from database (sample):', {
            revenue: monthlyData[0]?.revenue,
            payroll: monthlyData[0]?.payroll,
            professionalFees: monthlyData[0]?.professionalFees,
            rent: monthlyData[0]?.rent
          });
          console.log('📊 FORMATTED for display (sample):', {
            revenue: formattedData[0]?.revenue,
            opexPayroll: formattedData[0]?.opexPayroll,
            professionalServices: formattedData[0]?.professionalServices,
            rentLease: formattedData[0]?.rentLease
          });
          setLoadedMonthlyData(formattedData);
        } else {
          console.log('No monthly data in response');
          setLoadedMonthlyData([]);
        }
      } catch (error) {
        console.error('Error loading financial data:', error);
        setLoadedMonthlyData([]);
      }
    };
    
    loadFinancialData();
  }, [selectedCompanyId, qbLastSync]);

  useEffect(() => {
    const saveFinancialData = async () => {
      if (!file || rawRows.length === 0 || !mapping.date || !selectedCompanyId || !currentUser || !isFreshUpload) return;
      
      try {
        console.log('Saving financial data to database...');
        // Use normalizeRows to process the data
        const normalized = normalizeRows(rawRows, mapping);
        
        // Process raw rows to get full data with all fields (same as monthly useMemo)
        const fullMonthlyData = rawRows.map((row, i) => {
          const monthValue = row[mapping.date] || `Month ${i + 1}`;
          // Parse date string to create monthDate
          let monthDate = new Date();
          if (monthValue && monthValue.includes('/')) {
            const [month, day, year] = monthValue.split('/');
            monthDate = new Date(parseInt(year), parseInt(month) - 1, 1);
          } else if (monthValue && monthValue.includes('-')) {
            monthDate = new Date(monthValue);
          }
          
          return {
          month: monthValue,
          monthDate: monthDate.toISOString(),
          revenue: parseFloat(row[mapping.revenue!]) || 0,
          expense: parseFloat(row[mapping.expense!]) || 0,
          cogsPayroll: parseFloat(row[mapping.cogsPayroll!]) || 0,
          cogsOwnerPay: parseFloat(row[mapping.cogsOwnerPay!]) || 0,
          cogsContractors: parseFloat(row[mapping.cogsContractors!]) || 0,
          cogsMaterials: parseFloat(row[mapping.cogsMaterials!]) || 0,
          cogsCommissions: parseFloat(row[mapping.cogsCommissions!]) || 0,
          cogsOther: parseFloat(row[mapping.cogsOther!]) || 0,
          cogsTotal: parseFloat(row[mapping.cogsTotal!]) || 0,
          opexSalesMarketing: parseFloat(row[mapping.opexSalesMarketing!]) || 0,
          rentLease: parseFloat(row[mapping.rentLease!]) || 0,
          utilities: parseFloat(row[mapping.utilities!]) || 0,
          equipment: parseFloat(row[mapping.equipment!]) || 0,
          travel: parseFloat(row[mapping.travel!]) || 0,
          professionalServices: parseFloat(row[mapping.professionalServices!]) || 0,
          insurance: parseFloat(row[mapping.insurance!]) || 0,
          opexOther: parseFloat(row[mapping.opexOther!]) || 0,
          opexPayroll: parseFloat(row[mapping.opexPayroll!]) || 0,
          ownersBasePay: parseFloat(row[mapping.ownersBasePay!]) || 0,
          ownersRetirement: parseFloat(row[mapping.ownersRetirement!]) || 0,
          contractorsDistribution: parseFloat(row[mapping.contractorsDistribution!]) || 0,
          interestExpense: parseFloat(row[mapping.interestExpense!]) || 0,
          depreciationExpense: parseFloat(row[mapping.depreciationExpense!]) || 0,
          operatingExpenseTotal: parseFloat(row[mapping.operatingExpenseTotal!]) || 0,
          nonOperatingIncome: parseFloat(row[mapping.nonOperatingIncome!]) || 0,
          extraordinaryItems: parseFloat(row[mapping.extraordinaryItems!]) || 0,
          netProfit: parseFloat(row[mapping.netProfit!]) || 0,
          totalAssets: parseFloat(row[mapping.totalAssets!]) || 0,
          totalLiab: parseFloat(row[mapping.totalLiab!]) || 0,
          cash: parseFloat(row[mapping.cash!]) || 0,
          ar: parseFloat(row[mapping.ar!]) || 0,
          inventory: parseFloat(row[mapping.inventory!]) || 0,
          otherCA: parseFloat(row[mapping.otherCA!]) || 0,
          tca: parseFloat(row[mapping.tca!]) || 0,
          fixedAssets: parseFloat(row[mapping.fixedAssets!]) || 0,
          otherAssets: parseFloat(row[mapping.otherAssets!]) || 0,
          ap: parseFloat(row[mapping.ap!]) || 0,
          otherCL: parseFloat(row[mapping.otherCL!]) || 0,
          tcl: parseFloat(row[mapping.tcl!]) || 0,
          ltd: parseFloat(row[mapping.ltd!]) || 0,
          totalEquity: parseFloat(row[mapping.totalEquity!]) || 0,
          totalLAndE: parseFloat(row[mapping.totalLAndE!]) || 0
          };
        });
        
        console.log('📤 Uploading', fullMonthlyData.length, 'months of data for company', selectedCompanyId);
        console.log('📊 Sample Excel values from row 0:', { 
          revenue: rawRows[0]?.[mapping.revenue!], 
          expense: rawRows[0]?.[mapping.expense!],
          professionalServices: rawRows[0]?.[mapping.professionalServices!]
        });
        console.log('📊 First 3 months PARSED:', fullMonthlyData.slice(0, 3).map(m => ({ 
          month: m.month, 
          revenue: m.revenue, 
          expense: m.expense,
          professionalServices: m.professionalServices
        })));
        
        const result = await financialsApi.upload({
          companyId: selectedCompanyId,
          uploadedByUserId: currentUser.id,
          fileName: file.name,
          rawData: rawRows,
          columnMapping: mapping,
          monthlyData: fullMonthlyData
        });
        
        console.log('Financial data saved successfully:', result);
        setIsFreshUpload(false);
        
        // Immediately set loadedMonthlyData so reports show it
        setLoadedMonthlyData(fullMonthlyData);
        
        alert('Financial data saved successfully! You can now view it in the reports.');
      } catch (error) {
        console.error('Error saving financial data:', error);
        const errorMsg = error instanceof ApiError ? error.message : 'Failed to save financial data';
        setError(errorMsg);
        alert('Error saving financial data: ' + errorMsg);
      }
    };
    
    if (isFreshUpload) {
      saveFinancialData();
    }
  }, [mapping, rawRows, file, selectedCompanyId, currentUser, isFreshUpload]);

  // Auto-map columns
  const autoMapColumns = (columnNames: string[]): Mappings => {
    const mapping: Mappings = { date: '' };
    const normalize = (str: string) => str.toLowerCase().trim().replace(/[^a-z0-9]/g, '');
    
    columnNames.forEach(col => {
      const n = normalize(col);
      // Core fields
      if (!mapping.date && (n.includes('date') || n.includes('month') || n.includes('period'))) mapping.date = col;
      if (!mapping.revenue && (n.includes('grossrevenue') || n.includes('totalgrossrevenue') || n.includes('revenue') || n.includes('sales'))) mapping.revenue = col;
      if (!mapping.expense && (n.includes('totalexpense') || (n.includes('expense') && n.includes('total')))) mapping.expense = col;
      
      // COGS
      if (!mapping.cogsPayroll && n.includes('cogs') && n.includes('payroll')) mapping.cogsPayroll = col;
      if (!mapping.cogsOwnerPay && n.includes('cogs') && n.includes('owner')) mapping.cogsOwnerPay = col;
      if (!mapping.cogsContractors && n.includes('cogs') && n.includes('contractor')) mapping.cogsContractors = col;
      if (!mapping.cogsMaterials && n.includes('cogs') && n.includes('material')) mapping.cogsMaterials = col;
      if (!mapping.cogsCommissions && n.includes('cogs') && (n.includes('comsn') || n.includes('commission'))) mapping.cogsCommissions = col;
      if (!mapping.cogsOther && n.includes('cogs') && n.includes('other')) mapping.cogsOther = col;
      if (!mapping.cogsTotal && n.includes('cogs') && n.includes('total')) mapping.cogsTotal = col;
      
      // OPEX
      if (!mapping.opexSalesMarketing && ((n.includes('opex') && (n.includes('sales') || n.includes('marketing'))) || (n === 'salesandmarketing' || n === 'salesmarketing'))) mapping.opexSalesMarketing = col;
      if (!mapping.rentLease && (n.includes('rent') || n.includes('lease'))) mapping.rentLease = col;
      if (!mapping.utilities && n.includes('utilit')) mapping.utilities = col;
      if (!mapping.equipment && n.includes('equipment')) mapping.equipment = col;
      if (!mapping.travel && n.includes('travel')) mapping.travel = col;
      if (!mapping.professionalServices && n.includes('professional')) mapping.professionalServices = col;
      if (!mapping.insurance && n.includes('insurance')) mapping.insurance = col;
      if (!mapping.opexOther && ((n.includes('opex') && n.includes('other')) || n === 'otheropex')) mapping.opexOther = col;
      if (!mapping.opexPayroll && ((n.includes('opex') && n.includes('payroll')) || (n === 'payroll' && !n.includes('cogs')))) mapping.opexPayroll = col;
      
      // Owners & Other Expenses
      if (!mapping.ownersBasePay && n.includes('owners') && n.includes('base')) mapping.ownersBasePay = col;
      if (!mapping.ownersRetirement && n.includes('owners') && n.includes('retirement')) mapping.ownersRetirement = col;
      if (!mapping.contractorsDistribution && n.includes('contractors') && n.includes('distribution')) mapping.contractorsDistribution = col;
      if (!mapping.interestExpense && n.includes('interest')) mapping.interestExpense = col;
      if (!mapping.depreciationExpense && n.includes('depreciation')) mapping.depreciationExpense = col;
      if (!mapping.operatingExpenseTotal && n.includes('operating') && n.includes('expense') && n.includes('total')) mapping.operatingExpenseTotal = col;
      if (!mapping.nonOperatingIncome && (n.includes('nonoperating') || n.includes('nonoperatng')) && n.includes('income')) mapping.nonOperatingIncome = col;
      if (!mapping.extraordinaryItems && (n.includes('extraordinary') || n.includes('extraordinaryitems'))) mapping.extraordinaryItems = col;
      if (!mapping.netProfit && (n.includes('netprofit') || n.includes('netincome'))) mapping.netProfit = col;
      
      // Assets
      if (!mapping.totalAssets && (n.includes('totalasset') || n === 'totalassets' || n === 'assets')) mapping.totalAssets = col;
      if (!mapping.cash && n === 'cash') mapping.cash = col;
      if (!mapping.ar && (n.includes('accountsreceivable') || n.includes('receivable') || n === 'ar')) mapping.ar = col;
      if (!mapping.inventory && n.includes('inventory')) mapping.inventory = col;
      if (!mapping.otherCA && (n.includes('othercurrentasset') || n === 'othercurrentassets')) mapping.otherCA = col;
      if (!mapping.tca && (n.includes('totalcurrentasset') || n === 'totalcurrentassets' || n === 'currentassets')) mapping.tca = col;
      if (!mapping.fixedAssets && (n.includes('fixedasset') || n === 'fixedassets')) mapping.fixedAssets = col;
      if (!mapping.otherAssets && (n.includes('otherasset') && !n.includes('current'))) mapping.otherAssets = col;
      
      // Liabilities & Equity
      if (!mapping.totalLiab && (n.includes('totalliab') || n === 'totalliabilities' || n === 'liabilities')) mapping.totalLiab = col;
      if (!mapping.ap && (n.includes('accountspayable') || n.includes('payable') || n === 'ap')) mapping.ap = col;
      if (!mapping.otherCL && (n.includes('othercurrentliab') || n === 'othercurrentliabilities')) mapping.otherCL = col;
      if (!mapping.tcl && (n.includes('totalcurrentliab') || n === 'totalcurrentliabilities' || n === 'currentliabilities')) mapping.tcl = col;
      if (!mapping.ltd && (n.includes('longtermdebt') || n.includes('ltd') || n === 'longtermdebt')) mapping.ltd = col;
      if (!mapping.totalEquity && (n.includes('totalequity') || n.includes('equity') || n.includes('networth'))) mapping.totalEquity = col;
      if (!mapping.totalLAndE && (n.includes('liabequity') || n.includes('liabilitiesequity'))) mapping.totalLAndE = col;
    });
    return mapping;
  };

  // Handlers
  const handleLogin = async () => {
    setLoginError('');
    setIsLoading(true);
    
    if (!loginEmail || !loginPassword) {
      setLoginError('Please enter both email and password');
      setIsLoading(false);
      return;
    }
    
    try {
      const { user } = await authApi.login(loginEmail, loginPassword);
      
      // Normalize role and userType to lowercase for frontend compatibility
      const normalizedUser = {
        ...user,
        role: user.role.toLowerCase(),
        userType: user.userType?.toLowerCase()
      };
      
      setCurrentUser(normalizedUser);
      setIsLoggedIn(true);
      
      // Clear assessment data from localStorage for assessment users
      if (normalizedUser.userType === 'assessment') {
        localStorage.removeItem('fs_assessmentResponses');
        localStorage.removeItem('fs_assessmentNotes');
        setAssessmentResponses({});
        setAssessmentNotes({});
      }
      
      // Set appropriate default view based on user type
      if (normalizedUser.role === 'siteadmin') {
        setCurrentView('siteadmin');
      } else if (normalizedUser.role === 'consultant') {
        setCurrentView('admin');
      } else if (normalizedUser.userType === 'assessment') {
        setCurrentView('ma-welcome');
      } else {
        setCurrentView('upload');
      }
      
      if (normalizedUser.role !== 'consultant' && normalizedUser.role !== 'siteadmin') {
        setSelectedCompanyId(user.companyId || '');
      }
      
      // Load user's data after login
      if (normalizedUser.role === 'consultant' && user.consultantId) {
        const { companies: loadedCompanies } = await companiesApi.getAll(user.consultantId);
        setCompanies(loadedCompanies || []);
      }
      
      setLoginEmail('');
      setLoginPassword('');
      setLoginError('');
    } catch (error) {
      if (error instanceof ApiError) {
        setLoginError(error.message);
      } else {
        setLoginError('Login failed. Please try again.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleRegisterConsultant = async () => {
    setLoginError('');
    setIsLoading(true);
    
    if (!loginName || !loginEmail || !loginPassword) { 
      setLoginError('Please fill in all fields');
      setIsLoading(false);
      return; 
    }
    
    try {
      const { user } = await authApi.register({
        name: loginName,
        email: loginEmail,
        password: loginPassword,
        fullName: loginName
      });
      
      // Normalize role and userType to lowercase for frontend compatibility
      const normalizedUser = {
        ...user,
        role: user.role.toLowerCase(),
        userType: user.userType?.toLowerCase()
      };
      
      setCurrentUser(normalizedUser);
      setIsLoggedIn(true);
      setCurrentView('admin');
      setLoginName('');
      setLoginEmail('');
      setLoginPassword('');
      setIsRegistering(false);
      setLoginError('');
    } catch (error) {
      if (error instanceof ApiError) {
        if (error.status === 409) {
          setLoginError('This email is already registered. Please login instead.');
        } else {
          setLoginError(error.message);
        }
      } else {
        setLoginError('Registration failed. Please try again.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleLogout = () => {
    setCurrentUser(null);
    setIsLoggedIn(false);
    setCurrentView('login');
    setSelectedCompanyId('');
    setRawRows([]);
    setMapping({ date: '' });
    setFile(null);
    setColumns([]);
    localStorage.removeItem('fs_currentUser');
    localStorage.removeItem('fs_selectedCompanyId');
  };

  const addCompany = async () => {
    if (!newCompanyName || !currentUser) {
      alert('Please enter a company name');
      return;
    }
    
    if (!currentUser.consultantId) {
      alert('Error: No consultant ID found. Please log out and log back in.');
      console.error('Current user:', currentUser);
      return;
    }
    
    setIsLoading(true);
    try {
      console.log('Creating company:', { name: newCompanyName, consultantId: currentUser.consultantId });
      const { company } = await companiesApi.create({
        name: newCompanyName,
        consultantId: currentUser.consultantId
      });
      console.log('Company created:', company);
      setCompanies([...companies, company]);
      setNewCompanyName('');
      
      // Automatically select the newly created company
      setSelectedCompanyId(company.id);
      
      alert('Company created successfully!');
    } catch (error) {
      console.error('Error creating company:', error);
      alert(error instanceof ApiError ? error.message : 'Failed to create company');
    } finally {
      setIsLoading(false);
    }
  };

  const deleteCompany = async (companyId: string) => {
    if (!confirm('Delete this company and all its users?')) return;
    setIsLoading(true);
    try {
      await companiesApi.delete(companyId);
      setCompanies(companies.filter(c => c.id !== companyId));
      setUsers(users.filter(u => u.companyId !== companyId));
      setFinancialDataRecords(financialDataRecords.filter(r => r.companyId !== companyId));
      if (selectedCompanyId === companyId) setSelectedCompanyId('');
    } catch (error) {
      alert(error instanceof ApiError ? error.message : 'Failed to delete company');
    } finally {
      setIsLoading(false);
    }
  };

  // QuickBooks Functions
  const checkQBStatus = async (companyId: string) => {
    try {
      const response = await fetch(`/api/quickbooks/status?companyId=${companyId}`);
      const data = await response.json();
      
      if (data.connected) {
        setQbConnected(true);
        setQbStatus(data.status);
        // Only update qbLastSync if the timestamp actually changed (prevent infinite loop)
        const newSyncTime = data.lastSyncAt ? new Date(data.lastSyncAt).getTime() : null;
        const currentSyncTime = qbLastSync ? qbLastSync.getTime() : null;
        if (newSyncTime !== currentSyncTime) {
          setQbLastSync(data.lastSyncAt ? new Date(data.lastSyncAt) : null);
        }
        setQbError(data.errorMessage);
      } else {
        setQbConnected(false);
        setQbStatus('NOT_CONNECTED');
        if (qbLastSync !== null) {
          setQbLastSync(null);
        }
        setQbError(null);
      }
    } catch (error) {
      console.error('Failed to check QuickBooks status:', error);
      setQbError('Failed to check connection status');
    }
  };

  const connectQuickBooks = async () => {
    if (!selectedCompanyId) {
      alert('Please select a company first');
      return;
    }

    try {
      const response = await fetch(`/api/quickbooks/auth?companyId=${selectedCompanyId}`);
      const data = await response.json();
      
      if (data.authUri) {
        // Redirect to QuickBooks OAuth page
        window.location.href = data.authUri;
      } else {
        throw new Error('Failed to generate authorization URL');
      }
    } catch (error) {
      console.error('Failed to initiate QuickBooks connection:', error);
      alert('Failed to connect to QuickBooks. Please try again.');
    }
  };

  const syncQuickBooks = async () => {
    if (!selectedCompanyId || !currentUser) {
      alert('Please select a company first');
      return;
    }

    setQbSyncing(true);
    setQbError(null);

    try {
      const response = await fetch('/api/quickbooks/sync', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          companyId: selectedCompanyId,
          userId: currentUser.id
        }),
      });

      const data = await response.json();

      if (response.ok) {
        // Update sync timestamp - this will trigger the useEffect to reload data
        setQbLastSync(new Date());
        
        // Refresh QuickBooks status
        if (selectedCompanyId) {
          await checkQBStatus(selectedCompanyId);
        }
        
        alert(`QuickBooks data synced successfully! ${data.recordsImported || 0} months of financial data imported.`);
      } else {
        // Include detailed error message from API
        const errorMsg = data.details ? `${data.error}: ${data.details}` : (data.error || 'Sync failed');
        throw new Error(errorMsg);
      }
    } catch (error: any) {
      console.error('QuickBooks sync error:', error);
      const errorMessage = error.message || 'Failed to sync data';
      setQbError(errorMessage);
      alert('Failed to sync QuickBooks data:\n\n' + errorMessage);
    } finally {
      setQbSyncing(false);
    }
  };

  const disconnectQuickBooks = async () => {
    if (!selectedCompanyId) return;

    if (!confirm('Are you sure you want to disconnect QuickBooks? You can reconnect anytime.')) {
      return;
    }

    try {
      const response = await fetch('/api/quickbooks/disconnect', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ companyId: selectedCompanyId }),
      });

      const data = await response.json();

      if (response.ok) {
        setQbConnected(false);
        setQbStatus('NOT_CONNECTED');
        setQbLastSync(null);
        setQbError(null);
        alert('QuickBooks disconnected successfully');
      } else {
        throw new Error(data.error || 'Disconnect failed');
      }
    } catch (error: any) {
      console.error('QuickBooks disconnect error:', error);
      alert('Failed to disconnect QuickBooks: ' + (error.message || 'Unknown error'));
    }
  };

  const getCompanyUsers = (companyId: string, userType?: 'company' | 'assessment') => {
    if (userType) {
      return users.filter(u => u.companyId === companyId && u.role === 'user' && u.userType === userType);
    }
    return users.filter(u => u.companyId === companyId && u.role === 'user');
  };
  const getCurrentCompany = () => companies.find(c => c.id === selectedCompanyId);

  const handleSelectCompany = (companyId: string) => {
    const company = companies.find(c => c.id === companyId);
    if (!company) return;
    
    // Select the company
    setSelectedCompanyId(companyId);
    
    // Navigate to Consultant Dashboard to show company details
    setCurrentView('admin');
    
    // Automatically expand this company's section
    setExpandedCompanyInfoId(companyId);
  };

  const saveCompanyDetails = async () => {
    if (!companyIndustrySector) { 
      alert('Please select an industry sector'); 
      return; 
    }
    setIsLoading(true);
    try {
      const { company } = await companiesApi.update(editingCompanyId, {
        addressStreet: companyAddressStreet,
        addressCity: companyAddressCity,
        addressState: companyAddressState,
        addressZip: companyAddressZip,
        addressCountry: companyAddressCountry,
        industrySector: companyIndustrySector as number
      });
      setCompanies(companies.map(c => c.id === editingCompanyId ? { ...c, ...company } : c));
      setSelectedCompanyId(editingCompanyId);
      setShowCompanyDetailsModal(false);
      
      // Expand the company that was just saved
      setExpandedCompanyInfoId(editingCompanyId);
      
      setEditingCompanyId('');
      setCompanyAddressStreet('');
      setCompanyAddressCity('');
      setCompanyAddressState('');
      setCompanyAddressZip('');
      setCompanyAddressCountry('USA');
      setCompanyIndustrySector('');
      
      // Stay on Consultant Dashboard
      setCurrentView('admin');
    } catch (error) {
      alert(error instanceof ApiError ? error.message : 'Failed to update company');
    } finally {
      setIsLoading(false);
    }
  };

  const saveSubscriptionPricing = async () => {
    if (!selectedCompanyId) {
      alert('Please select a company first');
      return;
    }
    setIsLoading(true);
    try {
      const { company } = await companiesApi.update(selectedCompanyId, {
        subscriptionMonthlyPrice: subscriptionMonthlyPrice,
        subscriptionQuarterlyPrice: subscriptionQuarterlyPrice,
        subscriptionAnnualPrice: subscriptionAnnualPrice
      });
      // Update the companies list with the new pricing
      setCompanies(companies.map(c => c.id === selectedCompanyId ? { ...c, ...company } : c));
      alert('✅ Subscription pricing saved successfully!');
    } catch (error) {
      alert(error instanceof ApiError ? error.message : 'Failed to save subscription pricing');
    } finally {
      setIsLoading(false);
    }
  };

  const addUser = async (companyId: string, userType: 'company' | 'assessment' = 'company') => {
    // Get the appropriate state variables based on userType
    const name = userType === 'company' ? newCompanyUserName : newAssessmentUserName;
    const title = userType === 'company' ? newCompanyUserTitle : newAssessmentUserTitle;
    const email = userType === 'company' ? newCompanyUserEmail : newAssessmentUserEmail;
    const phone = userType === 'company' ? newCompanyUserPhone : undefined; // Phone only for company users
    const password = userType === 'company' ? newCompanyUserPassword : newAssessmentUserPassword;
    
    if (!name || !email || !password) { 
      alert('Please fill all required fields (Name, Email, Password)'); 
      return; 
    }
    
    setIsLoading(true);
    try {
      console.log('Creating user:', { name, title, email, phone, companyId, userType: userType.toUpperCase() });
      console.log('Current users in state:', users);
      console.log('Filtered company users:', users.filter(u => u.companyId === companyId && u.userType === 'company'));
      console.log('Filtered assessment users:', users.filter(u => u.companyId === companyId && u.userType === 'assessment'));
      
      const { user } = await usersApi.create({
        name,
        title,
        email,
        phone,
        password,
        companyId: companyId,
        userType: userType.toUpperCase() as 'COMPANY' | 'ASSESSMENT'
      });
      console.log('User created from API:', user);
      
      // Normalize role and userType to lowercase
      const normalizedUser = {
        ...user,
        role: user.role.toLowerCase(),
        userType: user.userType?.toLowerCase()
      };
      console.log('Normalized user:', normalizedUser);
      
      setUsers([...users, normalizedUser]);
      console.log('Users after adding:', [...users, normalizedUser]);
      
      // Clear the appropriate fields based on userType
      if (userType === 'company') {
        setNewCompanyUserName('');
        setNewCompanyUserTitle('');
        setNewCompanyUserEmail('');
        setNewCompanyUserPhone('');
        setNewCompanyUserPassword('');
      } else {
        setNewAssessmentUserName('');
        setNewAssessmentUserTitle('');
        setNewAssessmentUserEmail('');
        setNewAssessmentUserPassword('');
      }
      
      alert(`${userType === 'company' ? 'Company' : 'Assessment'} user created successfully!`);
    } catch (error) {
      console.error('Error creating user:', error);
      if (error instanceof ApiError) {
        if (error.message.includes('already registered')) {
          alert(`⚠️ Email already in use\n\n"${email}" is already registered in the system.\n\nPlease use a different email address.`);
        } else {
          alert(error.message);
        }
      } else {
        alert('Failed to add user');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const deleteUser = async (userId: string) => {
    if (!confirm('Delete this user?')) return;
    setIsLoading(true);
    try {
      await usersApi.delete(userId);
      setUsers(users.filter(u => u.id !== userId));
    } catch (error) {
      alert(error instanceof ApiError ? error.message : 'Failed to delete user');
    } finally {
      setIsLoading(false);
    }
  };

  // Consultant CRUD functions
  const addConsultant = async () => {
    if (!newConsultantType || !newConsultantFullName || !newConsultantAddress || !newConsultantEmail || !newConsultantPhone || !newConsultantPassword) {
      alert('Please fill all consultant fields');
      return;
    }
    setIsLoading(true);
    try {
      const { consultant } = await consultantsApi.create({
        fullName: newConsultantFullName,
        email: newConsultantEmail,
        password: newConsultantPassword,
        address: newConsultantAddress,
        phone: newConsultantPhone,
        type: newConsultantType
      });
      
      // Add to local state (will be refreshed on next load)
      const newConsultant: Consultant = {
        id: consultant.id,
        type: consultant.type || newConsultantType,
        fullName: consultant.fullName,
        address: consultant.address || newConsultantAddress,
        email: consultant.email,
        phone: consultant.phone || newConsultantPhone,
        password: '' // Don't store password in state
      };
      setConsultants([...consultants, newConsultant]);
      
      // Clear form
      setNewConsultantType('');
      setNewConsultantFullName('');
      setNewConsultantAddress('');
      setNewConsultantEmail('');
      setNewConsultantPhone('');
      setNewConsultantPassword('');
    } catch (error) {
      alert(error instanceof ApiError ? error.message : 'Failed to add consultant');
    } finally {
      setIsLoading(false);
    }
  };

  const deleteConsultant = async (consultantId: string) => {
    if (!confirm('Delete this consultant? This will also delete all their companies and users.')) return;
    setIsLoading(true);
    try {
      await consultantsApi.delete(consultantId);
      
      // Update local state
      setConsultants(consultants.filter(c => c.id !== consultantId));
      const consultantCompanies = companies.filter(c => c.consultantId === consultantId);
      const companyIds = consultantCompanies.map(c => c.id);
      setCompanies(companies.filter(c => c.consultantId !== consultantId));
      setUsers(users.filter(u => !companyIds.includes(u.companyId) && u.id !== consultantId));
      setFinancialDataRecords(financialDataRecords.filter(r => !companyIds.includes(r.companyId)));
      setAssessmentRecords(assessmentRecords.filter(r => !companyIds.includes(r.companyId)));
    } catch (error) {
      alert(error instanceof ApiError ? error.message : 'Failed to delete consultant');
    } finally {
      setIsLoading(false);
    }
  };

  const getConsultantCompanies = (consultantId: string) => {
    return companies.filter(c => c.consultantId === consultantId).sort((a, b) => a.name.localeCompare(b.name));
  };

  const handleFile = async (e: ChangeEvent<HTMLInputElement>) => {
    const f = e.target.files?.[0];
    if (!f) return;
    if (!selectedCompanyId) { alert('Please select a company first'); return; }

    setFile(f);
    setError(null);
    setIsFreshUpload(true);
    const ab = await f.arrayBuffer();
    const wb = XLSX.read(ab, { cellDates: false });
    
    // Use Sheet1 if available (transposed format), otherwise use first sheet
    const sheetName = wb.SheetNames.includes('Sheet1') ? 'Sheet1' : wb.SheetNames[0];
    
    const ws = wb.Sheets[sheetName];
    const json = XLSX.utils.sheet_to_json(ws, { header: 1, raw: true, defval: null });
    if (json.length < 2) { setError('File appears empty or invalid'); return; }
    
    // Check if this is a transposed format (field names in column A, dates in row 0)
    const firstCell = json[0] && json[0][0];
    const isTransposed = firstCell === null || firstCell === '' || (typeof firstCell === 'number' && firstCell > 40000); // Excel date serial numbers
    
    if (isTransposed) {
      // Transposed format: Row 0 has dates, Column A has field names
      console.log('Detected transposed format, converting...');
      const dateRow = json[0] as any[];
      const dates = dateRow.slice(1).filter(d => d !== null && d !== ''); // Skip first column
      
      // Convert Excel serial numbers to dates
      const parsedDates = dates.map(d => {
        if (typeof d === 'number') {
          const excelEpoch = new Date(1899, 11, 30);
          const date = new Date(excelEpoch.getTime() + d * 24 * 60 * 60 * 1000);
          return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;
        }
        return d;
      });
      
      // Build normal format: each row is a month
      const rows: any[] = [];
      for (let monthIdx = 0; monthIdx < parsedDates.length; monthIdx++) {
        const monthRow: any = { 'Date': parsedDates[monthIdx] };
        
        // For each field (row in original)
        for (let fieldIdx = 1; fieldIdx < json.length; fieldIdx++) {
          const fieldRow = json[fieldIdx] as any[];
          const fieldName = fieldRow[0];
          const fieldValue = fieldRow[monthIdx + 1]; // +1 because column 0 is field name
          if (fieldName) {
            monthRow[fieldName] = fieldValue;
          }
        }
        rows.push(monthRow);
      }
      
      const header = ['Date', ...json.slice(1).map(r => r[0]).filter(n => n)];
      setRawRows(rows);
      setColumns(header);
      setMapping(autoMapColumns(header));
    } else {
      // Normal format: Row 0 has headers, each row is a month
      const header = json[0] as any[];
      const dataRows = json.slice(1);
      const rows = dataRows.map(row => {
        const obj: any = {};
        header.forEach((h, i) => { obj[h] = (row as any[])[i] == null || (row as any[])[i] === '' ? null : (row as any[])[i]; });
        return obj;
      });
      setRawRows(rows);
      setColumns(header);
      setMapping(autoMapColumns(header));
    }
  };

  // Calculate monthly data
  const monthly = useMemo(() => {
    // If we have loaded monthly data from QuickBooks, use it directly
    if (loadedMonthlyData && loadedMonthlyData.length > 0) {
      return loadedMonthlyData;
    }
    
    // Otherwise, process from CSV rawRows
    if (!rawRows || rawRows.length === 0 || !mapping.date) return [];
    return rawRows.map((row, i) => ({
      month: row[mapping.date] || `Month ${i + 1}`,
      // Income Statement
      revenue: parseFloat(row[mapping.revenue!]) || 0,
      expense: parseFloat(row[mapping.expense!]) || 0,
      cogsPayroll: parseFloat(row[mapping.cogsPayroll!]) || 0,
      cogsOwnerPay: parseFloat(row[mapping.cogsOwnerPay!]) || 0,
      cogsContractors: parseFloat(row[mapping.cogsContractors!]) || 0,
      cogsMaterials: parseFloat(row[mapping.cogsMaterials!]) || 0,
      cogsCommissions: parseFloat(row[mapping.cogsCommissions!]) || 0,
      cogsOther: parseFloat(row[mapping.cogsOther!]) || 0,
      cogsTotal: parseFloat(row[mapping.cogsTotal!]) || 0,
      opexSalesMarketing: parseFloat(row[mapping.opexSalesMarketing!]) || 0,
      rentLease: parseFloat(row[mapping.rentLease!]) || 0,
      utilities: parseFloat(row[mapping.utilities!]) || 0,
      equipment: parseFloat(row[mapping.equipment!]) || 0,
      travel: parseFloat(row[mapping.travel!]) || 0,
      professionalServices: parseFloat(row[mapping.professionalServices!]) || 0,
      insurance: parseFloat(row[mapping.insurance!]) || 0,
      opexOther: parseFloat(row[mapping.opexOther!]) || 0,
      opexPayroll: parseFloat(row[mapping.opexPayroll!]) || 0,
      ownersBasePay: parseFloat(row[mapping.ownersBasePay!]) || 0,
      ownersRetirement: parseFloat(row[mapping.ownersRetirement!]) || 0,
      contractorsDistribution: parseFloat(row[mapping.contractorsDistribution!]) || 0,
      interestExpense: parseFloat(row[mapping.interestExpense!]) || 0,
      depreciationExpense: parseFloat(row[mapping.depreciationExpense!]) || 0,
      operatingExpenseTotal: parseFloat(row[mapping.operatingExpenseTotal!]) || 0,
      nonOperatingIncome: parseFloat(row[mapping.nonOperatingIncome!]) || 0,
      extraordinaryItems: parseFloat(row[mapping.extraordinaryItems!]) || 0,
      netProfit: parseFloat(row[mapping.netProfit!]) || 0,
      // Balance Sheet - Assets (reusing from above if already defined)
      totalAssets: parseFloat(row[mapping.totalAssets!]) || 0,
      totalLiab: parseFloat(row[mapping.totalLiab!]) || 0,
      cash: parseFloat(row[mapping.cash!]) || 0,
      ar: parseFloat(row[mapping.ar!]) || 0,
      inventory: parseFloat(row[mapping.inventory!]) || 0,
      otherCA: parseFloat(row[mapping.otherCA!]) || 0,
      tca: parseFloat(row[mapping.tca!]) || 0,
      fixedAssets: parseFloat(row[mapping.fixedAssets!]) || 0,
      otherAssets: parseFloat(row[mapping.otherAssets!]) || 0,
      ap: parseFloat(row[mapping.ap!]) || 0,
      otherCL: parseFloat(row[mapping.otherCL!]) || 0,
      tcl: parseFloat(row[mapping.tcl!]) || 0,
      ltd: parseFloat(row[mapping.ltd!]) || 0,
      totalEquity: parseFloat(row[mapping.totalEquity!]) || 0,
      totalLAndE: parseFloat(row[mapping.totalLAndE!]) || 0
    }));
  }, [rawRows, mapping, loadedMonthlyData]);

  const ltmRev = monthly.length >= 12 ? monthly.slice(-12).reduce((sum, m) => sum + m.revenue, 0) : 0;
  const ltmExp = monthly.length >= 12 ? monthly.slice(-12).reduce((sum, m) => sum + m.expense, 0) : 0;
  
  const growth_24mo = monthly.length >= 24 ? ((ltmRev - monthly.slice(-24, -12).reduce((sum, m) => sum + m.revenue, 0)) / monthly.slice(-24, -12).reduce((sum, m) => sum + m.revenue, 0)) * 100 : 0;
  const growth_6mo = monthly.length >= 12 ? ((monthly.slice(-6).reduce((sum, m) => sum + m.revenue, 0) - monthly.slice(-12, -6).reduce((sum, m) => sum + m.revenue, 0)) / monthly.slice(-12, -6).reduce((sum, m) => sum + m.revenue, 0)) * 100 : 0;
  const expGrowth_24mo = monthly.length >= 24 ? ((ltmExp - monthly.slice(-24, -12).reduce((sum, m) => sum + m.expense, 0)) / monthly.slice(-24, -12).reduce((sum, m) => sum + m.expense, 0)) * 100 : 0;
  
  let baseRGS = 10;
  if (growth_24mo >= 25) baseRGS = 100;
  else if (growth_24mo >= 15) baseRGS = 80;
  else if (growth_24mo >= 5) baseRGS = 60;
  else if (growth_24mo >= 0) baseRGS = 50;
  else if (growth_24mo >= -5) baseRGS = 40;
  else if (growth_24mo >= -15) baseRGS = 20;
  else baseRGS = 10;
  
  let adjustedRGS = baseRGS;
  if (growth_6mo >= 25) adjustedRGS = clamp(adjustedRGS + 50, 10, 100);
  else if (growth_6mo >= 15) adjustedRGS = clamp(((100 - adjustedRGS) * 0.8) + adjustedRGS, 10, 100);
  else if (growth_6mo >= 5) adjustedRGS = clamp(((100 - adjustedRGS) * 0.6) + adjustedRGS, 10, 100);
  else if (growth_6mo >= 0) adjustedRGS = clamp(((100 - adjustedRGS) * 0.4) + adjustedRGS, 10, 100);
  else if (growth_6mo >= -5) adjustedRGS = clamp(adjustedRGS * 0.9, 10, 100);
  else if (growth_6mo >= -15) adjustedRGS = clamp(adjustedRGS * 0.7, 10, 100);
  else if (growth_6mo >= -25) adjustedRGS = clamp(adjustedRGS * 0.5, 10, 100);
  else adjustedRGS = clamp(adjustedRGS * 0.3, 10, 100);
  
  const revExpSpread = growth_24mo - expGrowth_24mo;
  let expenseAdjustment = 0;
  if (revExpSpread > 10) expenseAdjustment = 30;
  else if (revExpSpread >= 0 && revExpSpread <= 10) expenseAdjustment = 10;
  else if (revExpSpread >= -5 && revExpSpread < 0) expenseAdjustment = -10;
  else if (revExpSpread < -5) expenseAdjustment = -30;
  
  const profitabilityScore = clamp(adjustedRGS + expenseAdjustment, 10, 100);
  
  const alr1 = monthly.length > 0 ? monthly[monthly.length - 1].totalAssets / monthly[monthly.length - 1].totalLiab : 0;
  const alr13 = monthly.length >= 13 ? monthly[monthly.length - 13].totalAssets / monthly[monthly.length - 13].totalLiab : 0;
  const alrGrowth = alr13 !== 0 ? ((alr1 - alr13) / alr13) * 100 : 0;
  
  let adsBase = 10;
  if (alr1 >= 1.5) adsBase = 100;
  else if (alr1 >= 1.2) adsBase = 90;
  else if (alr1 >= 0.8) adsBase = 70;
  else if (alr1 >= 0.6) adsBase = 50;
  else if (alr1 >= 0.4) adsBase = 30;
  else adsBase = 10;
  
  let adsAdj = 0;
  if (alrGrowth >= 50) adsAdj = 20;
  else if (alrGrowth >= 30) adsAdj = 15;
  else if (alrGrowth >= 15) adsAdj = 10;
  else if (alrGrowth >= 5) adsAdj = 5;
  else if (alrGrowth >= -5) adsAdj = 0;
  else if (alrGrowth >= -15) adsAdj = -5;
  else if (alrGrowth >= -30) adsAdj = -10;
  else if (alrGrowth >= -50) adsAdj = -15;
  else adsAdj = -20;
  
  const assetDevScore = clamp(adsBase + adsAdj, 10, 100);
  const finalScore = (profitabilityScore + assetDevScore) / 2;

  // Trend data
  const trendData = useMemo(() => {
    if (monthly.length < 13) return [];
    const trends: any[] = [];
    
    for (let i = 12; i < monthly.length; i++) {
      const window = monthly.slice(i - 11, i + 1);
      const ltmR = window.reduce((s, m) => s + m.revenue, 0);
      const ltmE = window.reduce((s, m) => s + m.expense, 0);
      const prev12R = i >= 23 ? monthly.slice(i - 23, i - 11).reduce((s, m) => s + m.revenue, 0) : 0;
      const prev12E = i >= 23 ? monthly.slice(i - 23, i - 11).reduce((s, m) => s + m.revenue, 0) : 0;
      const g24 = prev12R > 0 ? ((ltmR - prev12R) / prev12R) * 100 : 0;
      const gE24 = prev12E > 0 ? ((ltmE - prev12E) / prev12E) * 100 : 0;
      const recent6R = window.slice(-6).reduce((s, m) => s + m.revenue, 0);
      const prior6R = window.slice(0, 6).reduce((s, m) => s + m.revenue, 0);
      const g6 = prior6R > 0 ? ((recent6R - prior6R) / prior6R) * 100 : 0;
      
      let bRGS = 10;
      if (g24 >= 25) bRGS = 100;
      else if (g24 >= 15) bRGS = 80;
      else if (g24 >= 5) bRGS = 60;
      else if (g24 >= 0) bRGS = 50;
      else if (g24 >= -5) bRGS = 40;
      else if (g24 >= -15) bRGS = 20;
      else bRGS = 10;
      
      let aRGS = bRGS;
      if (g6 >= 25) aRGS = clamp(aRGS + 50, 10, 100);
      else if (g6 >= 15) aRGS = clamp(((100 - aRGS) * 0.8) + aRGS, 10, 100);
      else if (g6 >= 5) aRGS = clamp(((100 - aRGS) * 0.6) + aRGS, 10, 100);
      else if (g6 >= 0) aRGS = clamp(((100 - aRGS) * 0.4) + aRGS, 10, 100);
      else if (g6 >= -5) aRGS = clamp(aRGS * 0.9, 10, 100);
      else if (g6 >= -15) aRGS = clamp(aRGS * 0.7, 10, 100);
      else if (g6 >= -25) aRGS = clamp(aRGS * 0.5, 10, 100);
      else aRGS = clamp(aRGS * 0.3, 10, 100);
      
      const spread = g24 - gE24;
      let eAdj = 0;
      if (spread > 10) eAdj = 30;
      else if (spread >= 0 && spread <= 10) eAdj = 10;
      else if (spread >= -5 && spread < 0) eAdj = -10;
      else if (spread < -5) eAdj = -30;
      
      const pScore = clamp(aRGS + eAdj, 10, 100);
      
      const alr1Val = monthly[i].totalAssets / monthly[i].totalLiab;
      const alr13Val = i >= 12 ? monthly[i - 12].totalAssets / monthly[i - 12].totalLiab : 0;
      const alrGrowthVal = alr13Val !== 0 ? ((alr1Val - alr13Val) / alr13Val) * 100 : 0;
      
      let adsB = 10;
      if (alr1Val >= 1.5) adsB = 100;
      else if (alr1Val >= 1.2) adsB = 90;
      else if (alr1Val >= 0.8) adsB = 70;
      else if (alr1Val >= 0.6) adsB = 50;
      else if (alr1Val >= 0.4) adsB = 30;
      else adsB = 10;
      
      let adsA = 0;
      if (alrGrowthVal >= 50) adsA = 20;
      else if (alrGrowthVal >= 30) adsA = 15;
      else if (alrGrowthVal >= 15) adsA = 10;
      else if (alrGrowthVal >= 5) adsA = 5;
      else if (alrGrowthVal >= -5) adsA = 0;
      else if (alrGrowthVal >= -15) adsA = -5;
      else if (alrGrowthVal >= -30) adsA = -10;
      else if (alrGrowthVal >= -50) adsA = -15;
      else adsA = -20;
      
      const aScore = clamp(adsB + adsA, 10, 100);
      const fScore = (pScore + aScore) / 2;
      
      const cur = monthly[i];
      const currentAssets = cur.cash + cur.ar + cur.inventory + cur.otherCA || cur.tca;
      const currentLiab = cur.ap + cur.otherCL || cur.tcl;
      const quickAssets = cur.cash + cur.ar;
      
      const currentRatio = currentLiab > 0 ? currentAssets / currentLiab : 0;
      const quickRatio = currentLiab > 0 ? quickAssets / currentLiab : 0;
      
      const ltmCOGS = window.reduce((s, m) => s + m.cogsTotal, 0);
      const ltmSales = ltmR;
      const avgInv = (cur.inventory + (i >= 12 ? monthly[i-12].inventory : cur.inventory)) / 2;
      const invTurnover = avgInv > 0 ? ltmCOGS / avgInv : 0;
      
      const avgAR = (cur.ar + (i >= 12 ? monthly[i-12].ar : cur.ar)) / 2;
      const arTurnover = avgAR > 0 ? ltmSales / avgAR : 0;
      
      const avgAP = (cur.ap + (i >= 12 ? monthly[i-12].ap : cur.ap)) / 2;
      const apTurnover = avgAP > 0 ? ltmCOGS / avgAP : 0;
      
      const daysInv = invTurnover > 0 ? 365 / invTurnover : 0;
      const daysAR = arTurnover > 0 ? 365 / arTurnover : 0;
      const daysAP = apTurnover > 0 ? 365 / apTurnover : 0;
      
      const workingCap = currentAssets - currentLiab;
      const salesWC = workingCap !== 0 ? ltmSales / workingCap : 0;
      
      const ltmInterest = ltmE * 0.05;
      const ltmEBIT = ltmR - ltmE;
      const interestCov = ltmInterest > 0 ? ltmEBIT / ltmInterest : 0;
      
      const ltmDebtSvc = cur.ltd * 0.1 + ltmInterest;
      const debtSvcCov = ltmDebtSvc > 0 ? ltmEBIT / ltmDebtSvc : 0;
      
      // Calculate Operating Cash Flow for Cash Flow to Debt ratio
      const ltmNetIncome = ltmR - ltmE;
      const ltmDepreciation = ltmE * 0.05; // Estimated depreciation
      const priorMonth = i >= 12 ? monthly[i - 12] : cur;
      const priorWorkingCap = (priorMonth.cash + priorMonth.ar + priorMonth.inventory + priorMonth.otherCA) - (priorMonth.ap + priorMonth.otherCL);
      const changeInWorkingCap = workingCap - priorWorkingCap;
      const ltmOperatingCF = ltmNetIncome + ltmDepreciation - changeInWorkingCap;
      
      // Total Debt = Total Liabilities (more conservative) or Long Term Debt + Current Liabilities
      const totalDebt = cur.totalLiab;
      const cfToDebt = totalDebt > 0 ? ltmOperatingCF / totalDebt : 0;
      
      const debtToNW = cur.totalEquity > 0 ? cur.totalLiab / cur.totalEquity : 0;
      const fixedToNW = cur.totalEquity > 0 ? cur.fixedAssets / cur.totalEquity : 0;
      const leverage = cur.totalEquity > 0 ? cur.totalAssets / cur.totalEquity : 0;
      
      const totalAssetTO = cur.totalAssets > 0 ? ltmSales / cur.totalAssets : 0;
      const roe = cur.totalEquity > 0 ? (ltmR - ltmE) / cur.totalEquity : 0;
      const roa = cur.totalAssets > 0 ? (ltmR - ltmE) / cur.totalAssets : 0;
      const ebitdaMargin = ltmR > 0 ? (ltmEBIT + ltmE * 0.05) / ltmR : 0;
      const ebitMargin = ltmR > 0 ? ltmEBIT / ltmR : 0;
      
      trends.push({
        month: cur.month,
        rgs: bRGS,
        rgsAdj: aRGS,
        expenseAdj: eAdj,
        profitabilityScore: pScore,
        alr1: alr1Val,
        alr13: alr13Val,
        alrGrowth: alrGrowthVal,
        adsScore: aScore,
        financialScore: fScore,
        currentRatio,
        quickRatio,
        invTurnover,
        arTurnover,
        apTurnover,
        daysInv,
        daysAR,
        daysAP,
        salesWC,
        interestCov,
        debtSvcCov,
        cfToDebt,
        debtToNW,
        fixedToNW,
        leverage,
        totalAssetTO,
        roe,
        roa,
        ebitdaMargin,
        ebitMargin
      });
    }
    
    return trends;
  }, [monthly]);

  // MD&A Analysis
  const mdaAnalysis = useMemo(() => {
    if (!trendData || trendData.length === 0) return { strengths: [], weaknesses: [], insights: [] };
    
    const last = trendData[trendData.length - 1];
    const strengths: string[] = [];
    const weaknesses: string[] = [];
    const insights: string[] = [];
    
    if (finalScore >= 70) strengths.push(`Strong overall financial score of ${finalScore.toFixed(1)}, indicating robust financial health.`);
    else if (finalScore < 50) weaknesses.push(`Financial score of ${finalScore.toFixed(1)} suggests significant areas for improvement.`);
    
    if (profitabilityScore >= 70) strengths.push(`Profitability score of ${profitabilityScore.toFixed(1)} demonstrates solid revenue growth and expense management.`);
    else if (profitabilityScore < 50) weaknesses.push(`Profitability score of ${profitabilityScore.toFixed(1)} indicates challenges in revenue growth or expense control.`);
    
    if (growth_24mo > 10) strengths.push(`24-month revenue growth of ${growth_24mo.toFixed(1)}% shows strong market expansion.`);
    else if (growth_24mo < 0) weaknesses.push(`Negative 24-month revenue growth of ${growth_24mo.toFixed(1)}% requires immediate strategic attention.`);
    
    if (expenseAdjustment > 0) strengths.push(`Expense management is outperforming revenue growth by ${revExpSpread.toFixed(1)}%, adding ${expenseAdjustment} points to profitability.`);
    else if (expenseAdjustment < 0) weaknesses.push(`Expenses are growing faster than revenue by ${Math.abs(revExpSpread).toFixed(1)}%, reducing profitability by ${Math.abs(expenseAdjustment)} points.`);
    
    if (assetDevScore >= 70) strengths.push(`Asset Development Score of ${assetDevScore.toFixed(1)} reflects a healthy asset-to-liability ratio and positive asset growth.`);
    else if (assetDevScore < 50) weaknesses.push(`Asset Development Score of ${assetDevScore.toFixed(1)} suggests concerning leverage and asset composition.`);
    
    if (last.currentRatio >= 1.5) strengths.push(`Current ratio of ${last.currentRatio.toFixed(1)} indicates strong short-term liquidity.`);
    else if (last.currentRatio < 1.0) weaknesses.push(`Current ratio of ${last.currentRatio.toFixed(1)} may indicate potential liquidity challenges.`);
    
    if (last.roe > 0.15) strengths.push(`Return on Equity of ${(last.roe * 100).toFixed(1)}% demonstrates efficient use of shareholder capital.`);
    else if (last.roe < 0) weaknesses.push(`Negative Return on Equity of ${(last.roe * 100).toFixed(1)}% indicates losses relative to equity.`);
    
    // KPI Analysis
    if (last.quickRatio >= 1.0) strengths.push(`Quick ratio of ${last.quickRatio.toFixed(1)} shows strong ability to meet short-term obligations without relying on inventory.`);
    else if (last.quickRatio < 0.5) weaknesses.push(`Quick ratio of ${last.quickRatio.toFixed(1)} suggests potential cash flow challenges.`);
    
    if (last.debtToNW < 1.0) strengths.push(`Debt-to-Net Worth ratio of ${last.debtToNW.toFixed(1)} indicates conservative leverage and strong equity position.`);
    else if (last.debtToNW > 2.0) weaknesses.push(`Debt-to-Net Worth ratio of ${last.debtToNW.toFixed(1)} suggests high leverage that may limit financial flexibility.`);
    
    if (last.interestCov > 3.0) strengths.push(`Interest coverage ratio of ${last.interestCov.toFixed(1)} demonstrates strong ability to service debt obligations.`);
    else if (last.interestCov < 1.5) weaknesses.push(`Interest coverage of ${last.interestCov.toFixed(1)} indicates potential difficulty meeting interest payments.`);
    
    // Projection Analysis - Calculate inline to avoid circular dependency
    if (monthly.length >= 24) {
      // Calculate simple revenue projection
      const last12Months = monthly.slice(-12);
      const prior12Months = monthly.slice(-24, -12);
      const recentRevGrowth = ((last12Months.reduce((s, m) => s + m.revenue, 0) - prior12Months.reduce((s, m) => s + m.revenue, 0)) / prior12Months.reduce((s, m) => s + m.revenue, 0)) * 100;
      
      if (recentRevGrowth > 10) insights.push(`Based on 12-month trends, revenue shows ${recentRevGrowth.toFixed(1)}% growth trajectory with strong expansion potential.`);
      else if (recentRevGrowth < -5) insights.push(`Revenue trends indicate ${Math.abs(recentRevGrowth).toFixed(1)}% decline trajectory - proactive measures recommended.`);
      
      // Projected annual revenue
      const avgMonthlyRev = last12Months.reduce((s, m) => s + m.revenue, 0) / 12;
      const projectedAnnualRev = avgMonthlyRev * 12;
      
      if (recentRevGrowth > 15) insights.push(`Strong growth trajectory projects annual revenue of approximately $${(projectedAnnualRev / 1000).toFixed(0)}K with continued momentum.`);
      else if (recentRevGrowth < 0) insights.push(`Declining revenue trend requires strategic intervention to stabilize and restore growth.`);
      
      // Equity trend analysis
      const currentEquity = monthly[monthly.length - 1].totalEquity;
      const priorEquity = monthly[monthly.length - 13] ? monthly[monthly.length - 13].totalEquity : currentEquity;
      const equityChange = ((currentEquity - priorEquity) / Math.abs(priorEquity)) * 100;
      
      if (equityChange > 10) insights.push(`Equity has strengthened by ${equityChange.toFixed(1)}% over the past year, improving financial stability.`);
      else if (equityChange < -10) weaknesses.push(`Equity has declined by ${Math.abs(equityChange).toFixed(1)}% - monitor profitability and cash management closely.`);
    }
    
    // Trend Analysis Insights
    if (monthly.length >= 24) {
      const recentRevTrend = trendData.slice(-6).map(t => t.rgs).reduce((a, b) => a + b, 0) / 6;
      const priorRevTrend = trendData.slice(-12, -6).map(t => t.rgs).reduce((a, b) => a + b, 0) / 6;
      
      if (recentRevTrend > priorRevTrend + 10) strengths.push(`Revenue growth momentum is accelerating in recent months, indicating improving market position.`);
      else if (recentRevTrend < priorRevTrend - 10) weaknesses.push(`Revenue growth momentum is decelerating - review sales strategies and market positioning.`);
    }
    
    // Working Capital Analysis
    const currentAssets = monthly[monthly.length - 1].cash + monthly[monthly.length - 1].ar + monthly[monthly.length - 1].inventory + monthly[monthly.length - 1].otherCA;
    const currentLiab = monthly[monthly.length - 1].ap + monthly[monthly.length - 1].otherCL;
    const workingCapital = currentAssets - currentLiab;
    const wcRatioMDA = currentLiab > 0 ? currentAssets / currentLiab : 0;
    
    if (workingCapital > 0 && wcRatioMDA >= 1.5) {
      strengths.push(`Positive working capital of $${(workingCapital / 1000).toFixed(1)}K with strong WC ratio of ${wcRatioMDA.toFixed(1)} supports operational flexibility.`);
    } else if (workingCapital < 0) {
      weaknesses.push(`Negative working capital of $${(Math.abs(workingCapital) / 1000).toFixed(1)}K indicates potential short-term funding challenges.`);
    } else if (wcRatioMDA < 1.0) {
      weaknesses.push(`Working capital ratio of ${wcRatioMDA.toFixed(1)} is below optimal levels - consider improving liquidity.`);
    }
    
    // Activity Ratios (Days metrics)
    if (last.daysAR > 0) {
      if (last.daysAR < 45) strengths.push(`Days' receivables of ${last.daysAR.toFixed(0)} days reflects efficient collection practices.`);
      else if (last.daysAR > 90) weaknesses.push(`Days' receivables of ${last.daysAR.toFixed(0)} days suggests slow collection - review credit policies and collection procedures.`);
    }
    
    if (last.daysInv > 0) {
      if (last.daysInv < 60) insights.push(`Inventory turnover of ${last.daysInv.toFixed(0)} days indicates efficient inventory management.`);
      else if (last.daysInv > 120) weaknesses.push(`Days' inventory of ${last.daysInv.toFixed(0)} days may indicate slow-moving stock - consider inventory optimization.`);
    }
    
    if (last.daysAP > 0) {
      if (last.daysAP > 45) insights.push(`Days' payables of ${last.daysAP.toFixed(0)} days provides beneficial supplier financing.`);
      else if (last.daysAP < 20) insights.push(`Days' payables of ${last.daysAP.toFixed(0)} days - consider extending payment terms to improve cash flow.`);
    }
    
    // Cash Conversion Cycle
    const cashConversionCycle = last.daysInv + last.daysAR - last.daysAP;
    if (cashConversionCycle < 30) strengths.push(`Cash conversion cycle of ${cashConversionCycle.toFixed(0)} days demonstrates excellent working capital efficiency.`);
    else if (cashConversionCycle > 90) weaknesses.push(`Cash conversion cycle of ${cashConversionCycle.toFixed(0)} days suggests opportunities to accelerate cash generation.`);
    
    // Asset Efficiency
    if (last.totalAssetTO > 1.5) strengths.push(`Total asset turnover of ${last.totalAssetTO.toFixed(1)} shows effective asset utilization in generating sales.`);
    else if (last.totalAssetTO < 0.5) weaknesses.push(`Total asset turnover of ${last.totalAssetTO.toFixed(1)} indicates underutilized assets - review asset productivity.`);
    
    // Profitability Margins
    if (last.ebitdaMargin > 0.15) strengths.push(`EBITDA margin of ${(last.ebitdaMargin * 100).toFixed(1)}% demonstrates strong operational profitability.`);
    else if (last.ebitdaMargin < 0.05) weaknesses.push(`EBITDA margin of ${(last.ebitdaMargin * 100).toFixed(1)}% requires operational cost optimization.`);
    
    // Cash Flow Analysis (estimated from financial data)
    if (monthly.length >= 13) {
      const currentCash = monthly[monthly.length - 1].cash;
      const priorYearCash = monthly[monthly.length - 13].cash;
      const cashChange = currentCash - priorYearCash;
      
      if (cashChange > ltmRev * 0.1) strengths.push(`Cash position improved by $${(cashChange / 1000).toFixed(1)}K over the past year, strengthening financial resilience.`);
      else if (cashChange < -ltmRev * 0.05) weaknesses.push(`Cash declined by $${(Math.abs(cashChange) / 1000).toFixed(1)}K - monitor cash flow and consider working capital improvements.`);
    }
    
    // Benchmark Comparison (if available)
    if (benchmarks && benchmarks.length > 0) {
      // Helper function to get benchmark value
      const getBenchmark = (metricName: string) => {
        const bm = benchmarks.find(b => b.metricName === metricName);
        return bm ? bm.fiveYearValue : null;
      };
      
      // Current Ratio Benchmark
      const currentRatioBM = getBenchmark('Current Ratio');
      if (currentRatioBM !== null && last.currentRatio) {
        if (last.currentRatio > currentRatioBM * 1.2) {
          strengths.push(`Current ratio of ${last.currentRatio.toFixed(1)} is ${((last.currentRatio / currentRatioBM - 1) * 100).toFixed(0)}% above industry average (${currentRatioBM.toFixed(1)}), demonstrating superior liquidity management.`);
        } else if (last.currentRatio < currentRatioBM * 0.8) {
          weaknesses.push(`Current ratio of ${last.currentRatio.toFixed(1)} is ${((1 - last.currentRatio / currentRatioBM) * 100).toFixed(0)}% below industry average (${currentRatioBM.toFixed(1)}), indicating potential liquidity concerns relative to peers.`);
        }
      }
      
      // Quick Ratio Benchmark
      const quickRatioBM = getBenchmark('Quick Ratio');
      if (quickRatioBM !== null && last.quickRatio) {
        if (last.quickRatio > quickRatioBM * 1.2) {
          strengths.push(`Quick ratio of ${last.quickRatio.toFixed(1)} significantly exceeds industry benchmark (${quickRatioBM.toFixed(1)}), highlighting exceptional short-term financial strength.`);
        } else if (last.quickRatio < quickRatioBM * 0.8) {
          weaknesses.push(`Quick ratio of ${last.quickRatio.toFixed(1)} lags industry average (${quickRatioBM.toFixed(1)}) by ${((1 - last.quickRatio / quickRatioBM) * 100).toFixed(0)}%, suggesting need for improved cash management.`);
        }
      }
      
      // Debt-to-Net Worth Benchmark
      const debtToNWBM = getBenchmark('Total Debt to Net Worth Ratio');
      if (debtToNWBM !== null && last.debtToNW) {
        if (last.debtToNW < debtToNWBM * 0.7) {
          strengths.push(`Debt-to-Net Worth of ${last.debtToNW.toFixed(1)} is well below industry average (${debtToNWBM.toFixed(1)}), indicating conservative leverage and strong balance sheet.`);
        } else if (last.debtToNW > debtToNWBM * 1.3) {
          weaknesses.push(`Debt-to-Net Worth of ${last.debtToNW.toFixed(1)} exceeds industry norm (${debtToNWBM.toFixed(1)}) by ${((last.debtToNW / debtToNWBM - 1) * 100).toFixed(0)}%, suggesting higher financial risk profile.`);
        }
      }
      
      // Gross Profit Margin Benchmark
      const grossProfitBM = getBenchmark('Gross Profit Margin %');
      if (grossProfitBM !== null && last.grossMargin) {
        if (last.grossMargin > grossProfitBM / 100 * 1.1) {
          strengths.push(`Gross profit margin of ${(last.grossMargin * 100).toFixed(1)}% outperforms industry average (${grossProfitBM.toFixed(1)}%), demonstrating strong pricing power and cost management.`);
        } else if (last.grossMargin < grossProfitBM / 100 * 0.9) {
          weaknesses.push(`Gross margin of ${(last.grossMargin * 100).toFixed(1)}% trails industry benchmark (${grossProfitBM.toFixed(1)}%), indicating potential pricing or cost structure challenges.`);
        }
      }
      
      // Return on Assets Benchmark
      const roaBM = getBenchmark('Return on Total Assets %');
      if (roaBM !== null && last.roa) {
        if (last.roa > roaBM / 100 * 1.2) {
          strengths.push(`Return on Assets of ${(last.roa * 100).toFixed(1)}% is ${(((last.roa * 100) / roaBM - 1) * 100).toFixed(0)}% above industry average (${roaBM.toFixed(1)}%), reflecting superior asset productivity.`);
        } else if (last.roa < roaBM / 100 * 0.8) {
          weaknesses.push(`ROA of ${(last.roa * 100).toFixed(1)}% is below industry standard (${roaBM.toFixed(1)}%), suggesting opportunities for improved asset utilization.`);
        }
      }
      
      // Return on Equity Benchmark
      const roeBM = getBenchmark('Return on Net Worth %');
      if (roeBM !== null && last.roe) {
        if (last.roe > roeBM / 100 * 1.2) {
          strengths.push(`Return on Equity of ${(last.roe * 100).toFixed(1)}% substantially exceeds industry benchmark (${roeBM.toFixed(1)}%), indicating exceptional returns for shareholders.`);
        } else if (last.roe < roeBM / 100 * 0.8) {
          weaknesses.push(`ROE of ${(last.roe * 100).toFixed(1)}% underperforms industry average (${roeBM.toFixed(1)}%), suggesting need for profitability improvement.`);
        }
      }
      
      // Days AR Benchmark
      const daysARBM = getBenchmark('Days\' Receivables');
      if (daysARBM !== null && last.daysAR > 0) {
        if (last.daysAR < daysARBM * 0.8) {
          strengths.push(`Days' receivables of ${last.daysAR.toFixed(0)} days is ${((1 - last.daysAR / daysARBM) * 100).toFixed(0)}% faster than industry average (${daysARBM.toFixed(0)} days), demonstrating superior collection efficiency.`);
        } else if (last.daysAR > daysARBM * 1.2) {
          weaknesses.push(`Collection period of ${last.daysAR.toFixed(0)} days exceeds industry norm (${daysARBM.toFixed(0)} days) by ${((last.daysAR / daysARBM - 1) * 100).toFixed(0)}%, indicating room for accounts receivable optimization.`);
        }
      }
      
      // Days Inventory Benchmark
      const daysInvBM = getBenchmark('Days\' Inventory');
      if (daysInvBM !== null && last.daysInv > 0) {
        if (last.daysInv < daysInvBM * 0.8) {
          insights.push(`Inventory turnover (${last.daysInv.toFixed(0)} days) is ${((1 - last.daysInv / daysInvBM) * 100).toFixed(0)}% faster than industry average (${daysInvBM.toFixed(0)} days), indicating lean inventory management.`);
        } else if (last.daysInv > daysInvBM * 1.2) {
          weaknesses.push(`Inventory holding period of ${last.daysInv.toFixed(0)} days is ${((last.daysInv / daysInvBM - 1) * 100).toFixed(0)}% longer than industry benchmark (${daysInvBM.toFixed(0)} days), suggesting potential obsolescence risk.`);
        }
      }
      
      // Days AP Benchmark
      const daysAPBM = getBenchmark('Days\' Payables');
      if (daysAPBM !== null && last.daysAP > 0) {
        if (last.daysAP > daysAPBM * 1.1) {
          insights.push(`Payment terms of ${last.daysAP.toFixed(0)} days exceed industry average (${daysAPBM.toFixed(0)} days), providing favorable cash flow timing and supplier financing.`);
        } else if (last.daysAP < daysAPBM * 0.8) {
          insights.push(`Payment period of ${last.daysAP.toFixed(0)} days is shorter than industry norm (${daysAPBM.toFixed(0)} days) - consider negotiating extended terms to improve cash flow.`);
        }
      }
      
      // Asset Turnover Benchmark
      const assetTOBM = getBenchmark('Total Asset Turnover');
      if (assetTOBM !== null && last.totalAssetTO) {
        if (last.totalAssetTO > assetTOBM * 1.2) {
          strengths.push(`Asset turnover of ${last.totalAssetTO.toFixed(1)} exceeds industry average (${assetTOBM.toFixed(1)}) by ${((last.totalAssetTO / assetTOBM - 1) * 100).toFixed(0)}%, demonstrating efficient capital deployment.`);
        } else if (last.totalAssetTO < assetTOBM * 0.8) {
          weaknesses.push(`Asset turnover of ${last.totalAssetTO.toFixed(1)} trails industry benchmark (${assetTOBM.toFixed(1)}), indicating potential for enhanced revenue generation from existing assets.`);
        }
      }
      
      insights.push(`Industry benchmark analysis shows ${strengths.filter(s => s.includes('industry')).length} areas where performance exceeds peer standards.`);
    }
    
    // Add strategic insights based on comprehensive data
    insights.push(`Monitor the trend in Financial Score over time to identify patterns and early warning signs of performance changes.`);
    insights.push(`Focus improvement initiatives on components with the lowest scores for maximum impact on overall financial health.`);
    
    if (growth_6mo < growth_24mo) {
      insights.push(`Recent 6-month growth (${growth_6mo.toFixed(1)}%) is slower than 24-month trend (${growth_24mo.toFixed(1)}%), suggesting momentum is decelerating - consider market expansion strategies.`);
    } else if (growth_6mo > growth_24mo) {
      insights.push(`Recent 6-month growth (${growth_6mo.toFixed(1)}%) exceeds 24-month trend (${growth_24mo.toFixed(1)}%), indicating accelerating momentum - capitalize on this growth trajectory.`);
    }
    
    // Valuation insights
    if (last.totalAssets > 0) {
      const assetMultiple = last.totalAssets > 0 ? ltmRev / last.totalAssets : 0;
      if (assetMultiple > 1.5) {
        insights.push(`Revenue-to-Assets ratio of ${assetMultiple.toFixed(1)}x indicates efficient capital utilization and strong operational leverage.`);
      } else if (assetMultiple < 0.8) {
        insights.push(`Revenue-to-Assets ratio of ${assetMultiple.toFixed(1)}x suggests opportunities to improve asset productivity through operational optimization.`);
      }
    }
    
    // Cash flow insights
    if (monthly.length >= 12) {
      const recentCashFlow = monthly.slice(-12).reduce((sum, m) => sum + (m.revenue - m.expense), 0);
      const cashFlowMargin = recentCashFlow / ltmRev;
      if (cashFlowMargin > 0.15) {
        strengths.push(`Operating cash flow margin of ${(cashFlowMargin * 100).toFixed(1)}% demonstrates strong cash generation capability and financial sustainability.`);
      } else if (cashFlowMargin < 0.05) {
        weaknesses.push(`Operating cash flow margin of ${(cashFlowMargin * 100).toFixed(1)}% indicates tight cash generation - focus on working capital optimization.`);
      }
    }
    
    return { strengths, weaknesses, insights };
  }, [trendData, finalScore, profitabilityScore, assetDevScore, growth_24mo, growth_6mo, expenseAdjustment, revExpSpread, ltmRev, ltmExp, monthly, benchmarks]);

  // Projections
  const projections = useMemo(() => {
    if (monthly.length < 24) return { mostLikely: [], bestCase: [], worstCase: [] };
    
    const last12 = monthly.slice(-12);
    const prev12 = monthly.slice(-24, -12);
    const avgRevGrowth = ((last12.reduce((s, m) => s + m.revenue, 0) - prev12.reduce((s, m) => s + m.revenue, 0)) / prev12.reduce((s, m) => s + m.revenue, 0)) / 12;
    const avgExpGrowth = ((last12.reduce((s, m) => s + m.expense, 0) - prev12.reduce((s, m) => s + m.expense, 0)) / prev12.reduce((s, m) => s + m.expense, 0)) / 12;
    const avgAssetGrowth = ((last12[last12.length - 1].totalAssets - prev12[prev12.length - 1].totalAssets) / prev12[prev12.length - 1].totalAssets) / 12;
    const avgLiabGrowth = ((last12[last12.length - 1].totalLiab - prev12[prev12.length - 1].totalLiab) / prev12[prev12.length - 1].totalLiab) / 12;
    
    const lastMonth = monthly[monthly.length - 1];
    const mostLikely: any[] = [];
    const bestCase: any[] = [];
    const worstCase: any[] = [];
    
    for (let i = 1; i <= 12; i++) {
      const monthName = `+${i}mo`;
      
      const mlRev = lastMonth.revenue * Math.pow(1 + avgRevGrowth, i);
      const mlExp = lastMonth.expense * Math.pow(1 + avgExpGrowth, i);
      const mlAssets = lastMonth.totalAssets * Math.pow(1 + avgAssetGrowth, i);
      const mlLiab = lastMonth.totalLiab * Math.pow(1 + avgLiabGrowth, i);
      const mlEquity = mlAssets - mlLiab;
      
      mostLikely.push({
        month: monthName,
        revenue: mlRev,
        expense: mlExp,
        netIncome: mlRev - mlExp,
        totalAssets: mlAssets,
        totalLiab: mlLiab,
        equity: mlEquity
      });
      
      const bcRev = lastMonth.revenue * Math.pow(1 + avgRevGrowth * bestCaseRevMultiplier, i);
      const bcExp = lastMonth.expense * Math.pow(1 + avgExpGrowth * bestCaseExpMultiplier, i);
      const bcAssets = lastMonth.totalAssets * Math.pow(1 + avgAssetGrowth * 1.2, i);
      const bcLiab = lastMonth.totalLiab * Math.pow(1 + avgLiabGrowth * 0.8, i);
      const bcEquity = bcAssets - bcLiab;
      
      bestCase.push({
        month: monthName,
        revenue: bcRev,
        expense: bcExp,
        netIncome: bcRev - bcExp,
        totalAssets: bcAssets,
        totalLiab: bcLiab,
        equity: bcEquity
      });
      
      const wcRev = lastMonth.revenue * Math.pow(1 + avgRevGrowth * worstCaseRevMultiplier, i);
      const wcExp = lastMonth.expense * Math.pow(1 + avgExpGrowth * worstCaseExpMultiplier, i);
      const wcAssets = lastMonth.totalAssets * Math.pow(1 + avgAssetGrowth * 0.8, i);
      const wcLiab = lastMonth.totalLiab * Math.pow(1 + avgLiabGrowth * 1.2, i);
      const wcEquity = wcAssets - wcLiab;
      
      worstCase.push({
        month: monthName,
        revenue: wcRev,
        expense: wcExp,
        netIncome: wcRev - wcExp,
        totalAssets: wcAssets,
        totalLiab: wcLiab,
        equity: wcEquity
      });
    }
    
    return { mostLikely, bestCase, worstCase };
  }, [monthly, bestCaseRevMultiplier, bestCaseExpMultiplier, worstCaseRevMultiplier, worstCaseExpMultiplier]);

  const renderColumnSelector = (label: string, mappingKey: keyof Mappings) => (
    <div style={{ marginBottom: '15px' }}>
      <label style={{ display: 'block', fontWeight: '500', marginBottom: '5px', color: '#475569' }}>{label}:</label>
      <select value={mapping[mappingKey] || ''} onChange={(e) => setMapping({ ...mapping, [mappingKey]: e.target.value })} style={{ width: '100%', padding: '10px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px', outline: 'none' }}>
        <option value="">-- Select --</option>
        {columns.map(col => <option key={col} value={col}>{col}</option>)}
      </select>
    </div>
  );

  const saveProjectionDefaults = () => {
    const defaults = {
      bestCaseRev: bestCaseRevMultiplier,
      bestCaseExp: bestCaseExpMultiplier,
      worstCaseRev: worstCaseRevMultiplier,
      worstCaseExp: worstCaseExpMultiplier
    };
    localStorage.setItem('fs_projectionDefaults', JSON.stringify(defaults));
    setDefaultBestCaseRevMult(bestCaseRevMultiplier);
    setDefaultBestCaseExpMult(bestCaseExpMultiplier);
    setDefaultWorstCaseRevMult(worstCaseRevMultiplier);
    setDefaultWorstCaseExpMult(worstCaseExpMultiplier);
    alert('Defaults saved successfully!');
    setShowDefaultSettings(false);
  };

  // LOGIN VIEW
  if (!isLoggedIn) {
    return (
      <div style={{ minHeight: '100vh', background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', padding: '40px 20px' }}>
        <div style={{ maxWidth: '480px', margin: '0 auto', background: 'white', borderRadius: '16px', boxShadow: '0 20px 60px rgba(0,0,0,0.3)', padding: '40px' }}>
          <div style={{ textAlign: 'center', marginBottom: '32px' }}>
            <div style={{ fontSize: '48px', fontWeight: '700', color: '#667eea', marginBottom: '16px', letterSpacing: '-1px' }}>
              Venturis<sup style={{ fontSize: '18px', fontWeight: '400' }}>TM</sup>
            </div>
            <h1 style={{ fontSize: '28px', fontWeight: '700', color: '#1e293b', marginBottom: '8px' }}>Business Evaluation Tool</h1>
            <p style={{ color: '#64748b', fontSize: '14px' }}>Professional financial analysis for consultants and businesses</p>
          </div>

          {loginError && (
            <div style={{ padding: '12px 16px', background: '#fee2e2', color: '#991b1b', borderRadius: '8px', marginBottom: '16px', fontSize: '14px', border: '1px solid #fecaca' }}>
              {loginError}
            </div>
          )}

          {showForgotPassword ? (
            <form autoComplete="off" onSubmit={(e) => e.preventDefault()}>
              <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '16px' }}>Reset Password</h2>
              <p style={{ fontSize: '14px', color: '#64748b', marginBottom: '24px' }}>Enter your email address and we'll send you instructions to reset your password.</p>
              
              {resetSuccess && (
                <div style={{ padding: '12px 16px', background: '#d1fae5', color: '#065f46', borderRadius: '8px', marginBottom: '16px', fontSize: '14px', border: '1px solid #6ee7b7' }}>
                  {resetSuccess}
                </div>
              )}
              
              <input 
                type="text" 
                name={`reset_email_${Date.now()}`}
                placeholder="Email Address" 
                value={resetEmail} 
                onChange={(e) => { setResetEmail(e.target.value); setLoginError(''); }} 
                autoComplete="off"
                style={{ width: '100%', padding: '12px 16px', marginBottom: '24px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }} 
              />
              <button 
                onClick={async () => {
                  if (!resetEmail.trim()) {
                    setLoginError('Please enter your email address');
                    return;
                  }
                  setIsLoading(true);
                  setLoginError('');
                  setResetSuccess('');
                  try {
                    const response = await fetch('/api/auth/reset-password', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ email: resetEmail.toLowerCase().trim() })
                    });
                    const data = await response.json();
                    if (!response.ok) {
                      throw new Error(data.error || 'Failed to send reset email');
                    }
                    setResetSuccess('Password reset instructions sent! Check your email.');
                    setResetEmail('');
                  } catch (error) {
                    setLoginError(error instanceof Error ? error.message : 'Failed to send reset email');
                  } finally {
                    setIsLoading(false);
                  }
                }}
                disabled={isLoading}
                style={{ width: '100%', padding: '14px', background: isLoading ? '#94a3b8' : '#667eea', color: 'white', border: 'none', borderRadius: '8px', fontSize: '16px', fontWeight: '600', cursor: isLoading ? 'not-allowed' : 'pointer', marginBottom: '12px', opacity: isLoading ? 0.7 : 1 }}
              >
                {isLoading ? 'Sending...' : 'Send Reset Instructions'}
              </button>
              <button 
                type="button"
                onClick={() => { setShowForgotPassword(false); setLoginError(''); setResetSuccess(''); setResetEmail(''); }} 
                disabled={isLoading}
                style={{ width: '100%', padding: '14px', background: '#f1f5f9', color: '#475569', border: 'none', borderRadius: '8px', fontSize: '14px', fontWeight: '600', cursor: isLoading ? 'not-allowed' : 'pointer' }}
              >
                Back to Login
              </button>
            </form>
          ) : isRegistering ? (
            <form autoComplete="off" onSubmit={(e) => { e.preventDefault(); handleRegisterConsultant(); }}>
              <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '24px' }}>Register as Consultant</h2>
              <input 
                type="text" 
                name={`fullname_${Date.now()}`}
                placeholder="Full Name" 
                value={loginName} 
                onChange={(e) => setLoginName(e.target.value)} 
                autoComplete="off" 
                style={{ width: '100%', padding: '12px 16px', marginBottom: '16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }} 
              />
              <input 
                type="text" 
                name={`email_${Date.now()}`}
                placeholder="Email" 
                value={loginEmail} 
                onChange={(e) => setLoginEmail(e.target.value)} 
                autoComplete="off" 
                style={{ width: '100%', padding: '12px 16px', marginBottom: '16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }} 
              />
              
              {/* Password field with toggle */}
              <div style={{ position: 'relative', marginBottom: '24px' }}>
                <input 
                  type={showPassword ? "text" : "password"} 
                  name={`password_${Date.now()}`}
                  placeholder="Password" 
                  value={loginPassword} 
                  onChange={(e) => setLoginPassword(e.target.value)} 
                  autoComplete="new-password"
                  style={{ width: '100%', padding: '12px 40px 12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }} 
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  style={{ position: 'absolute', right: '12px', top: '50%', transform: 'translateY(-50%)', background: 'none', border: 'none', cursor: 'pointer', fontSize: '18px', color: '#64748b', padding: '4px' }}
                  title={showPassword ? "Hide password" : "Show password"}
                >
                  {showPassword ? '👁️' : '👁️‍🗨️'}
                </button>
              </div>
              
              <button type="submit" style={{ width: '100%', padding: '14px', background: '#667eea', color: 'white', border: 'none', borderRadius: '8px', fontSize: '16px', fontWeight: '600', cursor: 'pointer', marginBottom: '12px' }}>Register</button>
              <button type="button" onClick={() => { setIsRegistering(false); setLoginError(''); setShowPassword(false); }} style={{ width: '100%', padding: '14px', background: '#f1f5f9', color: '#475569', border: 'none', borderRadius: '8px', fontSize: '14px', fontWeight: '600', cursor: 'pointer' }}>Back to Login</button>
            </form>
          ) : (
            <form autoComplete="off" onSubmit={(e) => { e.preventDefault(); if (!isLoading) handleLogin(); }}>
              <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '24px' }}>Sign In</h2>
              <input 
                type="text" 
                name={`email_${Date.now()}`}
                placeholder="Email" 
                value={loginEmail} 
                onChange={(e) => { setLoginEmail(e.target.value); setLoginError(''); }} 
                autoComplete="off" 
                style={{ width: '100%', padding: '12px 16px', marginBottom: '16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }} 
              />
              
              {/* Password field with toggle */}
              <div style={{ position: 'relative', marginBottom: '12px' }}>
                <input 
                  type={showPassword ? "text" : "password"} 
                  name={`password_${Date.now()}`}
                  placeholder="Password" 
                  value={loginPassword} 
                  onChange={(e) => { setLoginPassword(e.target.value); setLoginError(''); }} 
                  autoComplete="new-password"
                  style={{ width: '100%', padding: '12px 40px 12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }} 
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  style={{ position: 'absolute', right: '12px', top: '50%', transform: 'translateY(-50%)', background: 'none', border: 'none', cursor: 'pointer', fontSize: '18px', color: '#64748b', padding: '4px' }}
                  title={showPassword ? "Hide password" : "Show password"}
                >
                  {showPassword ? '👁️' : '👁️‍🗨️'}
                </button>
              </div>
              
              {/* Forgot Password Link */}
              <div style={{ textAlign: 'right', marginBottom: '24px' }}>
                <button 
                  type="button"
                  onClick={() => { setShowForgotPassword(true); setLoginError(''); setShowPassword(false); }} 
                  style={{ background: 'none', border: 'none', color: '#667eea', fontSize: '13px', cursor: 'pointer', textDecoration: 'underline', padding: 0 }}
                >
                  Forgot Password?
                </button>
              </div>
              
              <button type="submit" disabled={isLoading} style={{ width: '100%', padding: '14px', background: isLoading ? '#94a3b8' : '#667eea', color: 'white', border: 'none', borderRadius: '8px', fontSize: '16px', fontWeight: '600', cursor: isLoading ? 'not-allowed' : 'pointer', marginBottom: '16px', opacity: isLoading ? 0.7 : 1 }}>
                {isLoading ? 'Signing In...' : 'Sign In'}
              </button>
              <button type="button" onClick={() => { setIsRegistering(true); setLoginError(''); setShowPassword(false); }} disabled={isLoading} style={{ width: '100%', padding: '14px', background: '#f1f5f9', color: '#475569', border: 'none', borderRadius: '8px', fontSize: '14px', fontWeight: '600', cursor: isLoading ? 'not-allowed' : 'pointer' }}>Register as Consultant</button>
            </form>
          )}
        </div>
      </div>
    );
  }

  // Main Logged-In View with Header
  const company = getCurrentCompany();
  const companyName = company ? company.name : '';

  console.log('🎨 RENDER:', { currentView, isLoggedIn, userType: currentUser?.userType, role: currentUser?.role });

  return (
    <div style={{ minHeight: '100vh', background: '#f8fafc', display: 'flex', flexDirection: 'column' }}>
      {/* Header - Different for Site Admin */}
      {currentUser?.role === 'siteadmin' ? (
        <header style={{ background: 'white', borderBottom: '2px solid #e2e8f0', padding: '16px 32px', display: 'flex', justifyContent: 'space-between', alignItems: 'center', boxShadow: '0 2px 8px rgba(0,0,0,0.05)', position: 'sticky', top: 0, zIndex: 100 }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '80px' }}>
            <div 
              style={{ fontSize: '28px', fontWeight: '700', color: '#4338ca', cursor: 'pointer', letterSpacing: '-0.5px' }} 
              onClick={() => setCurrentView('siteadmin')}
            >
              Venturis<sup style={{ fontSize: '12px', fontWeight: '400' }}>TM</sup>
            </div>
            <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b' }}>Site Administration</h2>
          </div>
          <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
            <span style={{ fontSize: '14px', color: '#64748b' }}>{currentUser?.name}</span>
            <button onClick={handleLogout} style={{ padding: '8px 16px', background: '#ef4444', color: 'white', border: 'none', borderRadius: '8px', fontSize: '14px', fontWeight: '600', cursor: 'pointer' }}>Logout</button>
          </div>
        </header>
      ) : (
        <>
        {/* Hide top navigation for assessment users */}
        {!(currentUser?.userType === 'assessment') && (
        <header style={{ background: 'white', borderBottom: '2px solid #e2e8f0', padding: '16px 32px', display: 'flex', justifyContent: 'space-between', alignItems: 'center', boxShadow: '0 2px 8px rgba(0,0,0,0.05)', position: 'sticky', top: 0, zIndex: 100 }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '80px' }}>
            <div 
              style={{ fontSize: '28px', fontWeight: '700', color: '#4338ca', cursor: 'pointer', letterSpacing: '-0.5px' }} 
              onClick={() => currentUser?.role === 'consultant' ? setCurrentView('admin') : setCurrentView('fs-score')}
            >
              Venturis<sup style={{ fontSize: '12px', fontWeight: '400' }}>TM</sup>
            </div>
            <nav style={{ display: 'flex', gap: '24px' }}>
              <button onClick={() => setCurrentView('mda')} style={{ background: 'none', border: 'none', fontSize: '16px', fontWeight: '600', color: currentView === 'mda' ? '#667eea' : '#64748b', cursor: 'pointer', padding: '8px 12px', borderBottom: currentView === 'mda' ? '3px solid #667eea' : '3px solid transparent' }}>MD&A</button>
              <button onClick={() => setCurrentView('kpis')} style={{ background: 'none', border: 'none', fontSize: '16px', fontWeight: '600', color: currentView === 'kpis' ? '#667eea' : '#64748b', cursor: 'pointer', padding: '8px 12px', borderBottom: currentView === 'kpis' ? '3px solid #667eea' : '3px solid transparent' }}>KPI Dashboard</button>
              <button onClick={() => setCurrentView('trend-analysis')} style={{ background: 'none', border: 'none', fontSize: '16px', fontWeight: '600', color: currentView === 'trend-analysis' ? '#667eea' : '#64748b', cursor: 'pointer', padding: '8px 12px', borderBottom: currentView === 'trend-analysis' ? '3px solid #667eea' : '3px solid transparent' }}>Trend Analysis</button>
              <button onClick={() => setCurrentView('projections')} style={{ background: 'none', border: 'none', fontSize: '16px', fontWeight: '600', color: currentView === 'projections' ? '#667eea' : '#64748b', cursor: 'pointer', padding: '8px 12px', borderBottom: currentView === 'projections' ? '3px solid #667eea' : '3px solid transparent' }}>Projections</button>
              <button onClick={() => setCurrentView('working-capital')} style={{ background: 'none', border: 'none', fontSize: '16px', fontWeight: '600', color: currentView === 'working-capital' ? '#667eea' : '#64748b', cursor: 'pointer', padding: '8px 12px', borderBottom: currentView === 'working-capital' ? '3px solid #667eea' : '3px solid transparent' }}>Working Capital</button>
              <button onClick={() => setCurrentView('valuation')} style={{ background: 'none', border: 'none', fontSize: '16px', fontWeight: '600', color: currentView === 'valuation' ? '#667eea' : '#64748b', cursor: 'pointer', padding: '8px 12px', borderBottom: currentView === 'valuation' ? '3px solid #667eea' : '3px solid transparent' }}>Valuation</button>
              <button onClick={() => setCurrentView('cash-flow')} style={{ background: 'none', border: 'none', fontSize: '16px', fontWeight: '600', color: currentView === 'cash-flow' ? '#667eea' : '#64748b', cursor: 'pointer', padding: '8px 12px', borderBottom: currentView === 'cash-flow' ? '3px solid #667eea' : '3px solid transparent' }}>Cash Flow</button>
              <button onClick={() => setCurrentView('financial-statements')} style={{ background: 'none', border: 'none', fontSize: '16px', fontWeight: '600', color: currentView === 'financial-statements' ? '#667eea' : '#64748b', cursor: 'pointer', padding: '8px 12px', borderBottom: currentView === 'financial-statements' ? '3px solid #667eea' : '3px solid transparent' }}>Financial Statements</button>
            </nav>
          </div>
        </header>
        )}
        
        {/* Simple header for assessment users */}
        {currentUser?.userType === 'assessment' && (
        <header style={{ background: 'white', borderBottom: '2px solid #e2e8f0', padding: '16px 32px', display: 'flex', justifyContent: 'space-between', alignItems: 'center', boxShadow: '0 2px 8px rgba(0,0,0,0.05)', position: 'sticky', top: 0, zIndex: 100 }}>
          <div style={{ fontSize: '28px', fontWeight: '700', color: '#4338ca', letterSpacing: '-0.5px' }}>
            Venturis<sup style={{ fontSize: '12px', fontWeight: '400' }}>TM</sup> - Management Assessment
          </div>
          <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
            <span style={{ fontSize: '14px', color: '#64748b' }}>{currentUser?.name}</span>
            <button onClick={handleLogout} style={{ padding: '8px 16px', background: '#ef4444', color: 'white', border: 'none', borderRadius: '8px', fontSize: '14px', fontWeight: '600', cursor: 'pointer' }}>Logout</button>
          </div>
        </header>
        )}
        </>
      )}

      {/* Main Content Area with Sidebar */}
      <div style={{ display: 'flex', flex: 1, overflow: 'hidden' }}>
        {/* Left Navigation Sidebar - Not for Site Admin */}
        {currentUser?.role !== 'siteadmin' && !(currentUser?.userType === 'assessment') && (
        <aside style={{ 
          width: '280px', 
          background: 'white', 
          borderRight: '2px solid #e2e8f0', 
          padding: '24px 0',
          overflowY: 'auto',
          flexShrink: 0,
          boxShadow: '2px 0 8px rgba(0,0,0,0.03)',
          display: 'flex',
          flexDirection: 'column'
        }}>
          {/* User Info and Logout at Top */}
          <div style={{ padding: '0 24px 24px', borderBottom: '2px solid #e2e8f0' }}>
            {companyName && (
              <div style={{ marginBottom: '12px', padding: '12px', background: '#f0f9ff', borderRadius: '8px', border: '1px solid #bae6fd' }}>
                <div style={{ fontSize: '11px', fontWeight: '600', color: '#0c4a6e', marginBottom: '4px', textTransform: 'uppercase', letterSpacing: '0.5px' }}>Active Company</div>
                <div style={{ fontSize: '14px', fontWeight: '600', color: '#1e40af' }}>{companyName}</div>
              </div>
            )}
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', gap: '12px' }}>
              <div style={{ flex: 1 }}>
                <div style={{ fontSize: '11px', fontWeight: '600', color: '#64748b', marginBottom: '4px', textTransform: 'uppercase', letterSpacing: '0.5px' }}>Logged In As</div>
                <div style={{ fontSize: '14px', fontWeight: '600', color: '#475569' }}>{currentUser?.name}</div>
                <div style={{ fontSize: '12px', color: '#94a3b8' }}>{currentUser?.email}</div>
              </div>
              <button 
                onClick={handleLogout} 
                style={{ 
                  padding: '8px 16px', 
                  background: '#ef4444', 
                  color: 'white', 
                  border: 'none', 
                  borderRadius: '6px', 
                  fontSize: '13px', 
                  fontWeight: '600', 
                  cursor: 'pointer',
                  transition: 'background 0.2s',
                  whiteSpace: 'nowrap'
                }}
                onMouseEnter={(e) => e.currentTarget.style.background = '#dc2626'}
                onMouseLeave={(e) => e.currentTarget.style.background = '#ef4444'}
              >
                Logout
              </button>
            </div>
          </div>
          
          <nav style={{ flex: 1, display: 'flex', flexDirection: 'column', paddingTop: '24px' }}>
            {/* Financial Score Section */}
            <div style={{ marginBottom: '24px' }}>
              <h3 
                onClick={() => setIsFinancialScoreExpanded(!isFinancialScoreExpanded)}
                style={{ 
                  fontSize: '14px', 
                  fontWeight: '700', 
                  color: '#1e293b',
                  textTransform: 'uppercase', 
                  letterSpacing: '0.5px',
                  padding: '8px 24px',
                  marginBottom: '8px',
                  cursor: 'pointer',
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center',
                  transition: 'color 0.2s'
                }}
                onMouseEnter={(e) => e.currentTarget.style.color = '#667eea'}
                onMouseLeave={(e) => e.currentTarget.style.color = '#1e293b'}
              >
                <span>Financial Score</span>
                <span style={{ fontSize: '12px', color: '#667eea' }}>{isFinancialScoreExpanded ? '-' : '+'}</span>
              </h3>
              {isFinancialScoreExpanded && (
                <div style={{ paddingLeft: '28px' }}>
                  <div
                    onClick={() => setCurrentView('fs-intro')}
                    style={{
                      fontSize: '14px',
                      color: currentView === 'fs-intro' ? '#667eea' : '#475569',
                      padding: '8px 12px',
                      cursor: 'pointer',
                      borderRadius: '6px',
                      marginBottom: '4px',
                      background: currentView === 'fs-intro' ? '#ede9fe' : 'transparent',
                      fontWeight: currentView === 'fs-intro' ? '600' : '400',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      if (currentView !== 'fs-intro') {
                        e.currentTarget.style.background = '#f8fafc';
                        e.currentTarget.style.color = '#667eea';
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (currentView !== 'fs-intro') {
                        e.currentTarget.style.background = 'transparent';
                        e.currentTarget.style.color = '#475569';
                      }
                    }}
                  >
                    {currentView === 'fs-intro' && '• '}Introduction
                  </div>
                  <div
                    onClick={() => setCurrentView('fs-score')}
                    style={{
                      fontSize: '14px',
                      color: currentView === 'fs-score' ? '#667eea' : '#475569',
                      padding: '8px 12px',
                      cursor: 'pointer',
                      borderRadius: '6px',
                      marginBottom: '4px',
                      background: currentView === 'fs-score' ? '#ede9fe' : 'transparent',
                      fontWeight: currentView === 'fs-score' ? '600' : '400',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      if (currentView !== 'fs-score') {
                        e.currentTarget.style.background = '#f8fafc';
                        e.currentTarget.style.color = '#667eea';
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (currentView !== 'fs-score') {
                        e.currentTarget.style.background = 'transparent';
                        e.currentTarget.style.color = '#475569';
                      }
                    }}
                  >
                    {currentView === 'fs-score' && '• '}Financial Score
                  </div>
                </div>
              )}
            </div>

            {/* Management Assessment Section - For Assessment Users and Consultants */}
            {((currentUser?.role === 'user' && currentUser?.userType === 'assessment') || currentUser?.role === 'consultant') && (
            <div style={{ marginBottom: '24px' }}>
              <h3 
                onClick={() => setIsManagementAssessmentExpanded(!isManagementAssessmentExpanded)}
                style={{ 
                  fontSize: '14px', 
                  fontWeight: '700', 
                  color: '#1e293b',
                  textTransform: 'uppercase', 
                  letterSpacing: '0.5px',
                  padding: '8px 24px',
                  marginBottom: '8px',
                  cursor: 'pointer',
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center',
                  transition: 'color 0.2s'
                }}
                onMouseEnter={(e) => e.currentTarget.style.color = '#667eea'}
                onMouseLeave={(e) => e.currentTarget.style.color = '#1e293b'}
              >
                <span>Management Assessment</span>
                <span style={{ fontSize: '12px', color: '#667eea' }}>{isManagementAssessmentExpanded ? '-' : '+'}</span>
              </h3>
              {isManagementAssessmentExpanded && (
                <div style={{ paddingLeft: '28px' }}>
                <div
                  onClick={() => setCurrentView('ma-welcome')}
                  style={{
                    fontSize: '14px',
                    color: currentView === 'ma-welcome' ? '#667eea' : '#475569',
                    padding: '8px 12px',
                    cursor: 'pointer',
                    borderRadius: '6px',
                    marginBottom: '4px',
                    background: currentView === 'ma-welcome' ? '#ede9fe' : 'transparent',
                    fontWeight: currentView === 'ma-welcome' ? '600' : '400',
                    transition: 'all 0.2s'
                  }}
                  onMouseEnter={(e) => {
                    if (currentView !== 'ma-welcome') {
                      e.currentTarget.style.background = '#f8fafc';
                      e.currentTarget.style.color = '#667eea';
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (currentView !== 'ma-welcome') {
                      e.currentTarget.style.background = 'transparent';
                      e.currentTarget.style.color = '#475569';
                    }
                  }}
                >
                  {currentView === 'ma-welcome' && '• '}Welcome
                </div>
                <div
                  onClick={() => setCurrentView('ma-questionnaire')}
                  style={{
                    fontSize: '14px',
                    color: currentView === 'ma-questionnaire' ? '#667eea' : '#475569',
                    padding: '8px 12px',
                    cursor: 'pointer',
                    borderRadius: '6px',
                    marginBottom: '4px',
                    background: currentView === 'ma-questionnaire' ? '#ede9fe' : 'transparent',
                    fontWeight: currentView === 'ma-questionnaire' ? '600' : '400',
                    transition: 'all 0.2s'
                  }}
                  onMouseEnter={(e) => {
                    if (currentView !== 'ma-questionnaire') {
                      e.currentTarget.style.background = '#f8fafc';
                      e.currentTarget.style.color = '#667eea';
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (currentView !== 'ma-questionnaire') {
                      e.currentTarget.style.background = 'transparent';
                      e.currentTarget.style.color = '#475569';
                    }
                  }}
                >
                  {currentView === 'ma-questionnaire' && '• '}Questionnaire
                </div>
                <div
                  onClick={() => setCurrentView('ma-your-results')}
                  style={{
                    fontSize: '14px',
                    color: currentView === 'ma-your-results' ? '#667eea' : '#475569',
                    padding: '8px 12px',
                    cursor: 'pointer',
                    borderRadius: '6px',
                    marginBottom: '4px',
                    background: currentView === 'ma-your-results' ? '#ede9fe' : 'transparent',
                    fontWeight: currentView === 'ma-your-results' ? '600' : '400',
                    transition: 'all 0.2s'
                  }}
                  onMouseEnter={(e) => {
                    if (currentView !== 'ma-your-results') {
                      e.currentTarget.style.background = '#f8fafc';
                      e.currentTarget.style.color = '#667eea';
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (currentView !== 'ma-your-results') {
                      e.currentTarget.style.background = 'transparent';
                      e.currentTarget.style.color = '#475569';
                    }
                  }}
                >
                  {currentView === 'ma-your-results' && '• '}{currentUser?.role === 'consultant' ? 'Results' : 'Your Results'}
                </div>
                <div
                  onClick={() => setCurrentView('ma-scores-summary')}
                  style={{
                    fontSize: '14px',
                    color: currentView === 'ma-scores-summary' ? '#667eea' : '#475569',
                    padding: '8px 12px',
                    cursor: 'pointer',
                    borderRadius: '6px',
                    marginBottom: '4px',
                    background: currentView === 'ma-scores-summary' ? '#ede9fe' : 'transparent',
                    fontWeight: currentView === 'ma-scores-summary' ? '600' : '400',
                    transition: 'all 0.2s'
                  }}
                  onMouseEnter={(e) => {
                    if (currentView !== 'ma-scores-summary') {
                      e.currentTarget.style.background = '#f8fafc';
                      e.currentTarget.style.color = '#667eea';
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (currentView !== 'ma-scores-summary') {
                      e.currentTarget.style.background = 'transparent';
                      e.currentTarget.style.color = '#475569';
                    }
                  }}
                >
                  {currentView === 'ma-scores-summary' && '• '}Scores Summary
                </div>
                <div
                  onClick={() => setCurrentView('ma-scoring-guide')}
                  style={{
                    fontSize: '14px',
                    color: currentView === 'ma-scoring-guide' ? '#667eea' : '#475569',
                    padding: '8px 12px',
                    cursor: 'pointer',
                    borderRadius: '6px',
                    marginBottom: '4px',
                    background: currentView === 'ma-scoring-guide' ? '#ede9fe' : 'transparent',
                    fontWeight: currentView === 'ma-scoring-guide' ? '600' : '400',
                    transition: 'all 0.2s'
                  }}
                  onMouseEnter={(e) => {
                    if (currentView !== 'ma-scoring-guide') {
                      e.currentTarget.style.background = '#f8fafc';
                      e.currentTarget.style.color = '#667eea';
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (currentView !== 'ma-scoring-guide') {
                      e.currentTarget.style.background = 'transparent';
                      e.currentTarget.style.color = '#475569';
                    }
                  }}
                >
                  {currentView === 'ma-scoring-guide' && '• '}Scoring Guide
                </div>
                <div
                  onClick={() => setCurrentView('ma-charts')}
                  style={{
                    fontSize: '14px',
                    color: currentView === 'ma-charts' ? '#667eea' : '#475569',
                    padding: '8px 12px',
                    cursor: 'pointer',
                    borderRadius: '6px',
                    marginBottom: '4px',
                    background: currentView === 'ma-charts' ? '#ede9fe' : 'transparent',
                    fontWeight: currentView === 'ma-charts' ? '600' : '400',
                    transition: 'all 0.2s'
                  }}
                  onMouseEnter={(e) => {
                    if (currentView !== 'ma-charts') {
                      e.currentTarget.style.background = '#f8fafc';
                      e.currentTarget.style.color = '#667eea';
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (currentView !== 'ma-charts') {
                      e.currentTarget.style.background = 'transparent';
                      e.currentTarget.style.color = '#475569';
                    }
                  }}
                >
                  {currentView === 'ma-charts' && '• '}Charts
                </div>
              </div>
              )}
            </div>
            )}

            {/* Consultant Dashboard Section */}
            {currentUser?.role === 'consultant' && (
              <div style={{ marginBottom: '24px' }}>
                <h3 
                  onClick={() => setCurrentView('admin')}
                  style={{ 
                    fontSize: '14px', 
                    fontWeight: '700', 
                    color: currentView === 'admin' ? '#667eea' : '#1e293b',
                    textTransform: 'uppercase', 
                    letterSpacing: '0.5px',
                    padding: '8px 24px',
                    marginBottom: '8px',
                    cursor: 'pointer',
                    transition: 'color 0.2s',
                    borderLeft: currentView === 'admin' ? '4px solid #667eea' : '4px solid transparent'
                  }}
                  onMouseEnter={(e) => e.currentTarget.style.color = '#667eea'}
                  onMouseLeave={(e) => e.currentTarget.style.color = currentView === 'admin' ? '#667eea' : '#1e293b'}
                >
                  Consultant Dashboard
                </h3>
                <div style={{ paddingLeft: '28px' }}>
                  {/* List of Companies */}
                  {companies.filter(c => c.consultantId === currentUser.consultantId).length > 0 ? (
                    <div>
                      <div style={{ fontSize: '11px', fontWeight: '600', color: '#64748b', textTransform: 'uppercase', letterSpacing: '0.5px', marginBottom: '8px', padding: '4px 0' }}>
                        My Companies
                      </div>
                      {companies.filter(c => c.consultantId === currentUser.consultantId).map(comp => (
                        <div
                          key={comp.id}
                          onClick={() => handleSelectCompany(comp.id)}
                          style={{
                            fontSize: '14px',
                            color: selectedCompanyId === comp.id ? '#667eea' : '#475569',
                            padding: '8px 12px',
                            cursor: 'pointer',
                            borderRadius: '6px',
                            marginBottom: '4px',
                            background: selectedCompanyId === comp.id ? '#ede9fe' : 'transparent',
                            fontWeight: selectedCompanyId === comp.id ? '600' : '400',
                            transition: 'all 0.2s'
                          }}
                          onMouseEnter={(e) => {
                            if (selectedCompanyId !== comp.id) {
                              e.currentTarget.style.background = '#f8fafc';
                              e.currentTarget.style.color = '#667eea';
                            }
                          }}
                          onMouseLeave={(e) => {
                            if (selectedCompanyId !== comp.id) {
                              e.currentTarget.style.background = 'transparent';
                              e.currentTarget.style.color = '#475569';
                            }
                          }}
                        >
                          {selectedCompanyId === comp.id && '• '}{comp.name}
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div style={{ fontSize: '13px', color: '#94a3b8', padding: '8px 0', fontStyle: 'italic' }}>
                      No companies yet
                    </div>
                  )}
                  
                  {/* Add Company Button */}
                  <button
                    onClick={() => {
                      setCurrentView('admin');
                      setSelectedCompanyId('');
                      setAdminDashboardTab('company-management');
                    }}
                    style={{
                      marginTop: '12px',
                      width: '100%',
                      padding: '8px 12px',
                      background: '#10b981',
                      color: 'white',
                      border: 'none',
                      borderRadius: '6px',
                      fontSize: '13px',
                      fontWeight: '600',
                      cursor: 'pointer',
                      transition: 'all 0.2s',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      gap: '6px'
                    }}
                    onMouseEnter={(e) => e.currentTarget.style.background = '#059669'}
                    onMouseLeave={(e) => e.currentTarget.style.background = '#10b981'}
                  >
                    <span style={{ fontSize: '16px', fontWeight: '700' }}>+</span> Add Company
                  </button>
                </div>
              </div>
            )}
          </nav>
        </aside>
        )}

        {/* Assessment User Sidebar - Only Management Assessment */}
        {currentUser?.userType === 'assessment' && (
        <aside style={{ 
          width: '280px', 
          background: 'white', 
          borderRight: '2px solid #e2e8f0', 
          padding: '24px 0',
          display: 'flex',
          flexDirection: 'column'
        }}>
          <div style={{ padding: '0 24px', marginBottom: '24px' }}>
            <h2 style={{ fontSize: '16px', fontWeight: '700', color: '#1e293b', marginBottom: '8px' }}>Navigation</h2>
            <p style={{ fontSize: '12px', color: '#64748b' }}>Management Assessment</p>
          </div>
          
          <nav style={{ flex: 1, display: 'flex', flexDirection: 'column', paddingTop: '24px' }}>
            {/* Management Assessment Section */}
            <div style={{ marginBottom: '24px' }}>
              <h3 
                onClick={() => setIsManagementAssessmentExpanded(!isManagementAssessmentExpanded)}
                style={{ 
                  fontSize: '14px', 
                  fontWeight: '700', 
                  color: '#1e293b',
                  textTransform: 'uppercase', 
                  letterSpacing: '0.5px',
                  padding: '8px 24px',
                  marginBottom: '8px',
                  cursor: 'pointer',
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center',
                  transition: 'color 0.2s'
                }}
                onMouseEnter={(e) => e.currentTarget.style.color = '#667eea'}
                onMouseLeave={(e) => e.currentTarget.style.color = '#1e293b'}
              >
                <span>Management Assessment</span>
                <span style={{ fontSize: '12px', color: '#667eea' }}>{isManagementAssessmentExpanded ? '-' : '+'}</span>
              </h3>
              {isManagementAssessmentExpanded && (
                <div style={{ paddingLeft: '28px' }}>
                  <div
                    onClick={() => handleViewChange('ma-welcome')}
                    style={{
                      fontSize: '14px',
                      color: currentView === 'ma-welcome' ? '#667eea' : '#475569',
                      padding: '8px 12px',
                      cursor: 'pointer',
                      borderRadius: '6px',
                      marginBottom: '4px',
                      background: currentView === 'ma-welcome' ? '#ede9fe' : 'transparent',
                      fontWeight: currentView === 'ma-welcome' ? '600' : '400',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      if (currentView !== 'ma-welcome') {
                        e.currentTarget.style.background = '#f8fafc';
                        e.currentTarget.style.color = '#667eea';
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (currentView !== 'ma-welcome') {
                        e.currentTarget.style.background = 'transparent';
                        e.currentTarget.style.color = '#475569';
                      }
                    }}
                  >
                    Welcome
                  </div>
                  <div
                    onClick={() => handleViewChange('ma-questionnaire')}
                    style={{
                      fontSize: '14px',
                      color: currentView === 'ma-questionnaire' ? '#667eea' : '#475569',
                      padding: '8px 12px',
                      cursor: 'pointer',
                      borderRadius: '6px',
                      marginBottom: '4px',
                      background: currentView === 'ma-questionnaire' ? '#ede9fe' : 'transparent',
                      fontWeight: currentView === 'ma-questionnaire' ? '600' : '400',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      if (currentView !== 'ma-questionnaire') {
                        e.currentTarget.style.background = '#f8fafc';
                        e.currentTarget.style.color = '#667eea';
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (currentView !== 'ma-questionnaire') {
                        e.currentTarget.style.background = 'transparent';
                        e.currentTarget.style.color = '#475569';
                      }
                    }}
                  >
                    Questionnaire
                  </div>
                  <div
                    onClick={() => handleViewChange('ma-your-results')}
                    style={{
                      fontSize: '14px',
                      color: currentView === 'ma-your-results' ? '#667eea' : '#475569',
                      padding: '8px 12px',
                      cursor: 'pointer',
                      borderRadius: '6px',
                      marginBottom: '4px',
                      background: currentView === 'ma-your-results' ? '#ede9fe' : 'transparent',
                      fontWeight: currentView === 'ma-your-results' ? '600' : '400',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      if (currentView !== 'ma-your-results') {
                        e.currentTarget.style.background = '#f8fafc';
                        e.currentTarget.style.color = '#667eea';
                      }
                    }}
                    onMouseLeave={(e) => {
                      if (currentView !== 'ma-your-results') {
                        e.currentTarget.style.background = 'transparent';
                        e.currentTarget.style.color = '#475569';
                      }
                    }}
                  >
                    Results
                  </div>
                </div>
              )}
            </div>
          </nav>
        </aside>
        )}

        {/* Main Content Area */}
        <main style={{ flex: 1, overflowY: 'auto', overflowX: 'hidden' }}>
          {/* Restrict access for assessment users - only show Management Assessment views */}
          {(!(currentUser?.userType === 'assessment') || currentView === 'ma-questionnaire' || currentView === 'ma-your-results' || currentView === 'ma-scores-summary' || currentView === 'ma-charts' || currentView === 'ma-scoring-guide') && (
          <>
          {/* Site Administration */}
          {currentView === 'siteadmin' && currentUser?.role === 'siteadmin' && (
            <div style={{ maxWidth: '1600px', margin: '0 auto', padding: '32px' }}>
              <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', marginBottom: '32px' }}>Site Administration</h1>
              
              {/* Add Consultant Form */}
              <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '20px' }}>Add New Consultant</h2>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '12px', marginBottom: '16px' }}>
                  <input
                    type="text"
                    placeholder="Consultant Type"
                    value={newConsultantType}
                    onChange={(e) => setNewConsultantType(e.target.value)}
                    style={{ padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                  />
                  <input
                    type="text"
                    placeholder="Full Name"
                    value={newConsultantFullName}
                    onChange={(e) => setNewConsultantFullName(e.target.value)}
                    style={{ padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                  />
                  <input
                    type="text"
                    placeholder="Address"
                    value={newConsultantAddress}
                    onChange={(e) => setNewConsultantAddress(e.target.value)}
                    style={{ padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                  />
                  <input
                    type="email"
                    placeholder="Email Address"
                    value={newConsultantEmail}
                    onChange={(e) => setNewConsultantEmail(e.target.value)}
                    style={{ padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                  />
                  <input
                    type="tel"
                    placeholder="Phone Number"
                    value={newConsultantPhone}
                    onChange={(e) => setNewConsultantPhone(e.target.value)}
                    style={{ padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                  />
                  <input
                    type="password"
                    placeholder="Password"
                    value={newConsultantPassword}
                    onChange={(e) => setNewConsultantPassword(e.target.value)}
                    style={{ padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                  />
                </div>
                <button
                  onClick={addConsultant}
                  style={{ padding: '12px 32px', background: '#10b981', color: 'white', border: 'none', borderRadius: '8px', fontSize: '14px', fontWeight: '600', cursor: 'pointer' }}
                >
                  Add Consultant
                </button>
              </div>

              {/* Consultants List */}
              <div style={{ fontSize: '20px', fontWeight: '600', color: '#64748b', marginBottom: '16px' }}>
                Total Consultants: {consultants.length}
              </div>

              {consultants.length === 0 ? (
                <div style={{ background: 'white', borderRadius: '12px', padding: '60px', textAlign: 'center', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <div style={{ fontSize: '48px', marginBottom: '16px' }}>👥</div>
                  <h3 style={{ fontSize: '20px', fontWeight: '600', color: '#64748b', marginBottom: '8px' }}>No Consultants</h3>
                  <p style={{ fontSize: '14px', color: '#94a3b8' }}>Add your first consultant to get started</p>
                </div>
              ) : (
                <div style={{ display: 'grid', gap: '24px' }}>
                  {consultants.map((consultant) => {
                    const consultantCompanies = getConsultantCompanies(consultant.id);
                    const expanded = selectedConsultantId === consultant.id;

                    return (
                      <div key={consultant.id} style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', border: '2px solid #e2e8f0' }}>
                        {/* Consultant Header */}
                        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start', marginBottom: '16px' }}>
                          <div style={{ flex: 1 }}>
                            <h3 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>{consultant.fullName}</h3>
                            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '8px', fontSize: '13px', color: '#64748b' }}>
                              <div><span style={{ fontWeight: '600' }}>Type:</span> {consultant.type}</div>
                              <div><span style={{ fontWeight: '600' }}>Email:</span> {consultant.email}</div>
                              <div><span style={{ fontWeight: '600' }}>Address:</span> {consultant.address}</div>
                              <div><span style={{ fontWeight: '600' }}>Phone:</span> {consultant.phone}</div>
                            </div>
                          </div>
                          <div style={{ display: 'flex', gap: '12px' }}>
                            <button
                              onClick={() => setSelectedConsultantId(expanded ? '' : consultant.id)}
                              style={{ padding: '8px 16px', background: '#667eea', color: 'white', border: 'none', borderRadius: '6px', fontSize: '13px', fontWeight: '600', cursor: 'pointer' }}
                            >
                              {expanded ? 'Collapse' : 'Expand'}
                            </button>
                            <button
                              onClick={() => deleteConsultant(consultant.id)}
                              style={{ padding: '8px 16px', background: '#ef4444', color: 'white', border: 'none', borderRadius: '6px', fontSize: '13px', fontWeight: '600', cursor: 'pointer' }}
                            >
                              Delete
                            </button>
                          </div>
                        </div>

                        {/* Companies and Users */}
                        {expanded && (
                          <div style={{ borderTop: '2px solid #e2e8f0', paddingTop: '16px' }}>
                            <h4 style={{ fontSize: '16px', fontWeight: '600', color: '#475569', marginBottom: '12px' }}>
                              Companies ({consultantCompanies.length})
                            </h4>
                            
                            {consultantCompanies.length === 0 ? (
                              <div style={{ background: '#f8fafc', borderRadius: '8px', padding: '32px', textAlign: 'center', border: '1px dashed #cbd5e1' }}>
                                <p style={{ fontSize: '14px', color: '#64748b' }}>No companies yet</p>
                              </div>
                            ) : (
                              <div style={{ display: 'grid', gap: '16px' }}>
                                {consultantCompanies.map((company) => {
                                  const companyUsers = getCompanyUsers(company.id);
                                  const isCompanyExpanded = expandedCompanyIds.includes(company.id);
                                  
                                  return (
                                    <div key={company.id} style={{ background: '#f8fafc', borderRadius: '8px', padding: '16px', border: '1px solid #e2e8f0' }}>
                                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: isCompanyExpanded ? '12px' : '0' }}>
                                        <div style={{ flex: 1 }}>
                                          <h5 style={{ fontSize: '16px', fontWeight: '600', color: '#1e293b', marginBottom: '4px' }}>{company.name}</h5>
                                          <div style={{ fontSize: '12px', color: '#64748b' }}>
                                            <span style={{ fontWeight: '600' }}>Location:</span> {company.location || 'Not set'} | 
                                            <span style={{ fontWeight: '600', marginLeft: '8px' }}>Industry:</span> {
                                              company.industrySector 
                                                ? `${company.industrySector} - ${INDUSTRY_SECTORS.find(s => s.id === company.industrySector)?.name || 'Unknown'}` 
                                                : 'Not set'
                                            }
                                          </div>
                                        </div>
                                        <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                                          <div style={{ fontSize: '13px', fontWeight: '600', color: '#667eea' }}>
                                            {companyUsers.length} user{companyUsers.length !== 1 ? 's' : ''}
                                          </div>
                                          {companyUsers.length > 0 && (
                                            <button
                                              onClick={() => {
                                                setExpandedCompanyIds(prev => 
                                                  prev.includes(company.id) 
                                                    ? prev.filter(id => id !== company.id)
                                                    : [...prev, company.id]
                                                );
                                              }}
                                              style={{ 
                                                padding: '6px 12px', 
                                                background: isCompanyExpanded ? '#f1f5f9' : '#667eea', 
                                                color: isCompanyExpanded ? '#475569' : 'white', 
                                                border: 'none', 
                                                borderRadius: '6px', 
                                                fontSize: '12px', 
                                                fontWeight: '600', 
                                                cursor: 'pointer' 
                                              }}
                                            >
                                              {isCompanyExpanded ? '▲ Hide' : '▼ Show'} Users
                                            </button>
                                          )}
                                        </div>
                                      </div>

                                      {/* Users */}
                                      {companyUsers.length > 0 && isCompanyExpanded && (
                                        <div style={{ borderTop: '1px solid #cbd5e1', paddingTop: '12px', marginTop: '12px' }}>
                                          <h6 style={{ fontSize: '13px', fontWeight: '600', color: '#64748b', marginBottom: '8px' }}>Users:</h6>
                                          <div style={{ display: 'grid', gap: '6px' }}>
                                            {companyUsers.map((user) => (
                                              <div key={user.id} style={{ background: 'white', borderRadius: '6px', padding: '8px 12px', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                                <div>
                                                  <div style={{ fontSize: '13px', fontWeight: '600', color: '#1e293b' }}>{user.name}</div>
                                                  <div style={{ fontSize: '11px', color: '#64748b' }}>{user.email}</div>
                                                </div>
                                              </div>
                                            ))}
                                          </div>
                                        </div>
                                      )}
                                    </div>
                                  );
                                })}
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
              )}
            </div>
          )}

          {/* Admin Dashboard */}
          {currentView === 'admin' && currentUser?.role === 'consultant' && (
        <div style={{ maxWidth: '1400px', margin: '0 auto', padding: '32px' }}>
          <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', marginBottom: '32px' }}>Consultant Dashboard</h1>
          
          {/* Tab Navigation */}
          <div style={{ display: 'flex', gap: '8px', marginBottom: '24px', borderBottom: '2px solid #e2e8f0' }}>
            <button
              onClick={() => setAdminDashboardTab('company-management')}
              style={{
                padding: '12px 24px',
                background: adminDashboardTab === 'company-management' ? '#667eea' : 'transparent',
                color: adminDashboardTab === 'company-management' ? 'white' : '#64748b',
                border: 'none',
                borderBottom: adminDashboardTab === 'company-management' ? '3px solid #667eea' : '3px solid transparent',
                fontSize: '16px',
                fontWeight: '600',
                cursor: 'pointer',
                borderRadius: '8px 8px 0 0',
                transition: 'all 0.2s'
              }}
            >
              Company Management
            </button>
            <button
              onClick={() => setAdminDashboardTab('import-financials')}
              style={{
                padding: '12px 24px',
                background: adminDashboardTab === 'import-financials' ? '#667eea' : 'transparent',
                color: adminDashboardTab === 'import-financials' ? 'white' : '#64748b',
                border: 'none',
                borderBottom: adminDashboardTab === 'import-financials' ? '3px solid #667eea' : '3px solid transparent',
                fontSize: '16px',
                fontWeight: '600',
                cursor: 'pointer',
                borderRadius: '8px 8px 0 0',
                transition: 'all 0.2s'
              }}
            >
              Import Financials
            </button>
            <button
              onClick={() => setAdminDashboardTab('api-connections')}
              style={{
                padding: '12px 24px',
                background: adminDashboardTab === 'api-connections' ? '#667eea' : 'transparent',
                color: adminDashboardTab === 'api-connections' ? 'white' : '#64748b',
                border: 'none',
                borderBottom: adminDashboardTab === 'api-connections' ? '3px solid #667eea' : '3px solid transparent',
                fontSize: '16px',
                fontWeight: '600',
                cursor: 'pointer',
                borderRadius: '8px 8px 0 0',
                transition: 'all 0.2s'
              }}
            >
              Accounting API Connections
            </button>
            <button
              onClick={() => setAdminDashboardTab('data-review')}
              style={{
                padding: '12px 24px',
                background: adminDashboardTab === 'data-review' ? '#667eea' : 'transparent',
                color: adminDashboardTab === 'data-review' ? 'white' : '#64748b',
                border: 'none',
                borderBottom: adminDashboardTab === 'data-review' ? '3px solid #667eea' : '3px solid transparent',
                fontSize: '16px',
                fontWeight: '600',
                cursor: 'pointer',
                borderRadius: '8px 8px 0 0',
                transition: 'all 0.2s'
              }}
            >
              Data Review
            </button>
            <button
              onClick={() => setAdminDashboardTab('data-mapping')}
              style={{
                padding: '12px 24px',
                background: adminDashboardTab === 'data-mapping' ? '#667eea' : 'transparent',
                color: adminDashboardTab === 'data-mapping' ? 'white' : '#64748b',
                border: 'none',
                borderBottom: adminDashboardTab === 'data-mapping' ? '3px solid #667eea' : '3px solid transparent',
                fontSize: '16px',
                fontWeight: '600',
                cursor: 'pointer',
                borderRadius: '8px 8px 0 0',
                transition: 'all 0.2s'
              }}
            >
              Data Mapping
            </button>
            <button
              onClick={() => setAdminDashboardTab('payments')}
              style={{
                padding: '12px 24px',
                background: adminDashboardTab === 'payments' ? '#667eea' : 'transparent',
                color: adminDashboardTab === 'payments' ? 'white' : '#64748b',
                border: 'none',
                borderBottom: adminDashboardTab === 'payments' ? '3px solid #667eea' : '3px solid transparent',
                fontSize: '16px',
                fontWeight: '600',
                cursor: 'pointer',
                borderRadius: '8px 8px 0 0',
                transition: 'all 0.2s'
              }}
            >
              Payments
            </button>
            <button
              onClick={() => setAdminDashboardTab('profile')}
              style={{
                padding: '12px 24px',
                background: adminDashboardTab === 'profile' ? '#667eea' : 'transparent',
                color: adminDashboardTab === 'profile' ? 'white' : '#64748b',
                border: 'none',
                borderBottom: adminDashboardTab === 'profile' ? '3px solid #667eea' : '3px solid transparent',
                fontSize: '16px',
                fontWeight: '600',
                cursor: 'pointer',
                borderRadius: '8px 8px 0 0',
                transition: 'all 0.2s'
              }}
            >
              Profile
            </button>
          </div>
          
          {/* Company Management Tab */}
          {adminDashboardTab === 'company-management' && (
          <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
            <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '16px' }}>Company Management</h2>
            
            {/* Show selected company or add new company option */}
            {!selectedCompanyId ? (
              <>
                <p style={{ fontSize: '14px', color: '#64748b', marginBottom: '16px' }}>
                  Select a company from the sidebar or create a new one:
                </p>
                <div style={{ display: 'flex', gap: '12px', marginBottom: '24px' }}>
                  <input 
                    type="text" 
                    placeholder="Company Name" 
                    value={newCompanyName} 
                    onChange={(e) => setNewCompanyName(e.target.value)} 
                    onKeyDown={(e) => e.key === 'Enter' && !isLoading && addCompany()}
                    disabled={isLoading}
                    style={{ flex: 1, padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }} 
                  />
                  <button 
                    onClick={addCompany} 
                    disabled={isLoading}
                    style={{ 
                      padding: '12px 24px', 
                      background: isLoading ? '#94a3b8' : '#667eea', 
                      color: 'white', 
                      border: 'none', 
                      borderRadius: '8px', 
                      fontSize: '14px', 
                      fontWeight: '600', 
                      cursor: isLoading ? 'not-allowed' : 'pointer',
                      opacity: isLoading ? 0.7 : 1 
                    }}
                  >
                    {isLoading ? 'Adding...' : 'Add Company'}
                  </button>
                </div>
              </>
            ) : (
              <>
                {/* Only show the selected company - always expanded */}
                {companies.filter(c => c.id === selectedCompanyId).map(comp => (
                <div key={comp.id} style={{ background: '#f8fafc', borderRadius: '8px', padding: '24px', border: '2px solid #667eea' }}>
                  <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>
                    <div>
                      <h3 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '4px' }}>{comp.name}</h3>
                      <div style={{ fontSize: '13px', color: '#10b981', fontWeight: '600' }}>✓ Active Company</div>
                    </div>
                    <button onClick={() => deleteCompany(comp.id)} style={{ padding: '8px 16px', background: '#ef4444', color: 'white', border: 'none', borderRadius: '6px', fontSize: '13px', cursor: 'pointer', fontWeight: '600' }}>Delete Company</button>
                  </div>
                  
                  {/* Company Information */}
                  <div style={{ marginBottom: '16px' }}>
                    <div style={{ background: 'white', borderRadius: '6px', padding: '12px', border: '1px solid #cbd5e1', display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}>
                      <div style={{ flex: 1 }}>
                        <div style={{ fontSize: '13px', color: '#64748b', marginBottom: '6px' }}>
                          <span style={{ fontWeight: '600', display: 'block', marginBottom: '4px' }}>Address:</span>
                          {comp.addressStreet || comp.addressCity ? (
                            <>
                              {comp.addressStreet && <div style={{ color: '#1e293b', marginBottom: '2px' }}>{comp.addressStreet}</div>}
                              <div style={{ color: '#1e293b' }}>
                                {comp.addressCity && comp.addressCity}
                                {comp.addressState && `, ${comp.addressState}`}
                                {comp.addressZip && ` ${comp.addressZip}`}
                              </div>
                              {comp.addressCountry && <div style={{ color: '#1e293b' }}>{comp.addressCountry}</div>}
                            </>
                          ) : (
                            <span style={{ color: '#94a3b8', fontStyle: 'italic' }}>Not set</span>
                          )}
                        </div>
                        <div style={{ fontSize: '13px', color: '#64748b' }}>
                          <span style={{ fontWeight: '600' }}>Industry:</span> <span style={{ color: '#1e293b' }}>
                            {comp.industrySector 
                              ? `${comp.industrySector} - ${INDUSTRY_SECTORS.find(s => s.id === comp.industrySector)?.name || 'Unknown'}` 
                              : 'Not set'}
                          </span>
                        </div>
                      </div>
                      <button 
                        onClick={() => {
                          setEditingCompanyId(comp.id);
                          setCompanyAddressStreet(comp.addressStreet || '');
                          setCompanyAddressCity(comp.addressCity || '');
                          setCompanyAddressState(comp.addressState || '');
                          setCompanyAddressZip(comp.addressZip || '');
                          setCompanyAddressCountry(comp.addressCountry || 'USA');
                          setCompanyIndustrySector(comp.industrySector || '');
                          setShowCompanyDetailsModal(true);
                        }}
                        style={{ padding: '6px 12px', background: '#667eea', color: 'white', border: 'none', borderRadius: '6px', fontSize: '12px', cursor: 'pointer', fontWeight: '600', whiteSpace: 'nowrap' }}
                      >
                        Edit Details
                      </button>
                    </div>
                  </div>
                  
                  {/* Users Section - Side by Side */}
                  <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', borderTop: '2px solid #cbd5e1', paddingTop: '16px' }}>
                    
                    {/* Company Users (Management Team) */}
                    <div style={{ background: 'white', borderRadius: '8px', padding: '16px', border: '2px solid #10b981' }}>
                      <h4 style={{ fontSize: '16px', fontWeight: '600', color: '#475569', marginBottom: '4px' }}>Company Users</h4>
                      <p style={{ fontSize: '11px', color: '#64748b', marginBottom: '12px' }}>Management team - can view all company pages</p>
                      <div style={{ fontSize: '20px', fontWeight: '700', color: '#10b981', marginBottom: '12px' }}>
                        {users.filter(u => u.companyId === comp.id && u.userType === 'company').length}
                      </div>
                      
                      {users.filter(u => u.companyId === comp.id && u.userType === 'company').map(u => (
                        <div key={u.id} style={{ background: '#f0fdf4', borderRadius: '8px', padding: '12px', marginBottom: '8px', border: '1px solid #86efac' }}>
                          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}>
                            <div style={{ flex: 1 }}>
                              <div style={{ fontSize: '14px', fontWeight: '600', color: '#1e293b', marginBottom: '6px', display: 'flex', alignItems: 'center', gap: '8px', flexWrap: 'wrap' }}>
                                <span>{u.name}</span>
                                {u.title && <span style={{ fontSize: '12px', fontWeight: '500', color: '#059669', background: '#d1fae5', padding: '2px 8px', borderRadius: '4px' }}>{u.title}</span>}
                              </div>
                              <div style={{ fontSize: '12px', color: '#64748b', display: 'flex', alignItems: 'center', gap: '12px', flexWrap: 'wrap' }}>
                                <div><span style={{ fontWeight: '600' }}>Email:</span> {u.email}</div>
                                {u.phone && <div><span style={{ fontWeight: '600' }}>Phone:</span> {u.phone}</div>}
                              </div>
                            </div>
                            <button onClick={() => deleteUser(u.id)} style={{ padding: '4px 8px', background: '#ef4444', color: 'white', border: 'none', borderRadius: '4px', fontSize: '10px', cursor: 'pointer', fontWeight: '600' }}>Delete</button>
                          </div>
                        </div>
                      ))}
                      
                      <div style={{ borderTop: '1px solid #d1fae5', paddingTop: '12px', marginTop: '12px' }}>
                        <h5 style={{ fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>Add Company User</h5>
                        <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '6px' }}>
                            <input 
                              type="text" 
                              name={`company_user_name_${Date.now()}`}
                              placeholder="Name" 
                              value={newCompanyUserName} 
                              onChange={(e) => setNewCompanyUserName(e.target.value)} 
                              autoComplete="off"
                              style={{ padding: '8px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '12px' }} 
                            />
                            <input 
                              type="text" 
                              name={`company_user_title_${Date.now()}`}
                              placeholder="Title" 
                              value={newCompanyUserTitle} 
                              onChange={(e) => setNewCompanyUserTitle(e.target.value)} 
                              autoComplete="off"
                              style={{ padding: '8px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '12px' }} 
                            />
                          </div>
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '6px' }}>
                            <input 
                              type="text" 
                              name={`company_user_email_${Date.now()}`}
                              placeholder="Email" 
                              value={newCompanyUserEmail} 
                              onChange={(e) => setNewCompanyUserEmail(e.target.value)} 
                              autoComplete="off"
                              style={{ padding: '8px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '12px' }} 
                            />
                            <input 
                              type="text" 
                              name={`company_user_phone_${Date.now()}`}
                              placeholder="Phone Number" 
                              value={newCompanyUserPhone} 
                              onChange={(e) => setNewCompanyUserPhone(e.target.value)} 
                              autoComplete="off"
                              style={{ padding: '8px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '12px' }} 
                            />
                          </div>
                          <input 
                            type="password" 
                            name={`company_user_password_${Date.now()}`}
                            placeholder="Password" 
                            value={newCompanyUserPassword} 
                            onChange={(e) => setNewCompanyUserPassword(e.target.value)} 
                            autoComplete="new-password"
                            style={{ padding: '8px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '12px' }} 
                          />
                          <button onClick={() => addUser(comp.id, 'company')} style={{ padding: '8px', background: '#10b981', color: 'white', border: 'none', borderRadius: '6px', fontSize: '12px', fontWeight: '600', cursor: 'pointer' }}>Add Company User</button>
                        </div>
                      </div>
                    </div>
                    
                    {/* Assessment Users */}
                    <div style={{ background: 'white', borderRadius: '8px', padding: '16px', border: '2px solid #8b5cf6' }}>
                      <h4 style={{ fontSize: '16px', fontWeight: '600', color: '#475569', marginBottom: '4px' }}>Assessment Users</h4>
                      <p style={{ fontSize: '11px', color: '#64748b', marginBottom: '12px' }}>Fill out Management Assessment (max 5)</p>
                      <div style={{ fontSize: '20px', fontWeight: '700', color: '#8b5cf6', marginBottom: '12px' }}>
                        {users.filter(u => u.companyId === comp.id && u.userType === 'assessment').length} / 5
                      </div>
                      
                      {users.filter(u => u.companyId === comp.id && u.userType === 'assessment').map(u => {
                        const hasCompleted = assessmentRecords.some(r => r.user?.email === u.email && r.companyId === comp.id);
                        console.log(`🔍 Checking user: ${u.email}, Company: ${comp.id}, Assessment Records for this user:`, 
                          assessmentRecords.filter(r => r.user?.email === u.email).map(r => ({ userEmail: r.user?.email, companyId: r.companyId })),
                          'hasCompleted:', hasCompleted
                        );
                        return (
                          <div key={u.id} style={{ background: '#faf5ff', borderRadius: '6px', padding: '8px 12px', marginBottom: '6px', display: 'flex', justifyContent: 'space-between', alignItems: 'center', border: '1px solid #ddd6fe' }}>
                            <div style={{ flex: 1 }}>
                              <div style={{ fontSize: '13px', fontWeight: '600', color: '#1e293b' }}>
                                {u.name}
                                {u.title && <span style={{ fontSize: '11px', fontWeight: '500', color: '#64748b', marginLeft: '6px' }}>({u.title})</span>}
                              </div>
                              <div style={{ fontSize: '11px', color: '#64748b' }}>{u.email}</div>
                            </div>
                            <div style={{ display: 'flex', gap: '6px', alignItems: 'center' }}>
                              <div style={{ 
                                fontSize: '10px', 
                                fontWeight: '600', 
                                color: hasCompleted ? '#065f46' : '#991b1b',
                                background: hasCompleted ? '#d1fae5' : '#fee2e2',
                                padding: '3px 8px', 
                                borderRadius: '4px' 
                              }}>
                                {hasCompleted ? '✓ Done' : '⚠ Not Started'}
                              </div>
                              <button onClick={() => deleteUser(u.id)} style={{ padding: '4px 8px', background: '#ef4444', color: 'white', border: 'none', borderRadius: '4px', fontSize: '10px', cursor: 'pointer' }}>✕</button>
                            </div>
                          </div>
                        );
                      })}
                      
                      {users.filter(u => u.companyId === comp.id && u.userType === 'assessment').length < 5 ? (
                        <div style={{ borderTop: '1px solid #ede9fe', paddingTop: '12px', marginTop: '12px' }}>
                          <h5 style={{ fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>Add Assessment User</h5>
                          <div style={{ display: 'flex', flexDirection: 'column', gap: '6px' }}>
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '6px' }}>
                              <input 
                                type="text" 
                                name={`assessment_user_name_${Date.now()}`}
                                placeholder="Name" 
                                value={newAssessmentUserName} 
                                onChange={(e) => setNewAssessmentUserName(e.target.value)} 
                                autoComplete="off"
                                style={{ padding: '8px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '12px' }} 
                              />
                              <input 
                                type="text" 
                                name={`assessment_user_title_${Date.now()}`}
                                placeholder="Title" 
                                value={newAssessmentUserTitle} 
                                onChange={(e) => setNewAssessmentUserTitle(e.target.value)} 
                                autoComplete="off"
                                style={{ padding: '8px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '12px' }} 
                              />
                            </div>
                            <input 
                              type="text" 
                              name={`assessment_user_email_${Date.now()}`}
                              placeholder="Email" 
                              value={newAssessmentUserEmail} 
                              onChange={(e) => setNewAssessmentUserEmail(e.target.value)} 
                              autoComplete="off"
                              style={{ padding: '8px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '12px' }} 
                            />
                            <input 
                              type="password" 
                              name={`assessment_user_password_${Date.now()}`}
                              placeholder="Password" 
                              value={newAssessmentUserPassword} 
                              onChange={(e) => setNewAssessmentUserPassword(e.target.value)} 
                              autoComplete="new-password"
                              style={{ padding: '8px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '12px' }} 
                            />
                            <button onClick={() => addUser(comp.id, 'assessment')} style={{ padding: '8px', background: '#8b5cf6', color: 'white', border: 'none', borderRadius: '6px', fontSize: '12px', fontWeight: '600', cursor: 'pointer' }}>Add Assessment User</button>
                          </div>
                        </div>
                      ) : (
                        <div style={{ padding: '8px', background: '#fef3c7', border: '1px solid #fbbf24', borderRadius: '6px', fontSize: '11px', color: '#92400e', marginTop: '8px' }}>
                          ⚠ Maximum 5 assessment users reached
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
              </>
            )}
          </div>
          )}
          
          {/* Import Financials Tab */}
          {adminDashboardTab === 'import-financials' && selectedCompanyId && (
            <>
              {/* QuickBooks Data Verification Section */}
              {loadedMonthlyData && loadedMonthlyData.length > 0 && qbRawData && (
                <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', border: '2px solid #10b981' }}>
                  <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>✓ QuickBooks Data Verification</h2>
                  <p style={{ fontSize: '14px', color: '#64748b', marginBottom: '24px' }}>
                    Imported from QuickBooks • {loadedMonthlyData.length} months of data verified
                  </p>

                  {/* Summary Stats */}
                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '16px', marginBottom: '24px' }}>
                    <div style={{ background: '#f0fdf4', borderRadius: '8px', padding: '16px', border: '1px solid #86efac' }}>
                      <div style={{ fontSize: '12px', fontWeight: '600', color: '#065f46', marginBottom: '4px' }}>MONTHS IMPORTED</div>
                      <div style={{ fontSize: '28px', fontWeight: '700', color: '#10b981' }}>{loadedMonthlyData.length}</div>
                    </div>
                    <div style={{ background: '#ede9fe', borderRadius: '8px', padding: '16px', border: '1px solid #c4b5fd' }}>
                      <div style={{ fontSize: '12px', fontWeight: '600', color: '#5b21b6', marginBottom: '4px' }}>DATE RANGE</div>
                      <div style={{ fontSize: '14px', fontWeight: '600', color: '#7c3aed' }}>
                        {new Date(loadedMonthlyData[0].date).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })} - {new Date(loadedMonthlyData[loadedMonthlyData.length - 1].date).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })}
                      </div>
                    </div>
                    <div style={{ background: '#dbeafe', borderRadius: '8px', padding: '16px', border: '1px solid #93c5fd' }}>
                      <div style={{ fontSize: '12px', fontWeight: '600', color: '#1e40af', marginBottom: '4px' }}>TOTAL REVENUE</div>
                      <div style={{ fontSize: '18px', fontWeight: '700', color: '#2563eb' }}>
                        ${(loadedMonthlyData.reduce((sum, m) => sum + (m.revenue || 0), 0) / 1000).toFixed(0)}K
                      </div>
                    </div>
                    <div style={{ background: '#fef3c7', borderRadius: '8px', padding: '16px', border: '1px solid #fcd34d' }}>
                      <div style={{ fontSize: '12px', fontWeight: '600', color: '#92400e', marginBottom: '4px' }}>TOTAL ASSETS</div>
                      <div style={{ fontSize: '18px', fontWeight: '700', color: '#d97706' }}>
                        ${(loadedMonthlyData[loadedMonthlyData.length - 1].totalAssets / 1000).toFixed(0)}K
                      </div>
                    </div>
                  </div>

                  {/* Sample Data Tables */}
                  <div style={{ marginBottom: '20px' }}>
                    <h3 style={{ fontSize: '16px', fontWeight: '600', color: '#1e293b', marginBottom: '12px' }}>Sample Income Statement Data (Last 6 Months)</h3>
                    <div style={{ overflowX: 'auto' }}>
                      <table style={{ width: '100%', fontSize: '13px', borderCollapse: 'collapse' }}>
                        <thead>
                          <tr style={{ background: '#f8fafc', borderBottom: '2px solid #e2e8f0' }}>
                            <th style={{ padding: '8px', textAlign: 'left', fontWeight: '600', color: '#475569' }}>Month</th>
                            <th style={{ padding: '8px', textAlign: 'right', fontWeight: '600', color: '#475569' }}>Revenue</th>
                            <th style={{ padding: '8px', textAlign: 'right', fontWeight: '600', color: '#475569' }}>Expense</th>
                            <th style={{ padding: '8px', textAlign: 'right', fontWeight: '600', color: '#475569' }}>COGS Total</th>
                            <th style={{ padding: '8px', textAlign: 'right', fontWeight: '600', color: '#475569' }}>Net Income</th>
                          </tr>
                        </thead>
                        <tbody>
                          {loadedMonthlyData.slice(-6).map((m, idx) => (
                            <tr key={idx} style={{ borderBottom: '1px solid #f1f5f9' }}>
                              <td style={{ padding: '8px', color: '#1e293b' }}>{new Date(m.date).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })}</td>
                              <td style={{ padding: '8px', textAlign: 'right', color: '#10b981', fontWeight: '600' }}>${m.revenue.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</td>
                              <td style={{ padding: '8px', textAlign: 'right', color: '#ef4444', fontWeight: '600' }}>${m.expense.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</td>
                              <td style={{ padding: '8px', textAlign: 'right', color: '#f59e0b' }}>${m.cogsTotal.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</td>
                              <td style={{ padding: '8px', textAlign: 'right', color: (m.revenue - m.expense - m.cogsTotal) >= 0 ? '#10b981' : '#ef4444', fontWeight: '600' }}>
                                ${(m.revenue - m.expense - m.cogsTotal).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>

                  <div style={{ marginBottom: '20px' }}>
                    <h3 style={{ fontSize: '16px', fontWeight: '600', color: '#1e293b', marginBottom: '12px' }}>Sample Balance Sheet Data (Last 6 Months)</h3>
                    <div style={{ overflowX: 'auto' }}>
                      <table style={{ width: '100%', fontSize: '13px', borderCollapse: 'collapse' }}>
                        <thead>
                          <tr style={{ background: '#f8fafc', borderBottom: '2px solid #e2e8f0' }}>
                            <th style={{ padding: '8px', textAlign: 'left', fontWeight: '600', color: '#475569' }}>Month</th>
                            <th style={{ padding: '8px', textAlign: 'right', fontWeight: '600', color: '#475569' }}>Cash</th>
                            <th style={{ padding: '8px', textAlign: 'right', fontWeight: '600', color: '#475569' }}>A/R</th>
                            <th style={{ padding: '8px', textAlign: 'right', fontWeight: '600', color: '#475569' }}>A/P</th>
                            <th style={{ padding: '8px', textAlign: 'right', fontWeight: '600', color: '#475569' }}>Total Assets</th>
                            <th style={{ padding: '8px', textAlign: 'right', fontWeight: '600', color: '#475569' }}>Total Equity</th>
                          </tr>
                        </thead>
                        <tbody>
                          {loadedMonthlyData.slice(-6).map((m, idx) => (
                            <tr key={idx} style={{ borderBottom: '1px solid #f1f5f9' }}>
                              <td style={{ padding: '8px', color: '#1e293b' }}>{new Date(m.date).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })}</td>
                              <td style={{ padding: '8px', textAlign: 'right', color: '#10b981', fontWeight: '600' }}>${m.cash.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</td>
                              <td style={{ padding: '8px', textAlign: 'right', color: '#3b82f6' }}>${m.ar.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</td>
                              <td style={{ padding: '8px', textAlign: 'right', color: '#f59e0b' }}>${m.ap.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</td>
                              <td style={{ padding: '8px', textAlign: 'right', color: '#8b5cf6', fontWeight: '600' }}>${m.totalAssets.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</td>
                              <td style={{ padding: '8px', textAlign: 'right', color: '#ec4899', fontWeight: '600' }}>${m.totalEquity.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>

                  <div style={{ background: '#f0fdf4', borderRadius: '8px', padding: '16px', border: '1px solid #86efac' }}>
                    <div style={{ fontSize: '14px', fontWeight: '600', color: '#065f46', marginBottom: '8px' }}>✓ Data Quality Check</div>
                    <div style={{ fontSize: '13px', color: '#059669' }}>
                      • All {loadedMonthlyData.length} months have complete data<br/>
                      • Income Statement fields populated: Revenue, Expenses, COGS<br/>
                      • Balance Sheet fields populated: Assets, Liabilities, Equity<br/>
                      • Ready for AI-assisted mapping
                    </div>
                  </div>
                </div>
              )}

              <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '16px' }}>Import Financials</h2>
                
                <div style={{ marginBottom: '20px' }}>
                  <h3 style={{ fontSize: '16px', fontWeight: '600', color: '#475569', marginBottom: '12px' }}>Upload Financial Data</h3>
                  <input type="file" accept=".xlsx,.xls,.csv" onChange={handleFile} style={{ marginBottom: '16px', padding: '12px', border: '2px dashed #cbd5e1', borderRadius: '8px', width: '100%', cursor: 'pointer' }} />
                  {error && <div style={{ padding: '12px', background: '#fee2e2', color: '#991b1b', borderRadius: '8px', marginBottom: '16px' }}>{error}</div>}
                  {file && <div style={{ fontSize: '14px', color: '#10b981', fontWeight: '600' }}>✓ Loaded: {file.name}</div>}
                </div>

              {file && columns.length > 0 && (
                <div>
                  <h3 style={{ fontSize: '16px', fontWeight: '600', color: '#475569', marginBottom: '12px' }}>Column Mapping</h3>
                  <p style={{ fontSize: '14px', color: '#64748b', marginBottom: '20px' }}>Verify or adjust the column mappings below. Columns have been auto-detected.</p>
                  
                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))', gap: '20px' }}>
                    <div>
                      <h4 style={{ fontSize: '15px', fontWeight: '600', color: '#475569', marginBottom: '12px', borderBottom: '2px solid #e2e8f0', paddingBottom: '8px' }}>Required Fields</h4>
                      {renderColumnSelector('Date/Period', 'date')}
                      {renderColumnSelector('Total Revenue', 'revenue')}
                      {renderColumnSelector('Total Expenses', 'expense')}
                      {renderColumnSelector('Total Assets', 'totalAssets')}
                      {renderColumnSelector('Total Liabilities', 'totalLiab')}
                      {renderColumnSelector('Total Equity', 'totalEquity')}
                    </div>
                    
                    <div>
                      <h4 style={{ fontSize: '15px', fontWeight: '600', color: '#475569', marginBottom: '12px', borderBottom: '2px solid #e2e8f0', paddingBottom: '8px' }}>Cost of Goods Sold</h4>
                      {renderColumnSelector('COGS Payroll', 'cogsPayroll')}
                      {renderColumnSelector('COGS Owner Pay', 'cogsOwnerPay')}
                      {renderColumnSelector('COGS Contractors', 'cogsContractors')}
                      {renderColumnSelector('COGS Materials', 'cogsMaterials')}
                      {renderColumnSelector('COGS Commissions', 'cogsCommissions')}
                      {renderColumnSelector('COGS Other', 'cogsOther')}
                      {renderColumnSelector('COGS Total', 'cogsTotal')}
                    </div>
                    
                    <div>
                      <h4 style={{ fontSize: '15px', fontWeight: '600', color: '#475569', marginBottom: '12px', borderBottom: '2px solid #e2e8f0', paddingBottom: '8px' }}>Operating Expenses</h4>
                      {renderColumnSelector('Sales & Marketing', 'opexSalesMarketing')}
                      {renderColumnSelector('Rent/Lease', 'rentLease')}
                      {renderColumnSelector('Utilities', 'utilities')}
                      {renderColumnSelector('Equipment', 'equipment')}
                      {renderColumnSelector('Travel', 'travel')}
                      {renderColumnSelector('Professional Services', 'professionalServices')}
                      {renderColumnSelector('Insurance', 'insurance')}
                      {renderColumnSelector('OPEX Other', 'opexOther')}
                    </div>
                    
                    <div>
                      <h4 style={{ fontSize: '15px', fontWeight: '600', color: '#475569', marginBottom: '12px', borderBottom: '2px solid #e2e8f0', paddingBottom: '8px' }}>Payroll & Owners</h4>
                      {renderColumnSelector('OPEX Payroll', 'opexPayroll')}
                      {renderColumnSelector('Owners Base Pay', 'ownersBasePay')}
                      {renderColumnSelector('Owners Retirement', 'ownersRetirement')}
                      {renderColumnSelector('Contractors/Distribution', 'contractorsDistribution')}
                      {renderColumnSelector('Interest Expense', 'interestExpense')}
                      {renderColumnSelector('Depreciation Expense', 'depreciationExpense')}
                      {renderColumnSelector('Operating Expense Total', 'operatingExpenseTotal')}
                      {renderColumnSelector('Non-Operating Income', 'nonOperatingIncome')}
                      {renderColumnSelector('Extraordinary Items', 'extraordinaryItems')}
                      {renderColumnSelector('Net Profit', 'netProfit')}
                    </div>
                    
                    <div>
                      <h4 style={{ fontSize: '15px', fontWeight: '600', color: '#475569', marginBottom: '12px', borderBottom: '2px solid #e2e8f0', paddingBottom: '8px' }}>Assets</h4>
                      {renderColumnSelector('Cash', 'cash')}
                      {renderColumnSelector('Accounts Receivable', 'ar')}
                      {renderColumnSelector('Inventory', 'inventory')}
                      {renderColumnSelector('Other Current Assets', 'otherCA')}
                      {renderColumnSelector('Total Current Assets', 'tca')}
                      {renderColumnSelector('Fixed Assets', 'fixedAssets')}
                      {renderColumnSelector('Other Assets', 'otherAssets')}
                    </div>
                    
                    <div>
                      <h4 style={{ fontSize: '15px', fontWeight: '600', color: '#475569', marginBottom: '12px', borderBottom: '2px solid #e2e8f0', paddingBottom: '8px' }}>Liabilities & Other</h4>
                      {renderColumnSelector('Accounts Payable', 'ap')}
                      {renderColumnSelector('Other Current Liabilities', 'otherCL')}
                      {renderColumnSelector('Total Current Liabilities', 'tcl')}
                      {renderColumnSelector('Long Term Debt', 'ltd')}
                      {renderColumnSelector('Total Liabilities & Equity', 'totalLAndE')}
                    </div>
                  </div>
                  
                  <div style={{ marginTop: '20px', padding: '12px', background: '#f0f9ff', border: '1px solid #bae6fd', borderRadius: '8px' }}>
                    <p style={{ fontSize: '13px', color: '#0c4a6e', margin: 0 }}>
                      <strong>Tip:</strong> At minimum, map Date, Total Revenue, Total Expenses, Total Assets, and Total Liabilities for basic analysis. 
                      Map detailed P&L and balance sheet items for comprehensive analysis and reporting.
                    </p>
                  </div>
                </div>
              )}
            </div>
            </>
          )}
          
          {!selectedCompanyId && adminDashboardTab === 'import-financials' && (
            <div style={{ background: 'white', borderRadius: '12px', padding: '48px 24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', textAlign: 'center' }}>
              <div style={{ fontSize: '18px', fontWeight: '600', color: '#64748b', marginBottom: '12px' }}>No Company Selected</div>
              <p style={{ fontSize: '14px', color: '#94a3b8' }}>Please select a company from the sidebar to import financials.</p>
            </div>
          )}

          {/* Accounting API Connections Tab */}
          {adminDashboardTab === 'api-connections' && selectedCompanyId && (
            <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
              <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '16px' }}>Accounting API Connections</h2>
              <p style={{ fontSize: '14px', color: '#64748b', marginBottom: '24px' }}>
                Connect to accounting platforms to automatically import financial data for {companyName || 'your company'}.
              </p>

              {/* QuickBooks Connection */}
              <div style={{ background: '#f8fafc', borderRadius: '12px', padding: '24px', marginBottom: '20px', border: '2px solid #e2e8f0' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '16px', marginBottom: '16px' }}>
                  <div style={{ width: '60px', height: '60px', background: 'white', borderRadius: '12px', display: 'flex', alignItems: 'center', justifyContent: 'center', border: '2px solid #e2e8f0' }}>
                    <div style={{ fontSize: '24px', fontWeight: '700', color: '#2ca01c' }}>QB</div>
                  </div>
                  <div>
                    <h3 style={{ fontSize: '18px', fontWeight: '600', color: '#1e293b', marginBottom: '4px' }}>QuickBooks Online</h3>
                    <p style={{ fontSize: '13px', color: '#64748b', margin: 0 }}>Intuit QuickBooks Online</p>
                  </div>
                </div>
                
                <div style={{ display: 'flex', alignItems: 'center', gap: '12px', marginBottom: '12px' }}>
                  <div style={{ 
                    flex: 1, 
                    padding: '12px', 
                    background: qbConnected && qbStatus === 'ACTIVE' ? '#d1fae5' : qbStatus === 'ERROR' ? '#fee2e2' : qbStatus === 'EXPIRED' ? '#fed7aa' : '#fef3c7', 
                    borderRadius: '8px', 
                    border: `1px solid ${qbConnected && qbStatus === 'ACTIVE' ? '#10b981' : qbStatus === 'ERROR' ? '#ef4444' : qbStatus === 'EXPIRED' ? '#f97316' : '#fbbf24'}` 
                  }}>
                    <div style={{ fontSize: '12px', fontWeight: '600', color: qbConnected && qbStatus === 'ACTIVE' ? '#065f46' : qbStatus === 'ERROR' ? '#991b1b' : qbStatus === 'EXPIRED' ? '#9a3412' : '#92400e', marginBottom: '4px' }}>
                      {qbConnected && qbStatus === 'ACTIVE' ? '✓ Connected' : qbStatus === 'ERROR' ? '✗ Error' : qbStatus === 'EXPIRED' ? '⚠ Token Expired' : '⚠ Status: Not Connected'}
                    </div>
                    <div style={{ fontSize: '12px', color: qbConnected && qbStatus === 'ACTIVE' ? '#065f46' : qbStatus === 'ERROR' ? '#991b1b' : qbStatus === 'EXPIRED' ? '#9a3412' : '#92400e' }}>
                      {qbError || (qbConnected && qbStatus === 'ACTIVE' ? (qbLastSync ? `Last synced: ${qbLastSync.toLocaleString()}` : 'Ready to sync') : qbStatus === 'EXPIRED' ? 'Please reconnect' : 'Sandbox environment ready for testing')}
                    </div>
                  </div>
                </div>

                <div style={{ display: 'flex', gap: '12px' }}>
                  {!qbConnected || qbStatus === 'EXPIRED' || qbStatus === 'ERROR' ? (
                    <button
                      onClick={connectQuickBooks}
                      style={{
                        padding: '12px 24px',
                        background: '#2ca01c',
                        color: 'white',
                        border: 'none',
                        borderRadius: '8px',
                        fontSize: '14px',
                        fontWeight: '600',
                        cursor: 'pointer',
                        transition: 'background 0.2s'
                      }}
                      onMouseEnter={(e) => e.currentTarget.style.background = '#239017'}
                      onMouseLeave={(e) => e.currentTarget.style.background = '#2ca01c'}
                    >
                      {qbConnected ? 'Reconnect' : 'Connect'} to QuickBooks (Sandbox)
                    </button>
                  ) : (
                    <>
                      <button
                        onClick={syncQuickBooks}
                        disabled={qbSyncing}
                        style={{
                          padding: '12px 24px',
                          background: qbSyncing ? '#94a3b8' : '#667eea',
                          color: 'white',
                          border: 'none',
                          borderRadius: '8px',
                          fontSize: '14px',
                          fontWeight: '600',
                          cursor: qbSyncing ? 'not-allowed' : 'pointer',
                          transition: 'background 0.2s',
                          opacity: qbSyncing ? 0.7 : 1
                        }}
                        onMouseEnter={(e) => !qbSyncing && (e.currentTarget.style.background = '#5568d3')}
                        onMouseLeave={(e) => !qbSyncing && (e.currentTarget.style.background = '#667eea')}
                      >
                        {qbSyncing ? 'Syncing...' : 'Sync Data'}
                      </button>
                      <button
                        onClick={disconnectQuickBooks}
                        disabled={qbSyncing}
                        style={{
                          padding: '12px 24px',
                          background: 'white',
                          color: '#ef4444',
                          border: '2px solid #ef4444',
                          borderRadius: '8px',
                          fontSize: '14px',
                          fontWeight: '600',
                          cursor: qbSyncing ? 'not-allowed' : 'pointer',
                          transition: 'all 0.2s',
                          opacity: qbSyncing ? 0.7 : 1
                        }}
                        onMouseEnter={(e) => !qbSyncing && (e.currentTarget.style.background = '#fef2f2')}
                        onMouseLeave={(e) => !qbSyncing && (e.currentTarget.style.background = 'white')}
                      >
                        Disconnect
                      </button>
                    </>
                  )}
                </div>
              </div>

              {/* QuickBooks Data Verification */}
              {loadedMonthlyData && loadedMonthlyData.length > 0 && qbRawData && (
                <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', border: '2px solid #10b981' }}>
                  <h3 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>✓ QuickBooks Data Verification</h3>
                  <p style={{ fontSize: '14px', color: '#64748b', marginBottom: '24px' }}>
                    Synced successfully • {loadedMonthlyData.length} months of data imported
                  </p>

                  {/* Summary Stats */}
                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '16px', marginBottom: '24px' }}>
                    <div style={{ background: '#f0fdf4', borderRadius: '8px', padding: '16px', border: '1px solid #86efac' }}>
                      <div style={{ fontSize: '12px', fontWeight: '600', color: '#065f46', marginBottom: '4px' }}>MONTHS IMPORTED</div>
                      <div style={{ fontSize: '28px', fontWeight: '700', color: '#10b981' }}>{loadedMonthlyData.length}</div>
                    </div>
                    <div style={{ background: '#ede9fe', borderRadius: '8px', padding: '16px', border: '1px solid #c4b5fd' }}>
                      <div style={{ fontSize: '12px', fontWeight: '600', color: '#5b21b6', marginBottom: '4px' }}>DATE RANGE</div>
                      <div style={{ fontSize: '14px', fontWeight: '600', color: '#7c3aed' }}>
                        {new Date(loadedMonthlyData[0].date).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })} - {new Date(loadedMonthlyData[loadedMonthlyData.length - 1].date).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })}
                      </div>
                    </div>
                    <div style={{ background: '#dbeafe', borderRadius: '8px', padding: '16px', border: '1px solid #93c5fd' }}>
                      <div style={{ fontSize: '12px', fontWeight: '600', color: '#1e40af', marginBottom: '4px' }}>TOTAL REVENUE</div>
                      <div style={{ fontSize: '18px', fontWeight: '700', color: '#2563eb' }}>
                        ${(loadedMonthlyData.reduce((sum, m) => sum + (m.revenue || 0), 0) / 1000).toFixed(0)}K
                      </div>
                    </div>
                    <div style={{ background: '#fef3c7', borderRadius: '8px', padding: '16px', border: '1px solid #fcd34d' }}>
                      <div style={{ fontSize: '12px', fontWeight: '600', color: '#92400e', marginBottom: '4px' }}>TOTAL ASSETS</div>
                      <div style={{ fontSize: '18px', fontWeight: '700', color: '#d97706' }}>
                        ${(loadedMonthlyData[loadedMonthlyData.length - 1].totalAssets / 1000).toFixed(0)}K
                      </div>
                    </div>
                  </div>

                  {/* Sample Data Tables - Show Individual Accounts */}
                  <div style={{ marginBottom: '20px' }}>
                    <h4 style={{ fontSize: '16px', fontWeight: '600', color: '#1e293b', marginBottom: '12px' }}>Sample Income & Expense Accounts (Last 3 Months)</h4>
                    <div style={{ overflowX: 'auto' }}>
                      <table style={{ width: '100%', fontSize: '12px', borderCollapse: 'collapse' }}>
                        <thead>
                          <tr style={{ background: '#f8fafc', borderBottom: '2px solid #e2e8f0' }}>
                            <th style={{ padding: '8px', textAlign: 'left', fontWeight: '600', color: '#475569' }}>Account</th>
                            {loadedMonthlyData.slice(-3).map((m, idx) => (
                              <th key={idx} style={{ padding: '8px', textAlign: 'right', fontWeight: '600', color: '#475569' }}>
                                {new Date(m.date).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })}
                              </th>
                            ))}
                          </tr>
                        </thead>
                        <tbody>
                          {(() => {
                            // Extract individual accounts from qbRawData
                            const extractRows = (data: any, type: 'data' | 'total' = 'data'): any[] => {
                              const result: any[] = [];
                              if (!data || !data.Rows || !data.Rows.Row) return result;
                              const rows = Array.isArray(data.Rows.Row) ? data.Rows.Row : [data.Rows.Row];
                              
                              const processRows = (rows: any[], parentSection: string = ''): void => {
                                for (const row of rows) {
                                  if (row.type === 'Section') {
                                    const sectionName = row.Header?.ColData?.[0]?.value || '';
                                    if (row.Rows && row.Rows.Row) {
                                      const nested = Array.isArray(row.Rows.Row) ? row.Rows.Row : [row.Rows.Row];
                                      processRows(nested, sectionName);
                                    }
                                    if (type === 'total' && row.Summary?.ColData) {
                                      const name = row.Summary.ColData[0]?.value || '';
                                      if (name) {
                                        result.push({ name, section: parentSection, colData: row.Summary.ColData });
                                      }
                                    }
                                  } else if (row.type === 'Data' && row.ColData && type === 'data') {
                                    const name = row.ColData[0]?.value || '';
                                    if (name && !name.toLowerCase().includes('total')) {
                                      result.push({ name, section: parentSection, colData: row.ColData });
                                    }
                                  }
                                }
                              };
                              
                              processRows(rows);
                              return result;
                            };

                            // Get income and expense accounts
                            const allAccounts = extractRows(qbRawData?.profitAndLoss);
                            const incomeAccounts = allAccounts.filter(a => 
                              (a.section || '').toLowerCase().includes('income') || 
                              (a.section || '').toLowerCase().includes('revenue') ||
                              (a.section || '').toLowerCase().includes('service')
                            ).slice(0, 5);
                            const expenseAccounts = allAccounts.filter(a => 
                              (a.section || '').toLowerCase().includes('expense') || 
                              (a.section || '').toLowerCase().includes('cost')
                            ).slice(0, 5);

                            const displayAccounts = [...incomeAccounts, ...expenseAccounts].slice(0, 10);
                            
                            return displayAccounts.map((account, idx) => {
                              // Get values for last 3 months
                              const columnCount = qbRawData.profitAndLoss?.Columns?.Column?.length || 0;
                              const lastThreeMonths = Array.from({length: 3}, (_, i) => {
                                const colIndex = columnCount - 4 - (2 - i); // Skip the "Total" column
                                const value = account.colData[colIndex]?.value;
                                return parseFloat(value || '0');
                              });

                              const isIncome = incomeAccounts.includes(account);
                              
                              return (
                                <tr key={idx} style={{ borderBottom: '1px solid #f1f5f9' }}>
                                  <td style={{ padding: '8px', color: '#1e293b' }}>
                                    <span style={{ fontSize: '10px', color: '#94a3b8', marginRight: '8px' }}>
                                      {isIncome ? '📈' : '📉'}
                                    </span>
                                    {account.name}
                                  </td>
                                  {lastThreeMonths.map((val, midx) => (
                                    <td key={midx} style={{ 
                                      padding: '8px', 
                                      textAlign: 'right', 
                                      color: isIncome ? '#10b981' : '#ef4444', 
                                      fontWeight: val !== 0 ? '600' : '400' 
                                    }}>
                                      ${val.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                                    </td>
                                  ))}
                                </tr>
                              );
                            });
                          })()}
                        </tbody>
                      </table>
                    </div>
                  </div>

                  <div style={{ marginBottom: '20px' }}>
                    <h4 style={{ fontSize: '16px', fontWeight: '600', color: '#1e293b', marginBottom: '12px' }}>Sample Balance Sheet Data (Last 6 Months)</h4>
                    <div style={{ overflowX: 'auto' }}>
                      <table style={{ width: '100%', fontSize: '13px', borderCollapse: 'collapse' }}>
                        <thead>
                          <tr style={{ background: '#f8fafc', borderBottom: '2px solid #e2e8f0' }}>
                            <th style={{ padding: '8px', textAlign: 'left', fontWeight: '600', color: '#475569' }}>Month</th>
                            <th style={{ padding: '8px', textAlign: 'right', fontWeight: '600', color: '#475569' }}>Cash</th>
                            <th style={{ padding: '8px', textAlign: 'right', fontWeight: '600', color: '#475569' }}>A/R</th>
                            <th style={{ padding: '8px', textAlign: 'right', fontWeight: '600', color: '#475569' }}>A/P</th>
                            <th style={{ padding: '8px', textAlign: 'right', fontWeight: '600', color: '#475569' }}>Total Assets</th>
                            <th style={{ padding: '8px', textAlign: 'right', fontWeight: '600', color: '#475569' }}>Total Equity</th>
                          </tr>
                        </thead>
                        <tbody>
                          {loadedMonthlyData.slice(-6).map((m, idx) => (
                            <tr key={idx} style={{ borderBottom: '1px solid #f1f5f9' }}>
                              <td style={{ padding: '8px', color: '#1e293b' }}>{new Date(m.date).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })}</td>
                              <td style={{ padding: '8px', textAlign: 'right', color: '#10b981', fontWeight: '600' }}>${m.cash.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</td>
                              <td style={{ padding: '8px', textAlign: 'right', color: '#3b82f6' }}>${m.ar.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</td>
                              <td style={{ padding: '8px', textAlign: 'right', color: '#f59e0b' }}>${m.ap.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</td>
                              <td style={{ padding: '8px', textAlign: 'right', color: '#8b5cf6', fontWeight: '600' }}>${m.totalAssets.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</td>
                              <td style={{ padding: '8px', textAlign: 'right', color: '#ec4899', fontWeight: '600' }}>${m.totalEquity.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  </div>

                  <div style={{ background: '#f0fdf4', borderRadius: '8px', padding: '16px', border: '1px solid #86efac', marginBottom: '16px' }}>
                    <div style={{ fontSize: '14px', fontWeight: '600', color: '#065f46', marginBottom: '8px' }}>✓ Data Quality Check</div>
                    <div style={{ fontSize: '13px', color: '#059669' }}>
                      • All {loadedMonthlyData.length} months have complete data<br/>
                      • Income Statement: Revenue, Expenses, COGS populated<br/>
                      • Balance Sheet: Assets, Liabilities, Equity populated<br/>
                      • Ready for AI-assisted account mapping
                    </div>
                  </div>

                  <div style={{ display: 'flex', gap: '12px' }}>
                    <button
                      onClick={() => {
                        // Navigate to Data Mapping tab
                        setAdminDashboardTab('data-mapping');
                      }}
                      style={{
                        padding: '12px 24px',
                        background: '#667eea',
                        color: 'white',
                        border: 'none',
                        borderRadius: '8px',
                        fontSize: '14px',
                        fontWeight: '600',
                        cursor: 'pointer',
                        transition: 'background 0.2s',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '8px'
                      }}
                      onMouseEnter={(e) => e.currentTarget.style.background = '#5568d3'}
                      onMouseLeave={(e) => e.currentTarget.style.background = '#667eea'}
                    >
                      <span>🤖</span>
                      <span>Proceed to AI Account Mapping →</span>
                    </button>
                  </div>
                </div>
              )}


              {/* Sage Connection */}
              <div style={{ background: '#f8fafc', borderRadius: '12px', padding: '24px', marginBottom: '20px', border: '2px solid #e2e8f0', opacity: 0.6 }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '16px', marginBottom: '16px' }}>
                  <div style={{ width: '60px', height: '60px', background: 'white', borderRadius: '12px', display: 'flex', alignItems: 'center', justifyContent: 'center', border: '2px solid #e2e8f0' }}>
                    <div style={{ fontSize: '20px', fontWeight: '700', color: '#00a851' }}>S</div>
                  </div>
                  <div>
                    <h3 style={{ fontSize: '18px', fontWeight: '600', color: '#1e293b', marginBottom: '4px' }}>Sage</h3>
                    <p style={{ fontSize: '13px', color: '#64748b', margin: 0 }}>Sage Business Cloud Accounting</p>
                  </div>
                </div>
                <div style={{ padding: '12px', background: '#e2e8f0', borderRadius: '8px', fontSize: '13px', color: '#64748b', fontWeight: '600' }}>
                  Coming Soon
                </div>
              </div>

              {/* NetSuite Connection */}
              <div style={{ background: '#f8fafc', borderRadius: '12px', padding: '24px', marginBottom: '20px', border: '2px solid #e2e8f0', opacity: 0.6 }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '16px', marginBottom: '16px' }}>
                  <div style={{ width: '60px', height: '60px', background: 'white', borderRadius: '12px', display: 'flex', alignItems: 'center', justifyContent: 'center', border: '2px solid #e2e8f0' }}>
                    <div style={{ fontSize: '20px', fontWeight: '700', color: '#E91C24' }}>NS</div>
                  </div>
                  <div>
                    <h3 style={{ fontSize: '18px', fontWeight: '600', color: '#1e293b', marginBottom: '4px' }}>NetSuite</h3>
                    <p style={{ fontSize: '13px', color: '#64748b', margin: 0 }}>Oracle NetSuite ERP</p>
                  </div>
                </div>
                <div style={{ padding: '12px', background: '#e2e8f0', borderRadius: '8px', fontSize: '13px', color: '#64748b', fontWeight: '600' }}>
                  Coming Soon
                </div>
              </div>

              {/* Dynamics Connection */}
              <div style={{ background: '#f8fafc', borderRadius: '12px', padding: '24px', border: '2px solid #e2e8f0', opacity: 0.6 }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '16px', marginBottom: '16px' }}>
                  <div style={{ width: '60px', height: '60px', background: 'white', borderRadius: '12px', display: 'flex', alignItems: 'center', justifyContent: 'center', border: '2px solid #e2e8f0' }}>
                    <div style={{ fontSize: '20px', fontWeight: '700', color: '#0078D4' }}>D</div>
                  </div>
                  <div>
                    <h3 style={{ fontSize: '18px', fontWeight: '600', color: '#1e293b', marginBottom: '4px' }}>Microsoft Dynamics 365</h3>
                    <p style={{ fontSize: '13px', color: '#64748b', margin: 0 }}>Microsoft Dynamics 365 Finance</p>
                  </div>
                </div>
                <div style={{ padding: '12px', background: '#e2e8f0', borderRadius: '8px', fontSize: '13px', color: '#64748b', fontWeight: '600' }}>
                  Coming Soon
                </div>
              </div>

              <div style={{ marginTop: '24px', padding: '16px', background: '#f0f9ff', border: '1px solid #bae6fd', borderRadius: '8px' }}>
                <p style={{ fontSize: '13px', color: '#0c4a6e', margin: 0, lineHeight: '1.6' }}>
                  <strong>Note:</strong> API connections allow automatic synchronization of financial data. Once connected, 
                  you can schedule automatic imports or manually trigger data pulls. All connections use OAuth 2.0 for 
                  secure authentication and are encrypted in transit and at rest.
                </p>
              </div>
            </div>
          )}

          {!selectedCompanyId && adminDashboardTab === 'api-connections' && (
            <div style={{ background: 'white', borderRadius: '12px', padding: '48px 24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', textAlign: 'center' }}>
              <div style={{ fontSize: '18px', fontWeight: '600', color: '#64748b', marginBottom: '12px' }}>No Company Selected</div>
              <p style={{ fontSize: '14px', color: '#94a3b8' }}>Please select a company from the sidebar to manage API connections.</p>
            </div>
          )}

          {!selectedCompanyId && adminDashboardTab === 'data-review' && (
            <div style={{ background: 'white', borderRadius: '12px', padding: '48px 24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', textAlign: 'center' }}>
              <div style={{ fontSize: '18px', fontWeight: '600', color: '#64748b', marginBottom: '12px' }}>No Company Selected</div>
              <p style={{ fontSize: '14px', color: '#94a3b8' }}>Please select a company from the sidebar to review financial data.</p>
            </div>
          )}

          {/* Payments Tab */}
          {adminDashboardTab === 'payments' && selectedCompanyId && (
            <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
              <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '16px' }}>Subscription Management</h2>
              <p style={{ fontSize: '14px', color: '#64748b', marginBottom: '24px' }}>
                Manage your subscription and billing for {companyName || 'your company'}.
              </p>

              {/* Subscription Plan Selection */}
              <div style={{ marginBottom: '32px' }}>
                <h3 style={{ fontSize: '16px', fontWeight: '600', color: '#475569', marginBottom: '16px' }}>Select Subscription Plan</h3>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '16px' }}>
                  {/* Monthly Plan */}
                  <div 
                    onClick={() => {/* TODO: setSelectedPlan('monthly') */}}
                    style={{ 
                      border: '2px solid #e2e8f0', 
                      borderRadius: '12px', 
                      padding: '24px', 
                      cursor: 'pointer',
                      transition: 'all 0.2s',
                      background: 'white'
                    }}
                  >
                    <div style={{ fontSize: '18px', fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>Monthly</div>
                    <div style={{ fontSize: '32px', fontWeight: '700', color: '#667eea', marginBottom: '8px' }}>
                      $<input 
                        type="number" 
                        placeholder="99" 
                        value={subscriptionMonthlyPrice || ''}
                        onChange={(e) => setSubscriptionMonthlyPrice(e.target.value ? parseFloat(e.target.value) : undefined)}
                        style={{ width: '80px', border: 'none', borderBottom: '2px solid #667eea', fontSize: '32px', fontWeight: '700', color: '#667eea', outline: 'none' }}
                      />
                      <span style={{ fontSize: '16px', color: '#64748b' }}>/mo</span>
                    </div>
                    <div style={{ fontSize: '13px', color: '#64748b' }}>Billed monthly</div>
                  </div>

                  {/* Quarterly Plan */}
                  <div 
                    onClick={() => {/* TODO: setSelectedPlan('quarterly') */}}
                    style={{ 
                      border: '2px solid #e2e8f0', 
                      borderRadius: '12px', 
                      padding: '24px', 
                      cursor: 'pointer',
                      transition: 'all 0.2s',
                      background: 'white'
                    }}
                  >
                    <div style={{ fontSize: '18px', fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>Quarterly</div>
                    <div style={{ fontSize: '32px', fontWeight: '700', color: '#667eea', marginBottom: '8px' }}>
                      $<input 
                        type="number" 
                        placeholder="279" 
                        value={subscriptionQuarterlyPrice || ''}
                        onChange={(e) => setSubscriptionQuarterlyPrice(e.target.value ? parseFloat(e.target.value) : undefined)}
                        style={{ width: '90px', border: 'none', borderBottom: '2px solid #667eea', fontSize: '32px', fontWeight: '700', color: '#667eea', outline: 'none' }}
                      />
                      <span style={{ fontSize: '16px', color: '#64748b' }}>/quarter</span>
                    </div>
                    <div style={{ fontSize: '13px', color: '#64748b' }}>Billed every 3 months • Save 5%</div>
                  </div>

                  {/* Annual Plan */}
                  <div 
                    onClick={() => {/* TODO: setSelectedPlan('annual') */}}
                    style={{ 
                      border: '2px solid #667eea', 
                      borderRadius: '12px', 
                      padding: '24px', 
                      cursor: 'pointer',
                      transition: 'all 0.2s',
                      background: '#f0f4ff',
                      position: 'relative'
                    }}
                  >
                    <div style={{ position: 'absolute', top: '8px', right: '8px', background: '#10b981', color: 'white', padding: '4px 8px', borderRadius: '6px', fontSize: '11px', fontWeight: '600' }}>
                      BEST VALUE
                    </div>
                    <div style={{ fontSize: '18px', fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>Annual</div>
                    <div style={{ fontSize: '32px', fontWeight: '700', color: '#667eea', marginBottom: '8px' }}>
                      $<input 
                        type="number" 
                        placeholder="999" 
                        value={subscriptionAnnualPrice || ''}
                        onChange={(e) => setSubscriptionAnnualPrice(e.target.value ? parseFloat(e.target.value) : undefined)}
                        style={{ width: '100px', border: 'none', borderBottom: '2px solid #667eea', fontSize: '32px', fontWeight: '700', color: '#667eea', outline: 'none', background: 'transparent' }}
                      />
                      <span style={{ fontSize: '16px', color: '#64748b' }}>/year</span>
                    </div>
                    <div style={{ fontSize: '13px', color: '#64748b' }}>Billed annually • Save 15%</div>
                  </div>
                </div>
              </div>

              {/* Payment Information */}
              <div style={{ marginBottom: '32px' }}>
                <h3 style={{ fontSize: '16px', fontWeight: '600', color: '#475569', marginBottom: '16px' }}>Payment Information</h3>
                <div style={{ display: 'grid', gap: '16px' }}>
                  {/* Cardholder Name */}
                  <div>
                    <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '6px' }}>
                      Cardholder Name *
                    </label>
                    <input 
                      type="text"
                      placeholder="John Doe"
                      style={{ width: '100%', padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    />
                  </div>

                  {/* Card Number */}
                  <div>
                    <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '6px' }}>
                      Card Number *
                    </label>
                    <input 
                      type="text"
                      placeholder="1234 5678 9012 3456"
                      maxLength={19}
                      style={{ width: '100%', padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    />
                  </div>

                  {/* Expiration and CVV */}
                  <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '16px' }}>
                    <div>
                      <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '6px' }}>
                        Expiration Month *
                      </label>
                      <select style={{ width: '100%', padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }}>
                        <option value="">MM</option>
                        {Array.from({length: 12}, (_, i) => i + 1).map(month => (
                          <option key={month} value={month.toString().padStart(2, '0')}>
                            {month.toString().padStart(2, '0')}
                          </option>
                        ))}
                      </select>
                    </div>
                    <div>
                      <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '6px' }}>
                        Expiration Year *
                      </label>
                      <select style={{ width: '100%', padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }}>
                        <option value="">YYYY</option>
                        {Array.from({length: 10}, (_, i) => new Date().getFullYear() + i).map(year => (
                          <option key={year} value={year}>
                            {year}
                          </option>
                        ))}
                      </select>
                    </div>
                    <div>
                      <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '6px' }}>
                        CVV *
                      </label>
                      <input 
                        type="text"
                        placeholder="123"
                        maxLength={4}
                        style={{ width: '100%', padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                      />
                    </div>
                  </div>

                  {/* Billing Address */}
                  <div>
                    <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '6px' }}>
                      Billing Address *
                    </label>
                    <input 
                      type="text"
                      placeholder="123 Main St"
                      style={{ width: '100%', padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px', marginBottom: '12px' }}
                    />
                  </div>

                  {/* City, State, ZIP */}
                  <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px' }}>
                    <div>
                      <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '6px' }}>
                        City *
                      </label>
                      <input 
                        type="text"
                        placeholder="San Francisco"
                        style={{ width: '100%', padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                      />
                    </div>
                    <div>
                      <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '6px' }}>
                        State *
                      </label>
                      <input 
                        type="text"
                        placeholder="CA"
                        maxLength={2}
                        style={{ width: '100%', padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                      />
                    </div>
                    <div>
                      <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '6px' }}>
                        ZIP *
                      </label>
                      <input 
                        type="text"
                        placeholder="94102"
                        maxLength={10}
                        style={{ width: '100%', padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                      />
                    </div>
                  </div>
                </div>
              </div>

              {/* Pricing Actions */}
              <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end', borderTop: '1px solid #e2e8f0', paddingTop: '24px', marginBottom: '32px' }}>
                <button
                  onClick={saveSubscriptionPricing}
                  disabled={isLoading}
                  style={{
                    padding: '12px 32px',
                    background: '#10b981',
                    color: 'white',
                    border: 'none',
                    borderRadius: '8px',
                    fontSize: '14px',
                    fontWeight: '600',
                    cursor: isLoading ? 'not-allowed' : 'pointer',
                    opacity: isLoading ? 0.6 : 1,
                    transition: 'all 0.2s'
                  }}
                >
                  {isLoading ? 'Saving...' : '💾 Save Pricing'}
                </button>
              </div>

              {/* Action Buttons */}
              <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end', borderTop: '1px solid #e2e8f0', paddingTop: '24px' }}>
                <button
                  onClick={() => {
                    if (confirm('Are you sure you want to cancel your subscription? Your access will end at the end of the current billing period.')) {
                      alert('Subscription cancelled. Your access will continue until the end of the current billing period.');
                    }
                  }}
                  style={{
                    padding: '12px 24px',
                    background: 'white',
                    color: '#ef4444',
                    border: '2px solid #ef4444',
                    borderRadius: '8px',
                    fontSize: '14px',
                    fontWeight: '600',
                    cursor: 'pointer',
                    transition: 'all 0.2s'
                  }}
                >
                  Cancel Subscription
                </button>
                <button
                  onClick={() => {
                    alert('Processing payment... This will integrate with USAePay API');
                  }}
                  style={{
                    padding: '12px 32px',
                    background: '#667eea',
                    color: 'white',
                    border: 'none',
                    borderRadius: '8px',
                    fontSize: '14px',
                    fontWeight: '600',
                    cursor: 'pointer',
                    transition: 'all 0.2s'
                  }}
                >
                  Start Subscription
                </button>
              </div>

              {/* Security Notice */}
              <div style={{ marginTop: '24px', padding: '16px', background: '#f0fdf4', borderRadius: '8px', border: '1px solid #86efac' }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px' }}>
                  <span style={{ fontSize: '16px' }}>🔒</span>
                  <span style={{ fontSize: '14px', fontWeight: '600', color: '#065f46' }}>Secure Payment Processing</span>
                </div>
                <p style={{ fontSize: '13px', color: '#059669', margin: 0 }}>
                  All payments are processed securely through USAePay. Your card information is encrypted and never stored on our servers.
                </p>
              </div>
            </div>
          )}

          {!selectedCompanyId && adminDashboardTab === 'payments' && (
            <div style={{ background: 'white', borderRadius: '12px', padding: '48px 24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', textAlign: 'center' }}>
              <div style={{ fontSize: '18px', fontWeight: '600', color: '#64748b', marginBottom: '12px' }}>No Company Selected</div>
              <p style={{ fontSize: '14px', color: '#94a3b8' }}>Please select a company from the sidebar to manage subscription and billing.</p>
            </div>
          )}

          {/* Profile Tab - No Company Selected */}
          {!selectedCompanyId && adminDashboardTab === 'profile' && (
            <div style={{ background: 'white', borderRadius: '12px', padding: '48px 24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', textAlign: 'center' }}>
              <div style={{ fontSize: '18px', fontWeight: '600', color: '#64748b', marginBottom: '12px' }}>No Company Selected</div>
              <p style={{ fontSize: '14px', color: '#94a3b8' }}>Please select a company from the sidebar to view and edit company profile.</p>
            </div>
          )}

          {/* Data Mapping Tab - Content rendered through Financial Statements conditional below */}

          {!selectedCompanyId && adminDashboardTab === 'data-mapping' && (
            <div style={{ background: 'white', borderRadius: '12px', padding: '48px 24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', textAlign: 'center' }}>
              <div style={{ fontSize: '18px', fontWeight: '600', color: '#64748b', marginBottom: '12px' }}>No Company Selected</div>
              <p style={{ fontSize: '14px', color: '#94a3b8' }}>Please select a company from the sidebar to map QuickBooks accounts.</p>
            </div>
          )}

          {adminDashboardTab === 'data-mapping' && selectedCompanyId && !qbRawData && (
            <div style={{ background: 'white', borderRadius: '12px', padding: '48px 24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', textAlign: 'center' }}>
              <div style={{ fontSize: '18px', fontWeight: '600', color: '#64748b', marginBottom: '12px' }}>No QuickBooks Data</div>
              <p style={{ fontSize: '14px', color: '#94a3b8', marginBottom: '16px' }}>Please sync QuickBooks data first from the Accounting API Connections tab.</p>
              <button
                onClick={() => setAdminDashboardTab('api-connections')}
                style={{
                  padding: '12px 24px',
                  background: '#667eea',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  fontSize: '14px',
                  fontWeight: '600',
                  cursor: 'pointer'
                }}
              >
                Go to API Connections
              </button>
            </div>
          )}
        </div>
      )}

      {/* Company Details Modal */}
      {showCompanyDetailsModal && (
        <div style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, background: 'rgba(0,0,0,0.5)', display: 'flex', justifyContent: 'center', alignItems: 'center', zIndex: 1000 }}>
          <div style={{ background: 'white', borderRadius: '12px', padding: '32px', maxWidth: '700px', width: '100%', maxHeight: '80vh', overflowY: 'auto' }}>
            <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '24px' }}>Company Details</h2>
            
            <div style={{ marginBottom: '20px' }}>
              <h3 style={{ fontSize: '16px', fontWeight: '600', color: '#475569', marginBottom: '12px', borderBottom: '2px solid #e2e8f0', paddingBottom: '8px' }}>Address</h3>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
                <input 
                  type="text" 
                  value={companyAddressStreet} 
                  onChange={(e) => setCompanyAddressStreet(e.target.value)} 
                  style={{ width: '100%', padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }} 
                  placeholder="Street Address" 
                />
                <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '12px' }}>
                  <input 
                    type="text" 
                    value={companyAddressCity} 
                    onChange={(e) => setCompanyAddressCity(e.target.value)} 
                    style={{ width: '100%', padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }} 
                    placeholder="City" 
                  />
                  <select 
                    value={companyAddressState} 
                    onChange={(e) => setCompanyAddressState(e.target.value)} 
                    style={{ width: '100%', padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px', cursor: 'pointer' }}
                  >
                    <option value="">State</option>
                    <option value="AL">AL</option>
                    <option value="AK">AK</option>
                    <option value="AZ">AZ</option>
                    <option value="AR">AR</option>
                    <option value="CA">CA</option>
                    <option value="CO">CO</option>
                    <option value="CT">CT</option>
                    <option value="DE">DE</option>
                    <option value="FL">FL</option>
                    <option value="GA">GA</option>
                    <option value="HI">HI</option>
                    <option value="ID">ID</option>
                    <option value="IL">IL</option>
                    <option value="IN">IN</option>
                    <option value="IA">IA</option>
                    <option value="KS">KS</option>
                    <option value="KY">KY</option>
                    <option value="LA">LA</option>
                    <option value="ME">ME</option>
                    <option value="MD">MD</option>
                    <option value="MA">MA</option>
                    <option value="MI">MI</option>
                    <option value="MN">MN</option>
                    <option value="MS">MS</option>
                    <option value="MO">MO</option>
                    <option value="MT">MT</option>
                    <option value="NE">NE</option>
                    <option value="NV">NV</option>
                    <option value="NH">NH</option>
                    <option value="NJ">NJ</option>
                    <option value="NM">NM</option>
                    <option value="NY">NY</option>
                    <option value="NC">NC</option>
                    <option value="ND">ND</option>
                    <option value="OH">OH</option>
                    <option value="OK">OK</option>
                    <option value="OR">OR</option>
                    <option value="PA">PA</option>
                    <option value="RI">RI</option>
                    <option value="SC">SC</option>
                    <option value="SD">SD</option>
                    <option value="TN">TN</option>
                    <option value="TX">TX</option>
                    <option value="UT">UT</option>
                    <option value="VT">VT</option>
                    <option value="VA">VA</option>
                    <option value="WA">WA</option>
                    <option value="WV">WV</option>
                    <option value="WI">WI</option>
                    <option value="WY">WY</option>
                    <option value="DC">DC</option>
                  </select>
                  <input 
                    type="text" 
                    value={companyAddressZip} 
                    onChange={(e) => setCompanyAddressZip(e.target.value)} 
                    style={{ width: '100%', padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }} 
                    placeholder="ZIP" 
                  />
                </div>
                <input 
                  type="text" 
                  value={companyAddressCountry} 
                  onChange={(e) => setCompanyAddressCountry(e.target.value)} 
                  style={{ width: '100%', padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px' }} 
                  placeholder="Country" 
                />
              </div>
            </div>
            
            <div style={{ marginBottom: '24px' }}>
              <h3 style={{ fontSize: '16px', fontWeight: '600', color: '#475569', marginBottom: '12px', borderBottom: '2px solid #e2e8f0', paddingBottom: '8px' }}>Industry Sector</h3>
              <select 
                value={companyIndustrySector} 
                onChange={(e) => setCompanyIndustrySector(parseInt(e.target.value))} 
                style={{ width: '100%', padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px', cursor: 'pointer' }}
              >
                <option value="">-- Select Industry --</option>
                {SECTOR_CATEGORIES.map(sector => (
                  <optgroup key={sector.code} label={`${sector.code} - ${sector.name}`}>
                    {INDUSTRY_SECTORS
                      .filter(ind => ind.sectorCode === sector.code)
                      .map(industry => (
                        <option key={industry.id} value={industry.id}>
                          {industry.id} - {industry.name}
                        </option>
                      ))}
                  </optgroup>
                ))}
              </select>
              {companyIndustrySector && INDUSTRY_SECTORS.find(i => i.id === companyIndustrySector) && (
                <div style={{ marginTop: '8px', padding: '12px', background: '#f0f9ff', border: '1px solid #bae6fd', borderRadius: '8px' }}>
                  <p style={{ fontSize: '12px', color: '#0c4a6e', margin: 0 }}>
                    <strong>{INDUSTRY_SECTORS.find(i => i.id === companyIndustrySector)?.name}</strong>
                    <br />
                    <span style={{ fontSize: '11px' }}>{INDUSTRY_SECTORS.find(i => i.id === companyIndustrySector)?.description}</span>
                  </p>
                </div>
              )}
            </div>
            <div style={{ display: 'flex', gap: '12px' }}>
              <button onClick={saveCompanyDetails} style={{ flex: 1, padding: '12px', background: '#667eea', color: 'white', border: 'none', borderRadius: '8px', fontSize: '14px', fontWeight: '600', cursor: 'pointer' }}>Save</button>
              <button onClick={() => setShowCompanyDetailsModal(false)} style={{ flex: 1, padding: '12px', background: '#f1f5f9', color: '#475569', border: 'none', borderRadius: '8px', fontSize: '14px', fontWeight: '600', cursor: 'pointer' }}>Cancel</button>
            </div>
          </div>
        </div>
      )}

      {/* Content Area - Requires Company Selection */}
      {!selectedCompanyId && currentView !== 'admin' && (
        <div style={{ maxWidth: '1400px', margin: '0 auto', padding: '64px 32px', textAlign: 'center' }}>
          <h2 style={{ fontSize: '28px', fontWeight: '600', color: '#1e293b', marginBottom: '16px' }}>No Company Selected</h2>
          <p style={{ fontSize: '16px', color: '#64748b', marginBottom: '24px' }}>Please select a company from the Consultant Dashboard to continue.</p>
          {currentUser?.role === 'consultant' && (
            <button onClick={() => setCurrentView('admin')} style={{ padding: '12px 24px', background: '#667eea', color: 'white', border: 'none', borderRadius: '8px', fontSize: '14px', fontWeight: '600', cursor: 'pointer' }}>Go to Consultant Dashboard</button>
          )}
        </div>
      )}

      {/* Data Review Tab */}
      {currentView === 'admin' && adminDashboardTab === 'data-review' && selectedCompanyId && (
        <div style={{ maxWidth: '100%', padding: '32px', overflowX: 'auto' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px' }}>
            <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', margin: 0 }}>📊 Data Review - Financial Data</h1>
            {companyName && <div style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b' }}>{companyName}</div>}
          </div>
          <p style={{ fontSize: '14px', color: '#64748b', marginBottom: '32px' }}>
            Review all imported financial data for {companyName || 'this company'}
          </p>
          
          {(!monthly || monthly.length === 0) && (
            <div style={{ background: '#fef2f2', border: '1px solid #fecaca', borderRadius: '8px', padding: '20px', color: '#991b1b' }}>
              <strong>No financial data found.</strong>
              <p style={{ marginTop: '8px', marginBottom: 0 }}>
                Please upload financial data in the Import Financials tab or sync from QuickBooks in the Accounting API Connections tab.
              </p>
            </div>
          )}
          
          {monthly && monthly.length > 0 && (
            <>
              <div style={{ background: '#f0fdf4', border: '1px solid #86efac', borderRadius: '8px', padding: '16px', marginBottom: '24px', color: '#166534' }}>
                <strong>✅ Financial data loaded</strong>
                <p style={{ marginTop: '8px', marginBottom: 0 }}>
                  Total months: {monthly.length} | Displaying: Last {Math.min(36, monthly.length)} months
                </p>
              </div>

              {/* Income Statement - Last 36 months */}
              <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '16px', borderBottom: '3px solid #10b981', paddingBottom: '8px' }}>
                  Income Statement (Last 36 Months)
                </h2>
                <div style={{ overflowX: 'auto' }}>
                  <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '12px' }}>
                    <thead>
                      <tr style={{ background: '#f8fafc', borderBottom: '2px solid #e2e8f0' }}>
                        <th style={{ padding: '10px', textAlign: 'left', fontWeight: '600', position: 'sticky', left: 0, background: '#f8fafc', zIndex: 1, minWidth: '150px' }}>Item</th>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <th key={idx} style={{ padding: '10px', textAlign: 'right', fontWeight: '600', minWidth: '90px' }}>{m.month}</th>
                        ))}
                      </tr>
                    </thead>
                    <tbody>
                      {/* Total Revenue */}
                      <tr style={{ borderBottom: '2px solid #e2e8f0', background: '#f0fdf4' }}>
                        <td style={{ padding: '8px 10px', fontWeight: '700', position: 'sticky', left: 0, background: '#f0fdf4', zIndex: 1 }}>Total Revenue</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace', fontWeight: '700' }}>
                            ${(m.revenue || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      
                      {/* COGS Detail */}
                      <tr style={{ borderBottom: '1px solid #f1f5f9', background: '#fef3c7' }}>
                        <td style={{ padding: '8px 10px', fontWeight: '700', position: 'sticky', left: 0, background: '#fef3c7', zIndex: 1 }}>COST OF GOODS SOLD</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px' }}></td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>COGS Payroll</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.cogsPayroll || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>COGS Owner Pay</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.cogsOwnerPay || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>COGS Contractors</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.cogsContractors || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>COGS Materials</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.cogsMaterials || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>COGS Commissions</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.cogsCommissions || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>COGS Other</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.cogsOther || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '2px solid #e2e8f0', background: '#fef9c3' }}>
                        <td style={{ padding: '8px 10px', fontWeight: '700', position: 'sticky', left: 0, background: '#fef9c3', zIndex: 1 }}>Total COGS</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace', fontWeight: '700' }}>
                            ${(m.cogsTotal || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      
                      {/* Gross Profit */}
                      <tr style={{ borderBottom: '2px solid #10b981', background: '#d1fae5' }}>
                        <td style={{ padding: '10px', fontWeight: '700', fontSize: '14px', position: 'sticky', left: 0, background: '#d1fae5', zIndex: 1 }}>GROSS PROFIT</td>
                        {monthly.slice(-36).map((m: any, idx: number) => {
                          const grossProfit = (m.revenue || 0) - (m.cogsTotal || 0);
                          return (
                            <td key={idx} style={{ padding: '10px', textAlign: 'right', fontFamily: 'monospace', fontWeight: '700', fontSize: '14px' }}>
                              ${grossProfit.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                            </td>
                          );
                        })}
                      </tr>
                      
                      {/* Operating Expenses */}
                      <tr style={{ borderBottom: '1px solid #f1f5f9', background: '#dbeafe' }}>
                        <td style={{ padding: '8px 10px', fontWeight: '700', position: 'sticky', left: 0, background: '#dbeafe', zIndex: 1 }}>OPERATING EXPENSES</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px' }}></td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Payroll</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.opexPayroll || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Owner Base Pay</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.ownersBasePay || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Benefits</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.benefits || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Insurance</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.insurance || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Professional Fees</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.professionalServices || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Subcontractors</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.contractorsDistribution || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Rent</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.rentLease || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Tax & License</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.taxLicense || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Phone & Comm</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.phoneComm || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Infrastructure</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.equipment || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Auto & Travel</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.travel || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Sales Expense</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.opexSalesMarketing || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Marketing</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.opexOther || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Training & Cert</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.trainingCert || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Meals & Entertainment</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.mealsEntertainment || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Interest Expense</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.interestExpense || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Depreciation & Amortization</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.depreciationExpense || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Other Expense</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.otherExpense || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '2px solid #e2e8f0', background: '#e0f2fe' }}>
                        <td style={{ padding: '8px 10px', fontWeight: '700', position: 'sticky', left: 0, background: '#e0f2fe', zIndex: 1 }}>Total Operating Expenses</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace', fontWeight: '700' }}>
                            ${(m.expense || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      
                      {/* Net Income */}
                      <tr style={{ borderBottom: '3px solid #10b981', background: '#10b981', color: 'white' }}>
                        <td style={{ padding: '12px 10px', fontWeight: '700', fontSize: '15px', position: 'sticky', left: 0, background: '#10b981', zIndex: 1 }}>NET INCOME</td>
                        {monthly.slice(-36).map((m: any, idx: number) => {
                          const netIncome = (m.revenue || 0) - (m.cogsTotal || 0) - (m.expense || 0);
                          return (
                            <td key={idx} style={{ padding: '12px 10px', textAlign: 'right', fontFamily: 'monospace', fontWeight: '700', fontSize: '15px' }}>
                              ${netIncome.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                            </td>
                          );
                        })}
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>

              {/* Balance Sheet - Last 36 months */}
              <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '16px', borderBottom: '3px solid #3b82f6', paddingBottom: '8px' }}>
                  Balance Sheet (Last 36 Months)
                </h2>
                <div style={{ overflowX: 'auto' }}>
                  <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '12px' }}>
                    <thead>
                      <tr style={{ background: '#f8fafc', borderBottom: '2px solid #e2e8f0' }}>
                        <th style={{ padding: '10px', textAlign: 'left', fontWeight: '600', position: 'sticky', left: 0, background: '#f8fafc', zIndex: 1, minWidth: '150px' }}>Item</th>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <th key={idx} style={{ padding: '10px', textAlign: 'right', fontWeight: '600', minWidth: '90px' }}>{m.month}</th>
                        ))}
                      </tr>
                    </thead>
                    <tbody>
                      {/* Current Assets */}
                      <tr style={{ borderBottom: '1px solid #f1f5f9', background: '#dbeafe' }}>
                        <td style={{ padding: '8px 10px', fontWeight: '700', position: 'sticky', left: 0, background: '#dbeafe', zIndex: 1 }}>CURRENT ASSETS</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px' }}></td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Cash</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.cash || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Accounts Receivable</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.ar || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Inventory</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.inventory || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Other Current Assets</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.otherCA || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '2px solid #e2e8f0', background: '#dbeafe' }}>
                        <td style={{ padding: '8px 10px', fontWeight: '700', position: 'sticky', left: 0, background: '#dbeafe', zIndex: 1 }}>Total Current Assets</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace', fontWeight: '700' }}>
                            ${(m.tca || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      
                      {/* Fixed Assets */}
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Fixed Assets</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.fixedAssets || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Other Assets</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.otherAssets || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '3px solid #3b82f6', background: '#e0f2fe' }}>
                        <td style={{ padding: '10px', fontWeight: '700', fontSize: '14px', position: 'sticky', left: 0, background: '#e0f2fe', zIndex: 1 }}>TOTAL ASSETS</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '10px', textAlign: 'right', fontFamily: 'monospace', fontWeight: '700', fontSize: '14px' }}>
                            ${(m.totalAssets || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      
                      {/* Current Liabilities */}
                      <tr style={{ borderBottom: '1px solid #f1f5f9', background: '#fef3c7' }}>
                        <td style={{ padding: '8px 10px', fontWeight: '700', position: 'sticky', left: 0, background: '#fef3c7', zIndex: 1 }}>CURRENT LIABILITIES</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px' }}></td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Accounts Payable</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.ap || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Other Current Liabilities</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.otherCL || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '2px solid #e2e8f0', background: '#fef3c7' }}>
                        <td style={{ padding: '8px 10px', fontWeight: '700', position: 'sticky', left: 0, background: '#fef3c7', zIndex: 1 }}>Total Current Liabilities</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace', fontWeight: '700' }}>
                            ${(m.tcl || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      
                      {/* Long-term Liabilities */}
                      <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                        <td style={{ padding: '8px 10px', paddingLeft: '20px', position: 'sticky', left: 0, background: 'white', zIndex: 1 }}>Long-term Debt</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px', textAlign: 'right', fontFamily: 'monospace' }}>
                            ${(m.ltd || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '3px solid #f59e0b', background: '#fef9c3' }}>
                        <td style={{ padding: '10px', fontWeight: '700', fontSize: '14px', position: 'sticky', left: 0, background: '#fef9c3', zIndex: 1 }}>TOTAL LIABILITIES</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '10px', textAlign: 'right', fontFamily: 'monospace', fontWeight: '700', fontSize: '14px' }}>
                            ${(m.totalLiab || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      
                      {/* Equity */}
                      <tr style={{ borderBottom: '1px solid #f1f5f9', background: '#f0fdf4' }}>
                        <td style={{ padding: '8px 10px', fontWeight: '700', position: 'sticky', left: 0, background: '#f0fdf4', zIndex: 1 }}>EQUITY</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '8px 10px' }}></td>
                        ))}
                      </tr>
                      <tr style={{ borderBottom: '3px solid #10b981', background: '#f0fdf4' }}>
                        <td style={{ padding: '10px', fontWeight: '700', fontSize: '14px', position: 'sticky', left: 0, background: '#f0fdf4', zIndex: 1 }}>TOTAL EQUITY</td>
                        {monthly.slice(-36).map((m: any, idx: number) => (
                          <td key={idx} style={{ padding: '10px', textAlign: 'right', fontFamily: 'monospace', fontWeight: '700', fontSize: '14px' }}>
                            ${(m.totalEquity || 0).toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                          </td>
                        ))}
                      </tr>
                      
                      {/* Total Liabilities & Equity Check */}
                      <tr style={{ borderBottom: '4px double #475569', background: '#e2e8f0' }}>
                        <td style={{ padding: '12px 10px', fontWeight: '700', fontSize: '15px', position: 'sticky', left: 0, background: '#e2e8f0', zIndex: 1 }}>TOTAL LIABILITIES & EQUITY</td>
                        {monthly.slice(-36).map((m: any, idx: number) => {
                          const totalLE = (m.totalLiab || 0) + (m.totalEquity || 0);
                          return (
                            <td key={idx} style={{ padding: '12px 10px', textAlign: 'right', fontFamily: 'monospace', fontWeight: '700', fontSize: '15px' }}>
                              ${totalLE.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                            </td>
                          );
                        })}
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </>
          )}
        </div>
      )}

      {/* Trend Analysis View */}
      {currentView === 'trend-analysis' && selectedCompanyId && monthly.length > 0 && (
        <div style={{ maxWidth: '100%', padding: '32px 32px 32px 16px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '32px' }}>
            <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', margin: 0 }}>Trend Analysis</h1>
            {companyName && <div style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b' }}>{companyName}</div>}
          </div>

          {/* Tabs */}
          <div style={{ display: 'flex', gap: '12px', marginBottom: '24px', borderBottom: '2px solid #e2e8f0' }}>
            <button 
              onClick={() => setTrendAnalysisTab('item-trends')}
              style={{ 
                padding: '12px 24px', 
                background: 'none', 
                border: 'none', 
                fontSize: '16px', 
                fontWeight: '600', 
                color: trendAnalysisTab === 'item-trends' ? '#667eea' : '#64748b', 
                cursor: 'pointer',
                borderBottom: trendAnalysisTab === 'item-trends' ? '3px solid #667eea' : '3px solid transparent',
                marginBottom: '-2px'
              }}
            >
              Item Trends
            </button>
            <button 
              onClick={() => setTrendAnalysisTab('expense-analysis')}
              style={{ 
                padding: '12px 24px', 
                background: 'none', 
                border: 'none', 
                fontSize: '16px', 
                fontWeight: '600', 
                color: trendAnalysisTab === 'expense-analysis' ? '#667eea' : '#64748b', 
                cursor: 'pointer',
                borderBottom: trendAnalysisTab === 'expense-analysis' ? '3px solid #667eea' : '3px solid transparent',
                marginBottom: '-2px'
              }}
            >
              Expense Analysis
            </button>
          </div>

          {/* Item Trends Tab */}
          {trendAnalysisTab === 'item-trends' && (
            <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
              <div style={{ marginBottom: '20px' }}>
                <label style={{ display: 'block', fontSize: '16px', fontWeight: '600', color: '#475569', marginBottom: '12px' }}>
                  Select Item to Analyze:
                </label>
                <select 
                  value={selectedTrendItem} 
                  onChange={(e) => setSelectedTrendItem(e.target.value)}
                  style={{ width: '100%', maxWidth: '400px', padding: '12px 16px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px', cursor: 'pointer', fontWeight: '500' }}
                >
                  <optgroup label="Income Statement">
                    <option value="revenue">Total Revenue</option>
                    <option value="expense">Total Expenses</option>
                    {mapping.cogsTotal && <option value="cogsTotal">COGS Total</option>}
                    {mapping.cogsPayroll && <option value="cogsPayroll">COGS Payroll</option>}
                    {mapping.cogsOwnerPay && <option value="cogsOwnerPay">COGS Owner Pay</option>}
                    {mapping.cogsContractors && <option value="cogsContractors">COGS Contractors</option>}
                    {mapping.cogsMaterials && <option value="cogsMaterials">COGS Materials</option>}
                    {mapping.cogsCommissions && <option value="cogsCommissions">COGS Commissions</option>}
                    {mapping.cogsOther && <option value="cogsOther">COGS Other</option>}
                    {mapping.opexSalesMarketing && <option value="opexSalesMarketing">Sales & Marketing</option>}
                    {mapping.rentLease && <option value="rentLease">Rent/Lease</option>}
                    {mapping.utilities && <option value="utilities">Utilities</option>}
                    {mapping.equipment && <option value="equipment">Equipment</option>}
                    {mapping.travel && <option value="travel">Travel</option>}
                    {mapping.professionalServices && <option value="professionalServices">Professional Services</option>}
                    {mapping.insurance && <option value="insurance">Insurance</option>}
                    {mapping.opexOther && <option value="opexOther">OPEX Other</option>}
                    {mapping.opexPayroll && <option value="opexPayroll">OPEX Payroll</option>}
                    {mapping.ownersBasePay && <option value="ownersBasePay">Owners Base Pay</option>}
                    {mapping.ownersRetirement && <option value="ownersRetirement">Owners Retirement</option>}
                    {mapping.contractorsDistribution && <option value="contractorsDistribution">Contractors/Distribution</option>}
                    {mapping.interestExpense && <option value="interestExpense">Interest Expense</option>}
                    {mapping.depreciationExpense && <option value="depreciationExpense">Depreciation Expense</option>}
                    {mapping.operatingExpenseTotal && <option value="operatingExpenseTotal">Operating Expense Total</option>}
                    {mapping.nonOperatingIncome && <option value="nonOperatingIncome">Non-Operating Income</option>}
                    {mapping.extraordinaryItems && <option value="extraordinaryItems">Extraordinary Items</option>}
                    {mapping.netProfit && <option value="netProfit">Net Profit</option>}
                  </optgroup>
                  <optgroup label="Balance Sheet - Assets">
                    <option value="totalAssets">Total Assets</option>
                    <option value="cash">Cash</option>
                    <option value="ar">Accounts Receivable</option>
                    <option value="inventory">Inventory</option>
                    {mapping.otherCA && <option value="otherCA">Other Current Assets</option>}
                    {mapping.tca && <option value="tca">Total Current Assets</option>}
                    {mapping.fixedAssets && <option value="fixedAssets">Fixed Assets</option>}
                    {mapping.otherAssets && <option value="otherAssets">Other Assets</option>}
                  </optgroup>
                  <optgroup label="Balance Sheet - Liabilities">
                    <option value="totalLiab">Total Liabilities</option>
                    <option value="ap">Accounts Payable</option>
                    {mapping.otherCL && <option value="otherCL">Other Current Liabilities</option>}
                    {mapping.tcl && <option value="tcl">Total Current Liabilities</option>}
                    {mapping.ltd && <option value="ltd">Long Term Debt</option>}
                  </optgroup>
                  <optgroup label="Balance Sheet - Equity">
                    <option value="totalEquity">Total Equity</option>
                  </optgroup>
                </select>
              </div>

              <div style={{ display: 'flex', gap: '20px', alignItems: 'flex-start' }}>
                <div style={{ flex: 1, minWidth: 0 }}>
                  <LineChart 
                    title={`${selectedTrendItem.charAt(0).toUpperCase() + selectedTrendItem.slice(1).replace(/([A-Z])/g, ' $1')} Trend`}
                    data={monthly.map(m => ({ month: m.month, value: m[selectedTrendItem as keyof typeof m] as number }))}
                    color="#667eea"
                    showTable={true}
                  />
                </div>
                
                <div style={{ width: '280px', flexShrink: 0 }}>
                  <div style={{ background: '#f8fafc', borderRadius: '12px', padding: '20px', border: '1px solid #e2e8f0', position: 'sticky', top: '100px' }}>
                    <h3 style={{ fontSize: '14px', fontWeight: '700', color: '#1e293b', marginBottom: '16px', textAlign: 'center' }}>Growth Analysis</h3>
                    
                    <div style={{ marginBottom: '16px', padding: '16px', background: 'white', borderRadius: '8px', border: '1px solid #cbd5e1' }}>
                      <div style={{ fontSize: '11px', fontWeight: '600', color: '#64748b', marginBottom: '8px', textAlign: 'center' }}>GROWTH RATE</div>
                      <div style={{ fontSize: '10px', color: '#64748b', marginBottom: '4px', textAlign: 'center' }}>Last Year</div>
                      <div style={{ fontSize: '24px', fontWeight: '700', textAlign: 'center', color: monthly.length >= 24 ? 
                        (() => {
                          const last12 = monthly.slice(-12).reduce((sum, m) => sum + (m[selectedTrendItem as keyof typeof m] as number || 0), 0);
                          const prev12 = monthly.slice(-24, -12).reduce((sum, m) => sum + (m[selectedTrendItem as keyof typeof m] as number || 0), 0);
                          const growthRate = prev12 !== 0 ? ((last12 - prev12) / prev12) * 100 : 0;
                          return growthRate >= 0 ? '#10b981' : '#ef4444';
                        })()
                        : '#64748b'
                      }}>
                        {monthly.length >= 24 ? (() => {
                          const last12 = monthly.slice(-12).reduce((sum, m) => sum + (m[selectedTrendItem as keyof typeof m] as number || 0), 0);
                          const prev12 = monthly.slice(-24, -12).reduce((sum, m) => sum + (m[selectedTrendItem as keyof typeof m] as number || 0), 0);
                          const growthRate = prev12 !== 0 ? ((last12 - prev12) / prev12) * 100 : 0;
                          return `${growthRate >= 0 ? '+' : ''}${growthRate.toFixed(2)}%`;
                        })() : 'N/A'}
                      </div>
                    </div>

                    <div style={{ padding: '16px', background: 'white', borderRadius: '8px', border: '1px solid #cbd5e1' }}>
                      <div style={{ fontSize: '11px', fontWeight: '600', color: '#64748b', marginBottom: '8px', textAlign: 'center' }}>GROWTH RATE</div>
                      <div style={{ fontSize: '10px', color: '#64748b', marginBottom: '4px', textAlign: 'center' }}>Previous Year</div>
                      <div style={{ fontSize: '24px', fontWeight: '700', textAlign: 'center', color: monthly.length >= 36 ? 
                        (() => {
                          const prev12 = monthly.slice(-24, -12).reduce((sum, m) => sum + (m[selectedTrendItem as keyof typeof m] as number || 0), 0);
                          const prev24 = monthly.slice(-36, -24).reduce((sum, m) => sum + (m[selectedTrendItem as keyof typeof m] as number || 0), 0);
                          const growthRate = prev24 !== 0 ? ((prev12 - prev24) / prev24) * 100 : 0;
                          return growthRate >= 0 ? '#10b981' : '#ef4444';
                        })()
                        : '#64748b'
                      }}>
                        {monthly.length >= 36 ? (() => {
                          const prev12 = monthly.slice(-24, -12).reduce((sum, m) => sum + (m[selectedTrendItem as keyof typeof m] as number || 0), 0);
                          const prev24 = monthly.slice(-36, -24).reduce((sum, m) => sum + (m[selectedTrendItem as keyof typeof m] as number || 0), 0);
                          const growthRate = prev24 !== 0 ? ((prev12 - prev24) / prev24) * 100 : 0;
                          return `${growthRate >= 0 ? '+' : ''}${growthRate.toFixed(2)}%`;
                        })() : 'N/A'}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Expense Analysis Tab */}
          {trendAnalysisTab === 'expense-analysis' && (
            <div>
              <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '24px' }}>Expense Items as % of Total Revenue</h2>
              
              <div style={{ marginBottom: '24px', padding: '16px', background: '#f0fdf4', borderRadius: '8px', border: '1px solid #86efac' }}>
                <h3 style={{ fontSize: '14px', fontWeight: '700', color: '#166534', marginBottom: '8px' }}>💡 How to Use This Analysis</h3>
                <ul style={{ margin: 0, paddingLeft: '20px', fontSize: '13px', color: '#15803d', lineHeight: '1.6' }}>
                  <li>Each chart shows an expense category as a <strong>percentage of total revenue</strong> over time</li>
                  <li>Look for categories with <strong>increasing trends</strong> that may need cost control</li>
                  <li>Compare percentages to industry benchmarks to identify inefficiencies</li>
                  <li>Watch for sudden spikes that may indicate one-time events or problems</li>
                </ul>
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '24px' }}>
                {/* Total Expenses */}
                <LineChart 
                  title="Total Expenses (% of Revenue)"
                  data={monthly.map(m => ({ 
                    month: m.month, 
                    value: m.revenue > 0 ? (m.expense / m.revenue) * 100 : 0 
                  }))}
                  color="#ef4444"
                  compact
                />

                {/* COGS Total */}
                {mapping.cogsTotal && (
                  <LineChart 
                    title="COGS Total (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.cogsTotal || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#f59e0b"
                    compact
                  />
                )}

                {/* COGS Breakdown */}
                {mapping.cogsPayroll && (
                  <LineChart 
                    title="COGS Payroll (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.cogsPayroll || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#fb923c"
                    compact
                  />
                )}

                {mapping.cogsOwnerPay && (
                  <LineChart 
                    title="COGS Owner Pay (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.cogsOwnerPay || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#fdba74"
                    compact
                  />
                )}

                {mapping.cogsContractors && (
                  <LineChart 
                    title="COGS Contractors (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.cogsContractors || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#fed7aa"
                    compact
                  />
                )}
                
                {mapping.cogsMaterials && (
                  <LineChart 
                    title="COGS Materials (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.cogsMaterials || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#fde047"
                    compact
                  />
                )}
                
                {mapping.cogsCommissions && (
                  <LineChart 
                    title="COGS Commissions (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.cogsCommissions || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#bef264"
                    compact
                  />
                )}
                
                {mapping.cogsOther && (
                  <LineChart 
                    title="COGS Other (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.cogsOther || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#86efac"
                    compact
                  />
                )}
                
                {mapping.operatingExpenseTotal && (
                  <LineChart 
                    title="Operating Expense Total (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.operatingExpenseTotal || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#3b82f6"
                    compact
                  />
                )}
                
                {mapping.opexPayroll && (
                  <LineChart 
                    title="OPEX Payroll (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.opexPayroll || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#60a5fa"
                    compact
                  />
                )}
                
                {mapping.opexSalesMarketing && (
                  <LineChart 
                    title="Sales & Marketing (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.opexSalesMarketing || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#93c5fd"
                    compact
                  />
                )}
                
                {mapping.rentLease && (
                  <LineChart 
                    title="Rent/Lease (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.rentLease || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#8b5cf6"
                    compact
                  />
                )}
                
                {mapping.utilities && (
                  <LineChart 
                    title="Utilities (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.utilities || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#a78bfa"
                    compact
                  />
                )}
                
                {mapping.equipment && (
                  <LineChart 
                    title="Equipment (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.equipment || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#c4b5fd"
                    compact
                  />
                )}
                
                {mapping.travel && (
                  <LineChart 
                    title="Travel (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.travel || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#ec4899"
                    compact
                  />
                )}
                
                {mapping.professionalServices && (
                  <LineChart 
                    title="Professional Services (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.professionalServices || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#f472b6"
                    compact
                  />
                )}
                
                {mapping.insurance && (
                  <LineChart 
                    title="Insurance (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.insurance || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#f9a8d4"
                    compact
                  />
                )}
                
                {mapping.ownersBasePay && (
                  <LineChart 
                    title="Owners Base Pay (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.ownersBasePay || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#14b8a6"
                    compact
                  />
                )}
                
                {mapping.ownersRetirement && (
                  <LineChart 
                    title="Owners Retirement (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.ownersRetirement || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#2dd4bf"
                    compact
                  />
                )}
                
                {mapping.contractorsDistribution && (
                  <LineChart 
                    title="Contractors/Distribution (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.contractorsDistribution || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#5eead4"
                    compact
                  />
                )}
                
                {mapping.interestExpense && (
                  <LineChart 
                    title="Interest Expense (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.interestExpense || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#fb7185"
                    compact
                  />
                )}
                
                {mapping.depreciationExpense && (
                  <LineChart 
                    title="Depreciation Expense (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.depreciationExpense || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#fca5a5"
                    compact
                  />
                )}
                
                {mapping.opexOther && (
                  <LineChart 
                    title="OPEX Other (% of Revenue)"
                    data={monthly.map(m => ({ 
                      month: m.month, 
                      value: m.revenue > 0 ? ((m.opexOther || 0) / m.revenue) * 100 : 0 
                    }))}
                    color="#fecaca"
                    compact
                  />
                )}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Financial Score - Introduction View */}
      {currentView === 'fs-intro' && (
        <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '32px' }}>
          <div style={{ background: 'white', borderRadius: '12px', padding: '40px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
            <h1 style={{ fontSize: '36px', fontWeight: '700', color: '#1e293b', marginBottom: '32px', textAlign: 'center' }}>Introduction to the Venturis Financial Score</h1>
            
            <div style={{ fontSize: '16px', color: '#475569', lineHeight: '1.8', maxWidth: '900px', margin: '0 auto' }}>
              <p style={{ marginBottom: '20px' }}>
                We would like to introduce to you the emerging standard score for small and medium businesses. It is called the <strong>Venturis Financial Score (VFS)</strong>. On a scale of 1 to 100, 100 indicates a company that is firing on all cylinders and building value at a steady clip; a score of zero indicates no operations. The scores in between have a lot to say about the general health of any company being measured.
              </p>
              
              <p style={{ marginBottom: '32px' }}>
                The score tells a lot about a company's financial stability and their potential value in the market regardless of specific industry.
              </p>
              
              <div style={{ background: '#f8fafc', borderRadius: '12px', padding: '32px', marginBottom: '32px' }}>
                <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '24px' }}>Approximate Interpretation of Venturis Financial Scores:</h2>
                
                <div style={{ display: 'grid', gap: '20px' }}>
                  <div style={{ background: '#d1fae5', borderRadius: '8px', padding: '20px', border: '2px solid #10b981' }}>
                    <div style={{ fontSize: '20px', fontWeight: '700', color: '#065f46', marginBottom: '12px' }}>70 – 100: Strong Financial Performance</div>
                    <ul style={{ margin: 0, paddingLeft: '20px', color: '#064e3b', fontSize: '15px', lineHeight: '1.6' }}>
                      <li>Good growth and good balance</li>
                      <li>In a good position for considering an M&A transaction</li>
                      <li>Excellent time to expand offerings and invest in R&D</li>
                    </ul>
                  </div>
                  
                  <div style={{ background: '#dbeafe', borderRadius: '8px', padding: '20px', border: '2px solid #3b82f6' }}>
                    <div style={{ fontSize: '20px', fontWeight: '700', color: '#1e40af', marginBottom: '12px' }}>50 – 70: Good Fundamentals</div>
                    <ul style={{ margin: 0, paddingLeft: '20px', color: '#1e3a8a', fontSize: '15px', lineHeight: '1.6' }}>
                      <li>In a good position for revenue growth</li>
                      <li>Needs to focus on bringing costs down as volume grows</li>
                    </ul>
                  </div>
                  
                  <div style={{ background: '#fef3c7', borderRadius: '8px', padding: '20px', border: '2px solid #f59e0b' }}>
                    <div style={{ fontSize: '20px', fontWeight: '700', color: '#92400e', marginBottom: '12px' }}>30 – 50: Basic Problems</div>
                    <ul style={{ margin: 0, paddingLeft: '20px', color: '#78350f', fontSize: '15px', lineHeight: '1.6' }}>
                      <li>Cost structure issues; not in a position to grow</li>
                      <li>Improvements needed in operations and process controls</li>
                      <li>Growth without operating improvements could do significant harm</li>
                    </ul>
                  </div>
                  
                  <div style={{ background: '#fee2e2', borderRadius: '8px', padding: '20px', border: '2px solid #ef4444' }}>
                    <div style={{ fontSize: '20px', fontWeight: '700', color: '#991b1b', marginBottom: '12px' }}>0 – 30: Serious Performance Problems</div>
                    <ul style={{ margin: 0, paddingLeft: '20px', color: '#7f1d1d', fontSize: '15px', lineHeight: '1.6' }}>
                      <li>Problems exist which may not be correctable</li>
                      <li>Some form of major restructuring or liquidation may be best</li>
                    </ul>
                  </div>
                </div>
              </div>
              
              <p style={{ marginBottom: '20px' }}>
                These scores are both <strong>diagnostic</strong> and <strong>prescriptive</strong>. They are diagnostic in that they identify a fundamental level of performance and related potential problems; prescriptive in that they point to specific actions that should be taken to remedy identified problems or take advantage of opportunities.
              </p>
              
              <div style={{ background: '#ede9fe', borderRadius: '12px', padding: '24px', marginTop: '32px' }}>
                <h3 style={{ fontSize: '20px', fontWeight: '600', color: '#5b21b6', marginBottom: '16px' }}>The Overall Score is Based On:</h3>
                <ul style={{ margin: 0, paddingLeft: '20px', color: '#6b21a8', fontSize: '15px', lineHeight: '1.8' }}>
                  <li>Long-term and short-term trends in revenue growth and expense growth</li>
                  <li>Trends in asset and liability growth</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Financial Score Trends View */}
      {currentView === 'fs-score' && selectedCompanyId && trendData.length > 0 && (
        <div style={{ maxWidth: '1400px', margin: '0 auto', padding: '32px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '32px' }}>
            <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', margin: 0 }}>Financial Score Trends</h1>
            {companyName && <div style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b' }}>{companyName}</div>}
          </div>
          
          {monthly.length >= 24 && (
            <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
              <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '24px' }}>Financial Score Analysis</h2>
              
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '20px', marginBottom: '32px' }}>
                <div style={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', borderRadius: '12px', padding: '20px', color: 'white', boxShadow: '0 4px 12px rgba(102,126,234,0.3)' }}>
                  <div style={{ fontSize: '14px', fontWeight: '600', marginBottom: '8px', opacity: 0.9 }}>Venturis Financial Score</div>
                  <div style={{ fontSize: '42px', fontWeight: '700' }}>{finalScore.toFixed(2)}</div>
                </div>
                <div style={{ background: '#f0fdf4', borderRadius: '12px', padding: '20px', border: '2px solid #86efac' }}>
                  <div style={{ fontSize: '14px', fontWeight: '600', color: '#166534', marginBottom: '8px' }}>Profitability Score</div>
                  <div style={{ fontSize: '42px', fontWeight: '700', color: '#10b981' }}>{profitabilityScore.toFixed(2)}</div>
                </div>
                <div style={{ background: '#ede9fe', borderRadius: '12px', padding: '20px', border: '2px solid #c4b5fd' }}>
                  <div style={{ fontSize: '14px', fontWeight: '600', color: '#5b21b6', marginBottom: '8px' }}>Asset Development Score</div>
                  <div style={{ fontSize: '42px', fontWeight: '700', color: '#8b5cf6' }}>{assetDevScore.toFixed(2)}</div>
                </div>
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(220px, 1fr))', gap: '16px' }}>
                <div style={{ background: '#f8fafc', borderRadius: '8px', padding: '16px', border: '1px solid #e2e8f0' }}>
                  <div style={{ fontSize: '12px', fontWeight: '600', color: '#64748b', marginBottom: '4px' }}>Base RGS (24mo)</div>
                  <div style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b' }}>{baseRGS.toFixed(0)}</div>
                  <div style={{ fontSize: '11px', color: '#64748b', marginTop: '4px' }}>Growth: {growth_24mo.toFixed(1)}%</div>
                </div>
                <div style={{ background: '#f8fafc', borderRadius: '8px', padding: '16px', border: '1px solid #e2e8f0' }}>
                  <div style={{ fontSize: '12px', fontWeight: '600', color: '#64748b', marginBottom: '4px' }}>Adjusted RGS (6mo)</div>
                  <div style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b' }}>{adjustedRGS.toFixed(1)}</div>
                  <div style={{ fontSize: '11px', color: '#64748b', marginTop: '4px' }}>Growth: {growth_6mo.toFixed(1)}%</div>
                </div>
                <div style={{ background: '#f8fafc', borderRadius: '8px', padding: '16px', border: '1px solid #e2e8f0' }}>
                  <div style={{ fontSize: '12px', fontWeight: '600', color: '#64748b', marginBottom: '4px' }}>Expense Adjustment</div>
                  <div style={{ fontSize: '24px', fontWeight: '700', color: expenseAdjustment >= 0 ? '#10b981' : '#ef4444' }}>
                    {expenseAdjustment >= 0 ? '+' : ''}{expenseAdjustment}
                  </div>
                  <div style={{ fontSize: '11px', color: '#64748b', marginTop: '4px' }}>
                    {expenseAdjustment > 0 ? '✓ BONUS' : expenseAdjustment < 0 ? '✗ PENALTY' : 'NEUTRAL'}
                  </div>
                </div>
                <div style={{ background: '#f8fafc', borderRadius: '8px', padding: '16px', border: '1px solid #e2e8f0' }}>
                  <div style={{ fontSize: '12px', fontWeight: '600', color: '#64748b', marginBottom: '4px' }}>ALR-1 (Current)</div>
                  <div style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b' }}>{alr1}</div>
                </div>
                <div style={{ background: '#f8fafc', borderRadius: '8px', padding: '16px', border: '1px solid #e2e8f0' }}>
                  <div style={{ fontSize: '12px', fontWeight: '600', color: '#64748b', marginBottom: '4px' }}>ALR Growth %</div>
                  <div style={{ fontSize: '24px', fontWeight: '700', color: alrGrowth >= 0 ? '#10b981' : '#ef4444' }}>
                    {alrGrowth >= 0 ? '+' : ''}{alrGrowth.toFixed(1)}%
                  </div>
                </div>
              </div>
            </div>
          )}
          
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '24px' }}>
            <LineChart title="Financial Score Trend" data={trendData} valueKey="financialScore" color="#667eea" compact />
            <LineChart title="Profitability Score Trend" data={trendData} valueKey="profitabilityScore" color="#10b981" compact />
            <LineChart title="Revenue Growth Score (RGS)" data={trendData} valueKey="rgs" color="#f59e0b" compact />
            <LineChart title="RGS with 6-Month Adjustment" data={trendData} valueKey="rgsAdj" color="#3b82f6" compact />
            <LineChart title="Expense Adjustment" data={trendData} valueKey="expenseAdj" color="#8b5cf6" compact />
            <LineChart title="Asset Development Score (ADS)" data={trendData} valueKey="adsScore" color="#ec4899" compact />
            <LineChart title="ALR-1 (Asset-Liability Ratio)" data={trendData} valueKey="alr1" color="#14b8a6" compact />
            <LineChart title="ALR Growth %" data={trendData} valueKey="alrGrowth" color="#f97316" compact />
          </div>
        </div>
      )}

      {/* Formula Popup Modal */}
      {showFormulaPopup && KPI_FORMULAS[showFormulaPopup] && (
        <div 
          style={{ 
            position: 'fixed', 
            top: 0, 
            left: 0, 
            right: 0, 
            bottom: 0, 
            background: 'rgba(0, 0, 0, 0.5)', 
            zIndex: 9999, 
            display: 'flex', 
            alignItems: 'center', 
            justifyContent: 'center',
            padding: '20px'
          }}
          onClick={() => setShowFormulaPopup(null)}
        >
          <div 
            style={{ 
              background: 'white', 
              borderRadius: '16px', 
              padding: '32px', 
              maxWidth: '600px', 
              width: '100%',
              boxShadow: '0 20px 60px rgba(0,0,0,0.3)',
              maxHeight: '90vh',
              overflowY: 'auto'
            }}
            onClick={(e) => e.stopPropagation()}
          >
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '24px' }}>
              <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', margin: 0 }}>{showFormulaPopup}</h2>
              <button
                onClick={() => setShowFormulaPopup(null)}
                style={{
                  background: 'none',
                  border: 'none',
                  fontSize: '24px',
                  cursor: 'pointer',
                  color: '#94a3b8',
                  padding: '0',
                  lineHeight: 1
                }}
              >
                ×
              </button>
            </div>
            
            <div style={{ marginBottom: '20px' }}>
              <h3 style={{ fontSize: '14px', fontWeight: '600', color: '#64748b', marginBottom: '8px', textTransform: 'uppercase', letterSpacing: '0.05em' }}>Formula</h3>
              <div style={{ 
                background: '#f8fafc', 
                padding: '16px', 
                borderRadius: '8px', 
                fontSize: '18px', 
                fontWeight: '600', 
                color: '#1e293b',
                fontFamily: 'monospace',
                border: '2px solid #e2e8f0'
              }}>
                {KPI_FORMULAS[showFormulaPopup].formula}
              </div>
            </div>
            
            <div style={{ marginBottom: '20px' }}>
              <h3 style={{ fontSize: '14px', fontWeight: '600', color: '#64748b', marginBottom: '8px', textTransform: 'uppercase', letterSpacing: '0.05em' }}>Period Used</h3>
              <div style={{ 
                background: '#ede9fe', 
                padding: '12px 16px', 
                borderRadius: '8px', 
                fontSize: '15px', 
                color: '#5b21b6',
                fontWeight: '600',
                border: '1px solid #d8b4fe'
              }}>
                {KPI_FORMULAS[showFormulaPopup].period}
              </div>
            </div>
            
            <div>
              <h3 style={{ fontSize: '14px', fontWeight: '600', color: '#64748b', marginBottom: '8px', textTransform: 'uppercase', letterSpacing: '0.05em' }}>Description</h3>
              <p style={{ fontSize: '15px', lineHeight: '1.7', color: '#475569', margin: 0 }}>
                {KPI_FORMULAS[showFormulaPopup].description}
              </p>
            </div>
            
            <div style={{ marginTop: '24px', paddingTop: '20px', borderTop: '1px solid #e2e8f0' }}>
              <button
                onClick={() => setShowFormulaPopup(null)}
                style={{
                  width: '100%',
                  padding: '12px',
                  background: '#667eea',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  fontSize: '16px',
                  fontWeight: '600',
                  cursor: 'pointer',
                  transition: 'all 0.2s'
                }}
                onMouseOver={(e) => e.currentTarget.style.background = '#4f46e5'}
                onMouseOut={(e) => e.currentTarget.style.background = '#667eea'}
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}

      {/* KPI Dashboard View */}
      {currentView === 'kpis' && selectedCompanyId && trendData.length > 0 && (
        <div style={{ maxWidth: '1400px', margin: '0 auto', padding: '32px' }}>
          <style>{`
            @media print {
              @page {
                size: letter;
                margin: 0.375in 0.375in 0.75in 0.375in;
              }
              
              /* Hide navigation and UI elements */
              .no-print,
              header,
              nav,
              aside,
              [role="navigation"],
              button {
                display: none !important;
              }
              
              /* Show print header */
              .print-header {
                display: block !important;
              }
              
              /* Scale down charts proportionally and adjust spacing */
              .priority-ratios-print-content > div:last-child {
                display: grid !important;
                grid-template-columns: repeat(2, 1fr) !important;
                gap: 0px !important;
                row-gap: 0px !important;
              }
              
              .priority-ratios-print-content > div:last-child > div {
                transform: scale(0.75);
                transform-origin: top left;
                width: 133%;
                height: 265px;
                overflow: visible;
              }
              
              /* First row */
              .priority-ratios-print-content > div:last-child > div:nth-child(1),
              .priority-ratios-print-content > div:last-child > div:nth-child(2) {
                margin-bottom: 0px;
              }
              
              /* Second row */
              .priority-ratios-print-content > div:last-child > div:nth-child(3),
              .priority-ratios-print-content > div:last-child > div:nth-child(4) {
                margin-bottom: 0px;
              }
              
              /* Third row */
              .priority-ratios-print-content > div:last-child > div:nth-child(5),
              .priority-ratios-print-content > div:last-child > div:nth-child(6) {
                margin-bottom: 0;
              }
            }
            
            .print-header {
              display: none;
            }
          `}</style>
          <div className="no-print" style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '32px' }}>
            <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', margin: 0 }}>KPI Dashboard</h1>
            {companyName && <div style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b' }}>{companyName}</div>}
          </div>
          
          {/* Benchmark Status Indicator */}
          {benchmarks.length > 0 ? (
            <div className="no-print" style={{ background: '#d1fae5', border: '1px solid #10b981', borderRadius: '8px', padding: '12px', marginBottom: '24px', fontSize: '13px', color: '#065f46' }}>
              ✓ Industry benchmarks loaded: {benchmarks.length} metrics for {benchmarks[0]?.industryName || 'Unknown Industry'} ({benchmarks[0]?.assetSizeCategory || 'N/A'})
            </div>
          ) : (
            <div className="no-print" style={{ background: '#fef2f2', border: '1px solid #ef4444', borderRadius: '8px', padding: '12px', marginBottom: '24px', fontSize: '13px', color: '#991b1b' }}>
              ⚠ No industry benchmarks loaded. {!getCurrentCompany()?.industrySector ? 'Please set the industry sector in Company Details.' : 'Benchmarks may not be available for this industry.'}
            </div>
          )}

          {/* Tab Navigation */}
          <div className="no-print" style={{ display: 'flex', gap: '8px', marginBottom: '32px', borderBottom: '2px solid #e2e8f0' }}>
            <button
              onClick={() => setKpiDashboardTab('all-ratios')}
              style={{
                padding: '12px 24px',
                background: kpiDashboardTab === 'all-ratios' ? '#667eea' : 'transparent',
                color: kpiDashboardTab === 'all-ratios' ? 'white' : '#64748b',
                border: 'none',
                borderBottom: kpiDashboardTab === 'all-ratios' ? '3px solid #667eea' : '3px solid transparent',
                fontSize: '16px',
                fontWeight: '600',
                cursor: 'pointer',
                borderRadius: '8px 8px 0 0',
                transition: 'all 0.2s'
              }}
            >
              All Ratios
            </button>
            <button
              onClick={() => setKpiDashboardTab('priority-ratios')}
              style={{
                padding: '12px 24px',
                background: kpiDashboardTab === 'priority-ratios' ? '#667eea' : 'transparent',
                color: kpiDashboardTab === 'priority-ratios' ? 'white' : '#64748b',
                border: 'none',
                borderBottom: kpiDashboardTab === 'priority-ratios' ? '3px solid #667eea' : '3px solid transparent',
                fontSize: '16px',
                fontWeight: '600',
                cursor: 'pointer',
                borderRadius: '8px 8px 0 0',
                transition: 'all 0.2s'
              }}
            >
              Priority Ratios
            </button>
          </div>

          {/* All Ratios Tab */}
          {kpiDashboardTab === 'all-ratios' && (
            <>
              <div style={{ marginBottom: '32px' }}>
                <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '16px' }}>Liquidity Ratios</h2>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '20px' }}>
                  <LineChart title="Current Ratio" data={trendData} valueKey="currentRatio" color="#10b981" compact benchmarkValue={getBenchmarkValue(benchmarks, 'Current Ratio')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Current Ratio')} />
                  <LineChart title="Quick Ratio" data={trendData} valueKey="quickRatio" color="#14b8a6" compact benchmarkValue={getBenchmarkValue(benchmarks, 'Quick Ratio')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Quick Ratio')} />
                </div>
              </div>

              <div style={{ marginBottom: '32px' }}>
                <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '16px' }}>Activity Ratios</h2>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '20px' }}>
                  <LineChart title="Inventory Turnover" data={trendData} valueKey="invTurnover" color="#f59e0b" compact benchmarkValue={getBenchmarkValue(benchmarks, 'Inventory Turnover')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Inventory Turnover')} />
                  <LineChart title="Receivables Turnover" data={trendData} valueKey="arTurnover" color="#f97316" compact benchmarkValue={getBenchmarkValue(benchmarks, 'Receivables Turnover')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Receivables Turnover')} />
                  <LineChart title="Payables Turnover" data={trendData} valueKey="apTurnover" color="#ef4444" compact benchmarkValue={getBenchmarkValue(benchmarks, 'Payables Turnover')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Payables Turnover')} />
                  <LineChart title="Days' Inventory" data={trendData} valueKey="daysInv" color="#fbbf24" compact benchmarkValue={getBenchmarkValue(benchmarks, 'Days Inventory')} formatter={(v) => v.toFixed(0)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Days\' Inventory')} />
                  <LineChart title="Days' Receivables" data={trendData} valueKey="daysAR" color="#fb923c" compact benchmarkValue={getBenchmarkValue(benchmarks, 'Days Receivables')} formatter={(v) => v.toFixed(0)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Days\' Receivables')} />
                  <LineChart title="Days' Payables" data={trendData} valueKey="daysAP" color="#f87171" compact benchmarkValue={getBenchmarkValue(benchmarks, 'Days Payables')} formatter={(v) => v.toFixed(0)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Days\' Payables')} />
                  <LineChart title="Sales/Working Capital" data={trendData} valueKey="salesWC" color="#06b6d4" compact benchmarkValue={getBenchmarkValue(benchmarks, 'Sales/Working Capital')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Sales/Working Capital')} />
                </div>
              </div>

              <div style={{ marginBottom: '32px' }}>
                <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '16px' }}>Coverage Ratios</h2>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '20px' }}>
                  <LineChart title="Interest Coverage" data={trendData} valueKey="interestCov" color="#8b5cf6" compact benchmarkValue={getBenchmarkValue(benchmarks, 'Interest Coverage')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Interest Coverage')} />
                  <LineChart title="Debt Service Coverage" data={trendData} valueKey="debtSvcCov" color="#a78bfa" compact benchmarkValue={getBenchmarkValue(benchmarks, 'Debt Service Coverage')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Debt Service Coverage')} />
                  <LineChart title="Cash Flow to Debt" data={trendData} valueKey="cfToDebt" color="#c4b5fd" compact benchmarkValue={getBenchmarkValue(benchmarks, 'Cash Flow to Debt')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Cash Flow to Debt')} />
                </div>
              </div>

              <div style={{ marginBottom: '32px' }}>
                <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '16px' }}>Leverage Ratios</h2>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '20px' }}>
                  <LineChart title="Debt/Net Worth" data={trendData} valueKey="debtToNW" color="#ec4899" compact benchmarkValue={getBenchmarkValue(benchmarks, 'Debt/Net Worth')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Debt/Net Worth')} />
                  <LineChart title="Fixed Assets/Net Worth" data={trendData} valueKey="fixedToNW" color="#f472b6" compact benchmarkValue={getBenchmarkValue(benchmarks, 'Fixed Assets/Net Worth')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Fixed Assets/Net Worth')} />
                  <LineChart title="Leverage Ratio" data={trendData} valueKey="leverage" color="#f9a8d4" compact benchmarkValue={getBenchmarkValue(benchmarks, 'Leverage Ratio')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Leverage Ratio')} />
                </div>
              </div>

              <div style={{ marginBottom: '32px' }}>
                <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '16px' }}>Operating Ratios</h2>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '20px' }}>
                  <LineChart title="Total Asset Turnover" data={trendData} valueKey="totalAssetTO" color="#3b82f6" compact benchmarkValue={getBenchmarkValue(benchmarks, 'Total Asset Turnover')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Total Asset Turnover')} />
                  <LineChart title="Return on Equity (ROE)" data={trendData} valueKey="roe" color="#60a5fa" compact benchmarkValue={getBenchmarkValue(benchmarks, 'ROE')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Return on Equity (ROE)')} />
                  <LineChart title="Return on Assets (ROA)" data={trendData} valueKey="roa" color="#93c5fd" compact benchmarkValue={getBenchmarkValue(benchmarks, 'ROA')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('Return on Assets (ROA)')} />
                  <LineChart title="EBITDA Margin" data={trendData} valueKey="ebitdaMargin" color="#2563eb" compact benchmarkValue={getBenchmarkValue(benchmarks, 'EBITDA/Revenue')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('EBITDA Margin')} />
                  <LineChart title="EBIT Margin" data={trendData} valueKey="ebitMargin" color="#1e40af" compact benchmarkValue={getBenchmarkValue(benchmarks, 'EBIT/Revenue')} formatter={(v) => v.toFixed(1)} showFormulaButton onFormulaClick={() => setShowFormulaPopup('EBIT Margin')} />
                </div>
              </div>
            </>
          )}

          {/* Priority Ratios Tab */}
          {kpiDashboardTab === 'priority-ratios' && (
            <div>
              <div className="no-print" style={{ marginBottom: '24px', padding: '20px', background: '#f8fafc', borderRadius: '12px', border: '1px solid #e2e8f0' }}>
                <h3 style={{ fontSize: '18px', fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>Customize Your Priority Ratios</h3>
                <p style={{ fontSize: '14px', color: '#64748b', marginBottom: '16px' }}>
                  Select up to 6 ratios to track as your priority KPIs. These selections will be saved and persist across sessions.
                </p>
                {/* Updated layout - more compact and horizontal */}
                
                <div style={{ display: 'flex', flexWrap: 'wrap', gap: '12px', marginBottom: '16px' }}>
                  {Object.entries(ratioCategories).map(([category, ratios]) => (
                    <div key={category} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                      <label style={{ fontSize: '12px', fontWeight: '600', color: '#374151', whiteSpace: 'nowrap' }}>
                        {category}:
                      </label>
                      <select
                        value={priorityRatios.find(ratio => ratios.includes(ratio)) || ''}
                        onChange={(e) => {
                          const newRatio = e.target.value;
                          if (newRatio) {
                            const currentRatioFromCategory = priorityRatios.find(ratio => ratios.includes(ratio));
                            if (currentRatioFromCategory) {
                              // Replace existing ratio from this category
                              setPriorityRatios(prev => prev.map(ratio => 
                                ratio === currentRatioFromCategory ? newRatio : ratio
                              ));
                            } else if (priorityRatios.length < 6) {
                              // Add new ratio if under limit
                              setPriorityRatios(prev => [...prev, newRatio]);
                            } else {
                              alert('Maximum of 6 priority ratios allowed. Please remove one first.');
                            }
                          }
                        }}
                        style={{
                          padding: '6px 8px',
                          border: '1px solid #d1d5db',
                          borderRadius: '4px',
                          fontSize: '12px',
                          background: 'white',
                          minWidth: '140px'
                        }}
                      >
                        <option value="">Select...</option>
                        {ratios.map(ratio => (
                          <option key={ratio} value={ratio}>
                            {ratio}
                          </option>
                        ))}
                      </select>
                    </div>
                  ))}
                </div>

                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <div style={{ fontSize: '12px', color: '#64748b' }}>
                    Selected: {priorityRatios.length}/6 ratios
                  </div>
                  <button
                    onClick={savePriorityRatios}
                    style={{
                      padding: '6px 12px',
                      background: '#667eea',
                      color: 'white',
                      border: 'none',
                      borderRadius: '4px',
                      fontSize: '12px',
                      fontWeight: '600',
                      cursor: 'pointer'
                    }}
                  >
                    Save
                  </button>
                </div>
              </div>

              {/* Display Selected Priority Ratios */}
              {priorityRatios.length > 0 && (
                <div>
                  <div className="no-print" style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
                    <h3 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', margin: 0 }}>
                      Your Priority Ratios ({priorityRatios.length}/6)
                    </h3>
                    <button
                      onClick={() => window.print()}
                      style={{
                        padding: '10px 20px',
                        background: '#10b981',
                        color: 'white',
                        border: 'none',
                        borderRadius: '8px',
                        fontSize: '14px',
                        fontWeight: '600',
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '8px'
                      }}
                    >
                      🖨️ Print Priority Ratios
                    </button>
                  </div>
                  <div className="priority-ratios-print-content">
                    <div className="print-header" style={{ display: 'none' }}>
                      <h1 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '24px', marginTop: '0', textAlign: 'center' }}>
                        Priority Ratios {companyName && `- ${companyName}`}
                      </h1>
                    </div>
                    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '20px' }}>
                    {priorityRatios.map((ratio, index) => (
                      <div key={ratio} style={{ position: 'relative' }}>
                        <LineChart
                          title={ratio}
                          data={trendData}
                          valueKey={getRatioValueKey(ratio)}
                          color={getRatioColor(ratio)}
                          compact
                          benchmarkValue={getBenchmarkValue(benchmarks, ratio)}
                          formatter={getRatioFormatter(ratio)}
                          showFormulaButton
                          onFormulaClick={() => setShowFormulaPopup(ratio)}
                        />
                        <button
                          onClick={() => setPriorityRatios(prev => prev.filter((_, i) => i !== index))}
                          className="no-print"
                          style={{
                            position: 'absolute',
                            top: '8px',
                            right: '8px',
                            background: '#ef4444',
                            color: 'white',
                            border: 'none',
                            borderRadius: '50%',
                            width: '24px',
                            height: '24px',
                            fontSize: '12px',
                            cursor: 'pointer',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center'
                          }}
                        >
                          ×
                        </button>
                      </div>
                    ))}
                    </div>
                  </div>
                </div>
              )}

              {priorityRatios.length === 0 && (
                <div style={{ textAlign: 'center', padding: '60px', color: '#64748b' }}>
                  <div style={{ fontSize: '48px', marginBottom: '16px' }}>📊</div>
                  <h3 style={{ fontSize: '20px', fontWeight: '600', marginBottom: '8px' }}>No Priority Ratios Selected</h3>
                  <p>Select ratios from the dropdowns above to create your custom KPI dashboard.</p>
                </div>
              )}
            </div>
          )}
        </div>
      )}

      {/* MD&A View */}
      {currentView === 'mda' && selectedCompanyId && trendData.length > 0 && (
        <div style={{ maxWidth: '1400px', margin: '0 auto', padding: '32px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '32px' }}>
            <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', margin: 0 }}>Management Discussion & Analysis</h1>
            {companyName && <div style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b' }}>{companyName}</div>}
          </div>
          
          {/* Tab Navigation */}
          <div style={{ display: 'flex', gap: '8px', marginBottom: '24px', borderBottom: '2px solid #e2e8f0' }}>
            <button
              onClick={() => setMdaTab('executive-summary')}
              style={{
                padding: '12px 24px',
                background: mdaTab === 'executive-summary' ? '#667eea' : 'transparent',
                color: mdaTab === 'executive-summary' ? 'white' : '#64748b',
                border: 'none',
                borderBottom: mdaTab === 'executive-summary' ? '3px solid #667eea' : '3px solid transparent',
                fontSize: '16px',
                fontWeight: '600',
                cursor: 'pointer',
                borderRadius: '8px 8px 0 0',
                transition: 'all 0.2s'
              }}
            >
              Executive Summary
            </button>
            <button
              onClick={() => setMdaTab('strengths-insights')}
              style={{
                padding: '12px 24px',
                background: mdaTab === 'strengths-insights' ? '#667eea' : 'transparent',
                color: mdaTab === 'strengths-insights' ? 'white' : '#64748b',
                border: 'none',
                borderBottom: mdaTab === 'strengths-insights' ? '3px solid #667eea' : '3px solid transparent',
                fontSize: '16px',
                fontWeight: '600',
                cursor: 'pointer',
                borderRadius: '8px 8px 0 0',
                transition: 'all 0.2s'
              }}
            >
              Strengths and Insights
            </button>
            <button
              onClick={() => setMdaTab('key-metrics')}
              style={{
                padding: '12px 24px',
                background: mdaTab === 'key-metrics' ? '#667eea' : 'transparent',
                color: mdaTab === 'key-metrics' ? 'white' : '#64748b',
                border: 'none',
                borderBottom: mdaTab === 'key-metrics' ? '3px solid #667eea' : '3px solid transparent',
                fontSize: '16px',
                fontWeight: '600',
                cursor: 'pointer',
                borderRadius: '8px 8px 0 0',
                transition: 'all 0.2s'
              }}
            >
              Critical Review Items
            </button>
          </div>

          {/* Executive Summary Tab */}
          {mdaTab === 'executive-summary' && (
          <div style={{ background: 'white', borderRadius: '12px', padding: '32px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
            <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '24px', borderBottom: '2px solid #e2e8f0', paddingBottom: '12px' }}>Executive Summary</h2>
            
            {/* Overview Metrics */}
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(4, 1fr)', gap: '16px', marginBottom: '32px', padding: '20px', background: '#f8fafc', borderRadius: '8px' }}>
              <div style={{ textAlign: 'center' }}>
                <div style={{ fontSize: '12px', color: '#64748b', marginBottom: '4px', fontWeight: '600' }}>Financial Score</div>
                <div style={{ fontSize: '28px', fontWeight: '700', color: finalScore >= 70 ? '#10b981' : finalScore >= 50 ? '#f59e0b' : '#ef4444' }}>{finalScore.toFixed(1)}</div>
                <div style={{ fontSize: '11px', color: '#94a3b8' }}>Overall Health</div>
              </div>
              <div style={{ textAlign: 'center' }}>
                <div style={{ fontSize: '12px', color: '#64748b', marginBottom: '4px', fontWeight: '600' }}>24-Mo Growth</div>
                <div style={{ fontSize: '28px', fontWeight: '700', color: growth_24mo > 10 ? '#10b981' : growth_24mo > 0 ? '#f59e0b' : '#ef4444' }}>{growth_24mo.toFixed(1)}%</div>
                <div style={{ fontSize: '11px', color: '#94a3b8' }}>Revenue Trend</div>
              </div>
              <div style={{ textAlign: 'center' }}>
                <div style={{ fontSize: '12px', color: '#64748b', marginBottom: '4px', fontWeight: '600' }}>Current Ratio</div>
                <div style={{ fontSize: '28px', fontWeight: '700', color: trendData[trendData.length - 1]?.currentRatio >= 1.5 ? '#10b981' : trendData[trendData.length - 1]?.currentRatio >= 1.0 ? '#f59e0b' : '#ef4444' }}>
                  {trendData[trendData.length - 1]?.currentRatio?.toFixed(1)}
                </div>
                <div style={{ fontSize: '11px', color: '#94a3b8' }}>Liquidity</div>
              </div>
              <div style={{ textAlign: 'center' }}>
                <div style={{ fontSize: '12px', color: '#64748b', marginBottom: '4px', fontWeight: '600' }}>Benchmarks</div>
                <div style={{ fontSize: '28px', fontWeight: '700', color: benchmarks.length > 0 ? '#667eea' : '#94a3b8' }}>{benchmarks.length}</div>
                <div style={{ fontSize: '11px', color: '#94a3b8' }}>Available</div>
              </div>
            </div>

            {/* Comprehensive Analysis Narrative */}
            <div style={{ marginBottom: '28px' }}>
              <h3 style={{ fontSize: '18px', fontWeight: '600', color: '#1e293b', marginBottom: '16px', display: 'flex', alignItems: 'center', gap: '8px' }}>
                <span style={{ fontSize: '20px' }}>📊</span> Financial Performance Overview
              </h3>
              <div style={{ fontSize: '15px', lineHeight: '1.8', color: '#475569', background: '#f8fafc', padding: '20px', borderRadius: '8px', borderLeft: '4px solid #667eea' }}>
                <p style={{ margin: '0 0 12px 0' }}>
                  {companyName || 'The company'} has achieved a Financial Score of <strong style={{ color: '#1e293b' }}>{finalScore.toFixed(1)}</strong>, indicating <strong>{finalScore >= 70 ? 'strong' : finalScore >= 50 ? 'moderate' : 'developing'}</strong> overall financial health. 
                  The analysis encompasses {monthly.length} months of financial data, providing comprehensive insights into operational performance, liquidity position, and strategic positioning.
                </p>
                <p style={{ margin: '12px 0 0 0' }}>
                  Over the past 24 months, revenue has {growth_24mo > 0 ? 'grown' : 'declined'} by <strong style={{ color: growth_24mo > 0 ? '#10b981' : '#ef4444' }}>{Math.abs(growth_24mo).toFixed(1)}%</strong>, 
                  with profitability score of <strong style={{ color: '#1e293b' }}>{profitabilityScore.toFixed(1)}</strong> and asset development score of <strong style={{ color: '#1e293b' }}>{assetDevScore.toFixed(1)}</strong>. 
                  {benchmarks.length > 0 ? ` Industry benchmark comparisons against ${benchmarks.length} metrics reveal ${mdaAnalysis.strengths.filter((s: string) => s.includes('industry')).length} areas of superior performance and ${mdaAnalysis.weaknesses.filter((w: string) => w.includes('industry')).length} opportunities for improvement relative to industry peers.` : ''}
                </p>
              </div>
            </div>
            
            <div style={{ marginBottom: '24px' }}>
              <h3 style={{ fontSize: '18px', fontWeight: '600', color: '#10b981', marginBottom: '12px', display: 'flex', alignItems: 'center', gap: '8px' }}>
                <span style={{ fontSize: '20px' }}>✓</span> Key Strengths & Competitive Advantages
              </h3>
              <div style={{ fontSize: '15px', lineHeight: '1.8', color: '#1e293b' }}>
                {mdaAnalysis.strengths.length > 0 ? (
                  <ul style={{ margin: 0, paddingLeft: '24px' }}>
                    {mdaAnalysis.strengths.map((str: string, idx: number) => (
                      <li key={idx} style={{ marginBottom: '8px' }}>{str}</li>
                    ))}
                  </ul>
                ) : (
                  <p style={{ margin: 0, color: '#64748b' }}>The company is showing stable financial performance across key metrics. Continued monitoring will help identify emerging strengths.</p>
                )}
              </div>
            </div>

            <div style={{ marginBottom: '24px' }}>
              <h3 style={{ fontSize: '18px', fontWeight: '600', color: '#ef4444', marginBottom: '12px', display: 'flex', alignItems: 'center', gap: '8px' }}>
                <span style={{ fontSize: '20px' }}>⚠</span> Areas Requiring Management Attention
              </h3>
              <div style={{ fontSize: '15px', lineHeight: '1.8', color: '#1e293b' }}>
                {mdaAnalysis.weaknesses.length > 0 ? (
                  <ul style={{ margin: 0, paddingLeft: '24px' }}>
                    {mdaAnalysis.weaknesses.map((weak: string, idx: number) => (
                      <li key={idx} style={{ marginBottom: '8px' }}>{weak}</li>
                    ))}
                  </ul>
                ) : (
                  <p style={{ margin: 0, color: '#64748b' }}>Continue monitoring key financial indicators to maintain current performance levels and identify potential challenges early.</p>
                )}
              </div>
            </div>

            <div>
              <h3 style={{ fontSize: '18px', fontWeight: '600', color: '#667eea', marginBottom: '12px', display: 'flex', alignItems: 'center', gap: '8px' }}>
                <span style={{ fontSize: '20px' }}>💡</span> Strategic Recommendations & Action Items
              </h3>
              <div style={{ fontSize: '15px', lineHeight: '1.8', color: '#1e293b' }}>
                {mdaAnalysis.insights.length > 0 ? (
                  <ul style={{ margin: 0, paddingLeft: '24px' }}>
                    {mdaAnalysis.insights.map((ins: string, idx: number) => (
                      <li key={idx} style={{ marginBottom: '8px' }}>{ins}</li>
                    ))}
                  </ul>
                ) : (
                  <p style={{ margin: 0, color: '#64748b' }}>Regular review of financial metrics and strategic planning will support continued growth and financial stability.</p>
                )}
              </div>
            </div>
          </div>
          )}

          {/* Strengths and Insights Tab */}
          {mdaTab === 'strengths-insights' && (
          <div style={{ display: 'grid', gap: '24px' }}>
            {mdaAnalysis.strengths.length > 0 && (
              <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                <h3 style={{ fontSize: '20px', fontWeight: '600', color: '#10b981', marginBottom: '16px', display: 'flex', alignItems: 'center', gap: '8px' }}>
                  <span style={{ fontSize: '24px' }}>✓</span> Strengths
                </h3>
                <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>
                  {mdaAnalysis.strengths.map((str, idx) => (
                    <li key={idx} style={{ padding: '12px 16px', background: '#f0fdf4', borderRadius: '8px', marginBottom: '8px', borderLeft: '4px solid #10b981', fontSize: '14px', color: '#166534' }}>{str}</li>
                  ))}
                </ul>
              </div>
            )}

            {mdaAnalysis.weaknesses.length > 0 && (
              <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                <h3 style={{ fontSize: '20px', fontWeight: '600', color: '#ef4444', marginBottom: '16px', display: 'flex', alignItems: 'center', gap: '8px' }}>
                  <span style={{ fontSize: '24px' }}>⚠</span> Areas for Improvement
                </h3>
                <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>
                  {mdaAnalysis.weaknesses.map((weak, idx) => (
                    <li key={idx} style={{ padding: '12px 16px', background: '#fef2f2', borderRadius: '8px', marginBottom: '8px', borderLeft: '4px solid #ef4444', fontSize: '14px', color: '#991b1b' }}>{weak}</li>
                  ))}
                </ul>
              </div>
            )}

            {mdaAnalysis.insights.length > 0 && (
              <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                <h3 style={{ fontSize: '20px', fontWeight: '600', color: '#667eea', marginBottom: '16px', display: 'flex', alignItems: 'center', gap: '8px' }}>
                  <span style={{ fontSize: '24px' }}>💡</span> Strategic Insights
                </h3>
                <ul style={{ listStyle: 'none', padding: 0, margin: 0 }}>
                  {mdaAnalysis.insights.map((ins, idx) => (
                    <li key={idx} style={{ padding: '12px 16px', background: '#ede9fe', borderRadius: '8px', marginBottom: '8px', borderLeft: '4px solid #667eea', fontSize: '14px', color: '#5b21b6' }}>{ins}</li>
                  ))}
                </ul>
              </div>
            )}
          </div>
          )}

          {/* Critical Review Items Tab */}
          {mdaTab === 'key-metrics' && monthly.length >= 12 && (
          <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
            <h2 style={{ fontSize: '28px', fontWeight: '700', color: '#1e293b', marginBottom: '24px', borderBottom: '3px solid #ef4444', paddingBottom: '12px' }}>
              ⚠️ Critical Review Items
            </h2>
            
            <p style={{ fontSize: '15px', color: '#64748b', marginBottom: '32px', lineHeight: '1.6' }}>
              This analysis reviews all financial data across Trend Analysis, KPI Dashboard, Working Capital, and Cash Flow to identify issues requiring immediate attention.
            </p>

            {(() => {
              const issues: { category: string; severity: 'high' | 'medium' | 'low'; title: string; description: string; metric?: string }[] = [];
              const last = monthly[monthly.length - 1];
              const prev = monthly.length >= 2 ? monthly[monthly.length - 2] : last;
              const last12 = monthly.slice(-12);
              const prev12 = monthly.length >= 24 ? monthly.slice(-24, -12) : last12;

              // === REVENUE TREND ANALYSIS ===
              const revenueGrowth12mo = prev12.length > 0 ? 
                ((last12.reduce((s, m) => s + m.revenue, 0) - prev12.reduce((s, m) => s + m.revenue, 0)) / prev12.reduce((s, m) => s + m.revenue, 0)) * 100 : 0;
              
              if (revenueGrowth12mo < -5) {
                issues.push({
                  category: 'Revenue Trends',
                  severity: 'high',
                  title: 'Declining Revenue',
                  description: `Revenue has declined by ${Math.abs(revenueGrowth12mo).toFixed(1)}% over the past 12 months. This indicates potential market share loss, pricing pressure, or customer attrition.`,
                  metric: `${revenueGrowth12mo.toFixed(1)}%`
                });
              }

              // Check revenue volatility
              const revenueStdDev = (() => {
                const mean = last12.reduce((s, m) => s + m.revenue, 0) / last12.length;
                const variance = last12.reduce((s, m) => s + Math.pow(m.revenue - mean, 2), 0) / last12.length;
                return Math.sqrt(variance);
              })();
              const revenueCV = (revenueStdDev / (last12.reduce((s, m) => s + m.revenue, 0) / last12.length)) * 100;
              
              if (revenueCV > 25) {
                issues.push({
                  category: 'Revenue Trends',
                  severity: 'medium',
                  title: 'High Revenue Volatility',
                  description: `Revenue shows high volatility (${revenueCV.toFixed(1)}% coefficient of variation). This indicates inconsistent sales performance and unpredictable cash flow.`,
                  metric: `${revenueCV.toFixed(1)}% CV`
                });
              }

              // === EXPENSE ANALYSIS ===
              const expenseGrowth12mo = prev12.length > 0 ?
                ((last12.reduce((s, m) => s + m.expense, 0) - prev12.reduce((s, m) => s + m.expense, 0)) / prev12.reduce((s, m) => s + m.expense, 0)) * 100 : 0;
              
              if (expenseGrowth12mo > revenueGrowth12mo + 5) {
                issues.push({
                  category: 'Expense Control',
                  severity: 'high',
                  title: 'Expenses Growing Faster Than Revenue',
                  description: `Expenses have grown ${expenseGrowth12mo.toFixed(1)}% while revenue grew ${revenueGrowth12mo.toFixed(1)}%. This margin compression threatens profitability and requires immediate cost control measures.`,
                  metric: `${(expenseGrowth12mo - revenueGrowth12mo).toFixed(1)}% gap`
                });
              }

              // Expense as % of revenue trending
              const expenseRatio = (last.expense / last.revenue) * 100;
              const prevExpenseRatio = prev12.length > 0 ? (prev12.reduce((s, m) => s + m.expense, 0) / prev12.reduce((s, m) => s + m.revenue, 0)) * 100 : expenseRatio;
              
              if (expenseRatio > 90) {
                issues.push({
                  category: 'Expense Control',
                  severity: 'high',
                  title: 'Extremely High Expense Ratio',
                  description: `Total expenses represent ${expenseRatio.toFixed(1)}% of revenue, leaving minimal profit margin. The business is operating near break-even or at a loss.`,
                  metric: `${expenseRatio.toFixed(1)}%`
                });
              } else if (expenseRatio - prevExpenseRatio > 5) {
                issues.push({
                  category: 'Expense Control',
                  severity: 'medium',
                  title: 'Rising Expense Ratio',
                  description: `Expenses as a percentage of revenue have increased from ${prevExpenseRatio.toFixed(1)}% to ${expenseRatio.toFixed(1)}%, indicating deteriorating operational efficiency.`,
                  metric: `+${(expenseRatio - prevExpenseRatio).toFixed(1)}%`
                });
              }

              // === LIQUIDITY & RATIOS ===
              if (last.currentRatio < 1.0) {
                issues.push({
                  category: 'Liquidity',
                  severity: 'high',
                  title: 'Critical Liquidity Position',
                  description: `Current ratio of ${last.currentRatio.toFixed(2)} indicates current liabilities exceed current assets. The company may struggle to meet short-term obligations.`,
                  metric: `${last.currentRatio.toFixed(2)}`
                });
              } else if (last.currentRatio < 1.2) {
                issues.push({
                  category: 'Liquidity',
                  severity: 'medium',
                  title: 'Weak Liquidity Position',
                  description: `Current ratio of ${last.currentRatio.toFixed(2)} is below the healthy threshold of 1.5, indicating potential difficulty covering short-term obligations.`,
                  metric: `${last.currentRatio.toFixed(2)}`
                });
              }

              // Quick ratio
              if (last.quickRatio < 0.8) {
                issues.push({
                  category: 'Liquidity',
                  severity: last.quickRatio < 0.5 ? 'high' : 'medium',
                  title: 'Poor Quick Ratio',
                  description: `Quick ratio of ${last.quickRatio.toFixed(2)} shows the company cannot cover current liabilities with liquid assets. Heavy reliance on inventory or other less liquid assets.`,
                  metric: `${last.quickRatio.toFixed(2)}`
                });
              }

              // Debt ratios
              const debtToEquity = last.totalEquity > 0 ? last.totalLiab / last.totalEquity : 999;
              if (debtToEquity > 2.0) {
                issues.push({
                  category: 'Leverage',
                  severity: 'high',
                  title: 'High Debt Leverage',
                  description: `Debt-to-equity ratio of ${debtToEquity.toFixed(2)} indicates the company is heavily leveraged. High debt levels increase financial risk and interest expenses.`,
                  metric: `${debtToEquity.toFixed(2)}x`
                });
              }

              const debtRatio = last.totalAssets > 0 ? (last.totalLiab / last.totalAssets) * 100 : 0;
              if (debtRatio > 70) {
                issues.push({
                  category: 'Leverage',
                  severity: 'medium',
                  title: 'High Debt Ratio',
                  description: `${debtRatio.toFixed(1)}% of assets are financed by debt, indicating high financial leverage and potential vulnerability to economic downturns.`,
                  metric: `${debtRatio.toFixed(1)}%`
                });
              }

              // === PROFITABILITY ===
              const netMargin = last.revenue > 0 ? ((last.revenue - last.expense) / last.revenue) * 100 : 0;
              if (netMargin < 0) {
                issues.push({
                  category: 'Profitability',
                  severity: 'high',
                  title: 'Operating at a Loss',
                  description: `Net margin of ${netMargin.toFixed(1)}% indicates the company is losing money on operations. Immediate action required to restore profitability.`,
                  metric: `${netMargin.toFixed(1)}%`
                });
              } else if (netMargin < 5) {
                issues.push({
                  category: 'Profitability',
                  severity: 'medium',
                  title: 'Thin Profit Margins',
                  description: `Net margin of ${netMargin.toFixed(1)}% provides little buffer for unexpected costs or revenue shortfalls. Margin improvement strategies should be prioritized.`,
                  metric: `${netMargin.toFixed(1)}%`
                });
              }

              // ROE
              if (last.roe < 0) {
                issues.push({
                  category: 'Profitability',
                  severity: 'high',
                  title: 'Negative Return on Equity',
                  description: `ROE of ${(last.roe * 100).toFixed(1)}% indicates the company is destroying shareholder value. Equity holders are receiving negative returns.`,
                  metric: `${(last.roe * 100).toFixed(1)}%`
                });
              } else if (last.roe < 0.05) {
                issues.push({
                  category: 'Profitability',
                  severity: 'medium',
                  title: 'Low Return on Equity',
                  description: `ROE of ${(last.roe * 100).toFixed(1)}% is below typical market returns. Shareholders could achieve better returns elsewhere.`,
                  metric: `${(last.roe * 100).toFixed(1)}%`
                });
              }

              // === WORKING CAPITAL ===
              const workingCapital = last.tca - last.tcl;
              const wcRatio = last.revenue > 0 ? (workingCapital / (last.revenue / 12)) * 100 : 0;
              
              if (workingCapital < 0) {
                issues.push({
                  category: 'Working Capital',
                  severity: 'high',
                  title: 'Negative Working Capital',
                  description: `Working capital of $${workingCapital.toLocaleString()} indicates current liabilities exceed current assets. This creates immediate cash flow pressure and operational constraints.`,
                  metric: `$${workingCapital.toLocaleString()}`
                });
              }

              // Days Sales Outstanding
              const dso = last.revenue > 0 ? (last.ar / (last.revenue / 365)) : 0;
              if (dso > 60) {
                issues.push({
                  category: 'Working Capital',
                  severity: 'medium',
                  title: 'Slow Accounts Receivable Collection',
                  description: `Days Sales Outstanding of ${dso.toFixed(0)} days indicates slow customer payments. This ties up cash and may signal credit quality issues.`,
                  metric: `${dso.toFixed(0)} days`
                });
              }

              // Days Payable Outstanding
              const dpo = last.expense > 0 ? (last.ap / (last.expense / 365)) : 0;
              if (dpo > 90) {
                issues.push({
                  category: 'Working Capital',
                  severity: 'medium',
                  title: 'Extended Payment Terms to Suppliers',
                  description: `Days Payable Outstanding of ${dpo.toFixed(0)} days may indicate cash flow stress, causing the company to delay supplier payments.`,
                  metric: `${dpo.toFixed(0)} days`
                });
              }

              // === CASH FLOW (if we have the data) ===
              const netIncome = last.revenue - last.expense;
              const workingCapitalChange = monthly.length >= 2 ? (last.tca - last.tcl) - (prev.tca - prev.tcl) : 0;
              const estimatedOCF = netIncome - workingCapitalChange;
              
              if (estimatedOCF < 0 && netIncome > 0) {
                issues.push({
                  category: 'Cash Flow',
                  severity: 'high',
                  title: 'Negative Operating Cash Flow Despite Profits',
                  description: `While showing accounting profits, the company is consuming cash in operations (estimated -$${Math.abs(estimatedOCF).toLocaleString()}). This often results from working capital build-up or non-cash revenue.`,
                  metric: `-$${Math.abs(estimatedOCF).toLocaleString()}`
                });
              }

              // Cash position declining
              if (monthly.length >= 6) {
                const cashTrend = last.cash - monthly[monthly.length - 6].cash;
                const cashTrendPct = monthly[monthly.length - 6].cash > 0 ? (cashTrend / monthly[monthly.length - 6].cash) * 100 : 0;
                if (cashTrendPct < -20) {
                  issues.push({
                    category: 'Cash Flow',
                    severity: 'high',
                    title: 'Rapid Cash Depletion',
                    description: `Cash has declined ${Math.abs(cashTrendPct).toFixed(1)}% over the past 6 months. At this burn rate, cash reserves may be exhausted quickly without corrective action.`,
                    metric: `${cashTrendPct.toFixed(1)}%`
                  });
                }
              }

              // === ASSET EFFICIENCY ===
              const assetTurnover = last.totalAssets > 0 ? (last.revenue * 12) / last.totalAssets : 0;
              if (assetTurnover < 0.5) {
                issues.push({
                  category: 'Asset Efficiency',
                  severity: 'low',
                  title: 'Low Asset Turnover',
                  description: `Asset turnover of ${assetTurnover.toFixed(2)}x indicates assets are not being utilized efficiently to generate revenue. Consider asset optimization or divestiture.`,
                  metric: `${assetTurnover.toFixed(2)}x`
                });
              }

              // === EXPENSE CATEGORY ANALYSIS (% of Revenue) ===
              const expenseCategories = [
                { key: 'cogsTotal', name: 'COGS Total', threshold: 70 },
                { key: 'cogsPayroll', name: 'COGS Payroll', threshold: 35 },
                { key: 'operatingExpenseTotal', name: 'Operating Expenses', threshold: 40 },
                { key: 'opexPayroll', name: 'OPEX Payroll', threshold: 25 },
                { key: 'opexSalesMarketing', name: 'Sales & Marketing', threshold: 15 },
                { key: 'rentLease', name: 'Rent/Lease', threshold: 10 },
                { key: 'professionalServices', name: 'Professional Services', threshold: 8 }
              ];

              expenseCategories.forEach(cat => {
                if (mapping[cat.key as keyof typeof mapping] && last[cat.key as keyof typeof last]) {
                  const currentPct = last.revenue > 0 ? ((last[cat.key as keyof typeof last] as number) / last.revenue) * 100 : 0;
                  
                  // Check if expense category is too high
                  if (currentPct > cat.threshold) {
                    issues.push({
                      category: 'Expense Control',
                      severity: currentPct > cat.threshold * 1.3 ? 'high' : 'medium',
                      title: `High ${cat.name} Expense`,
                      description: `${cat.name} represents ${currentPct.toFixed(1)}% of revenue, which is above the recommended threshold of ${cat.threshold}%. This indicates potential inefficiencies or cost control issues in this area.`,
                      metric: `${currentPct.toFixed(1)}%`
                    });
                  }

                  // Check if trending upward
                  if (monthly.length >= 6) {
                    const sixMonthsAgo = monthly[monthly.length - 6];
                    const prevPct = sixMonthsAgo.revenue > 0 ? ((sixMonthsAgo[cat.key as keyof typeof sixMonthsAgo] as number || 0) / sixMonthsAgo.revenue) * 100 : 0;
                    const pctChange = currentPct - prevPct;
                    
                    if (pctChange > 3) {
                      issues.push({
                        category: 'Expense Trends',
                        severity: pctChange > 5 ? 'medium' : 'low',
                        title: `Rising ${cat.name} as % of Revenue`,
                        description: `${cat.name} has increased from ${prevPct.toFixed(1)}% to ${currentPct.toFixed(1)}% of revenue over the past 6 months. This trend indicates deteriorating cost control or operational inefficiency.`,
                        metric: `+${pctChange.toFixed(1)}%`
                      });
                    }
                  }
                }
              });

              // === BENCHMARK COMPARISON ===
              if (benchmarks && benchmarks.length > 0) {
                // Current Ratio vs Benchmark
                const currentRatioBM = benchmarks.find(b => b.metric === 'Current Ratio');
                if (currentRatioBM && last.currentRatio < currentRatioBM.p25) {
                  issues.push({
                    category: 'Benchmarks',
                    severity: 'medium',
                    title: 'Current Ratio Below Industry Benchmark',
                    description: `Current ratio of ${last.currentRatio.toFixed(2)} is below the industry 25th percentile of ${currentRatioBM.p25.toFixed(2)}. This indicates weaker liquidity compared to industry peers.`,
                    metric: `${last.currentRatio.toFixed(2)} vs ${currentRatioBM.p25.toFixed(2)}`
                  });
                }

                // Quick Ratio vs Benchmark
                const quickRatioBM = benchmarks.find(b => b.metric === 'Quick Ratio');
                if (quickRatioBM && last.quickRatio < quickRatioBM.p25) {
                  issues.push({
                    category: 'Benchmarks',
                    severity: 'medium',
                    title: 'Quick Ratio Below Industry Benchmark',
                    description: `Quick ratio of ${last.quickRatio.toFixed(2)} is below the industry 25th percentile of ${quickRatioBM.p25.toFixed(2)}. This suggests inadequate liquid assets compared to peers.`,
                    metric: `${last.quickRatio.toFixed(2)} vs ${quickRatioBM.p25.toFixed(2)}`
                  });
                }

                // Debt to Equity vs Benchmark
                const debtToEquityBM = benchmarks.find(b => b.metric === 'Debt to Equity');
                if (debtToEquityBM && debtToEquity < 900 && debtToEquity > debtToEquityBM.p75) {
                  issues.push({
                    category: 'Benchmarks',
                    severity: 'medium',
                    title: 'Debt-to-Equity Above Industry Benchmark',
                    description: `Debt-to-equity ratio of ${debtToEquity.toFixed(2)} exceeds the industry 75th percentile of ${debtToEquityBM.p75.toFixed(2)}. The company is more leveraged than most peers.`,
                    metric: `${debtToEquity.toFixed(2)} vs ${debtToEquityBM.p75.toFixed(2)}`
                  });
                }

                // ROE vs Benchmark
                const roeBM = benchmarks.find(b => b.metric === 'Return on Equity (ROE)');
                if (roeBM && last.roe < roeBM.p25) {
                  issues.push({
                    category: 'Benchmarks',
                    severity: 'medium',
                    title: 'ROE Below Industry Benchmark',
                    description: `Return on Equity of ${(last.roe * 100).toFixed(1)}% is below the industry 25th percentile of ${(roeBM.p25 * 100).toFixed(1)}%. The company is generating lower returns than most competitors.`,
                    metric: `${(last.roe * 100).toFixed(1)}% vs ${(roeBM.p25 * 100).toFixed(1)}%`
                  });
                }

                // ROA vs Benchmark
                const roaBM = benchmarks.find(b => b.metric === 'Return on Assets (ROA)');
                if (roaBM && last.roa < roaBM.p25) {
                  issues.push({
                    category: 'Benchmarks',
                    severity: 'low',
                    title: 'ROA Below Industry Benchmark',
                    description: `Return on Assets of ${(last.roa * 100).toFixed(1)}% is below the industry 25th percentile of ${(roaBM.p25 * 100).toFixed(1)}%. Asset utilization is weaker than industry peers.`,
                    metric: `${(last.roa * 100).toFixed(1)}% vs ${(roaBM.p25 * 100).toFixed(1)}%`
                  });
                }

                // Profit Margin vs Benchmark
                const profitMarginBM = benchmarks.find(b => b.metric === 'Profit Margin');
                if (profitMarginBM && netMargin < profitMarginBM.p25) {
                  issues.push({
                    category: 'Benchmarks',
                    severity: netMargin < 0 ? 'high' : 'medium',
                    title: 'Profit Margin Below Industry Benchmark',
                    description: `Net profit margin of ${netMargin.toFixed(1)}% is below the industry 25th percentile of ${profitMarginBM.p25.toFixed(1)}%. Profitability is weaker than most competitors.`,
                    metric: `${netMargin.toFixed(1)}% vs ${profitMarginBM.p25.toFixed(1)}%`
                  });
                }

                // Asset Turnover vs Benchmark
                const assetTurnoverBM = benchmarks.find(b => b.metric === 'Asset Turnover');
                if (assetTurnoverBM && assetTurnover < assetTurnoverBM.p25) {
                  issues.push({
                    category: 'Benchmarks',
                    severity: 'low',
                    title: 'Asset Turnover Below Industry Benchmark',
                    description: `Asset turnover of ${assetTurnover.toFixed(2)}x is below the industry 25th percentile of ${assetTurnoverBM.p25.toFixed(2)}x. Assets are being used less efficiently than peers.`,
                    metric: `${assetTurnover.toFixed(2)}x vs ${assetTurnoverBM.p25.toFixed(2)}x`
                  });
                }

                // DSO vs Benchmark  
                const dsoBM = benchmarks.find(b => b.metric === 'Days Sales Outstanding (DSO)');
                if (dsoBM && dso > dsoBM.p75) {
                  issues.push({
                    category: 'Benchmarks',
                    severity: 'medium',
                    title: 'DSO Above Industry Benchmark',
                    description: `Days Sales Outstanding of ${dso.toFixed(0)} days exceeds the industry 75th percentile of ${dsoBM.p75.toFixed(0)} days. Collections are slower than most competitors.`,
                    metric: `${dso.toFixed(0)} vs ${dsoBM.p75.toFixed(0)} days`
                  });
                }

                // Expense Ratio vs Benchmark
                const expenseRatioBM = benchmarks.find(b => b.metric === 'Expense Ratio');
                if (expenseRatioBM && expenseRatio > expenseRatioBM.p75) {
                  issues.push({
                    category: 'Benchmarks',
                    severity: 'medium',
                    title: 'Expense Ratio Above Industry Benchmark',
                    description: `Total expense ratio of ${expenseRatio.toFixed(1)}% exceeds the industry 75th percentile of ${expenseRatioBM.p75.toFixed(1)}%. Operating costs are higher than most competitors.`,
                    metric: `${expenseRatio.toFixed(1)}% vs ${expenseRatioBM.p75.toFixed(1)}%`
                  });
                }
              }

              // === FINANCIAL SCORE ANALYSIS ===
              // Check overall Financial Score
              if (finalScore < 40) {
                issues.push({
                  category: 'Financial Score',
                  severity: 'high',
                  title: 'Critical Financial Score',
                  description: `Overall Financial Score of ${finalScore.toFixed(1)} is critically low, indicating severe financial distress. Both profitability and asset development require immediate attention.`,
                  metric: `${finalScore.toFixed(1)}/100`
                });
              } else if (finalScore < 60) {
                issues.push({
                  category: 'Financial Score',
                  severity: 'medium',
                  title: 'Below Average Financial Score',
                  description: `Financial Score of ${finalScore.toFixed(1)} is below industry standards. The company needs to improve both revenue growth/profitability and asset management.`,
                  metric: `${finalScore.toFixed(1)}/100`
                });
              } else if (finalScore < 70) {
                issues.push({
                  category: 'Financial Score',
                  severity: 'low',
                  title: 'Moderate Financial Score',
                  description: `Financial Score of ${finalScore.toFixed(1)} shows room for improvement. Consider strategies to enhance profitability and strengthen the balance sheet.`,
                  metric: `${finalScore.toFixed(1)}/100`
                });
              }

              // Check Profitability Score component
              if (profitabilityScore < 40) {
                issues.push({
                  category: 'Financial Score',
                  severity: 'high',
                  title: 'Critical Profitability Score',
                  description: `Profitability Score of ${profitabilityScore.toFixed(1)} indicates severe issues with revenue growth and expense management. Revenue may be declining or expenses growing faster than revenue.`,
                  metric: `${profitabilityScore.toFixed(1)}/100`
                });
              } else if (profitabilityScore < 60) {
                issues.push({
                  category: 'Financial Score',
                  severity: 'medium',
                  title: 'Weak Profitability Score',
                  description: `Profitability Score of ${profitabilityScore.toFixed(1)} suggests underperformance in revenue growth or expense control. Review pricing strategies, cost structure, and market positioning.`,
                  metric: `${profitabilityScore.toFixed(1)}/100`
                });
              }

              // Check Asset Development Score component
              if (assetDevScore < 40) {
                issues.push({
                  category: 'Financial Score',
                  severity: 'high',
                  title: 'Critical Asset Development Score',
                  description: `Asset Development Score of ${assetDevScore.toFixed(1)} indicates a weak balance sheet with assets barely exceeding liabilities. Asset-to-Liability ratio of ${alr1.toFixed(2)}:1 suggests potential solvency issues.`,
                  metric: `${assetDevScore.toFixed(1)}/100 (ALR: ${alr1.toFixed(2)})`
                });
              } else if (assetDevScore < 60) {
                issues.push({
                  category: 'Financial Score',
                  severity: 'medium',
                  title: 'Weak Asset Development Score',
                  description: `Asset Development Score of ${assetDevScore.toFixed(1)} indicates limited asset growth relative to liabilities. Asset-to-Liability ratio of ${alr1.toFixed(2)}:1 could be stronger to support future growth.`,
                  metric: `${assetDevScore.toFixed(1)}/100 (ALR: ${alr1.toFixed(2)})`
                });
              }

              // Check Asset-to-Liability Ratio trend
              if (alr1 < 1.0) {
                issues.push({
                  category: 'Financial Score',
                  severity: 'high',
                  title: 'Liabilities Exceed Assets',
                  description: `Asset-to-Liability ratio of ${alr1.toFixed(2)}:1 means liabilities exceed assets, indicating the company is technically insolvent on paper. This requires immediate financial restructuring or capital injection.`,
                  metric: `${alr1.toFixed(2)}:1`
                });
              } else if (alr1 < 1.2 && alrGrowth < -10) {
                issues.push({
                  category: 'Financial Score',
                  severity: 'high',
                  title: 'Deteriorating Asset-to-Liability Ratio',
                  description: `Asset-to-Liability ratio has declined by ${Math.abs(alrGrowth).toFixed(1)}% to ${alr1.toFixed(2)}:1. The balance sheet is weakening, with liabilities growing faster than assets.`,
                  metric: `${alr1.toFixed(2)}:1 (${alrGrowth.toFixed(1)}%)`
                });
              } else if (alrGrowth < -5) {
                issues.push({
                  category: 'Financial Score',
                  severity: 'medium',
                  title: 'Declining Asset Quality',
                  description: `Asset-to-Liability ratio decreased by ${Math.abs(alrGrowth).toFixed(1)}%, suggesting assets are not growing as fast as liabilities. Monitor debt levels and asset utilization.`,
                  metric: `${alrGrowth.toFixed(1)}% decline`
                });
              }

              // Check Financial Score trend if we have historical data
              if (trendData && trendData.length >= 6) {
                const currentFinScore = trendData[trendData.length - 1].financialScore;
                const sixMonthsAgoFinScore = trendData[trendData.length - 6].financialScore;
                const finScoreChange = currentFinScore - sixMonthsAgoFinScore;
                
                if (finScoreChange < -15) {
                  issues.push({
                    category: 'Financial Score',
                    severity: 'high',
                    title: 'Rapidly Declining Financial Score',
                    description: `Financial Score has dropped ${Math.abs(finScoreChange).toFixed(1)} points over the past 6 months, from ${sixMonthsAgoFinScore.toFixed(1)} to ${currentFinScore.toFixed(1)}. This rapid deterioration requires immediate management attention.`,
                    metric: `${finScoreChange.toFixed(1)} pts`
                  });
                } else if (finScoreChange < -10) {
                  issues.push({
                    category: 'Financial Score',
                    severity: 'medium',
                    title: 'Declining Financial Score Trend',
                    description: `Financial Score has decreased by ${Math.abs(finScoreChange).toFixed(1)} points over the past 6 months. The company's financial health is trending in the wrong direction.`,
                    metric: `${finScoreChange.toFixed(1)} pts`
                  });
                }

                // Check Profitability Score trend
                const currentProfScore = trendData[trendData.length - 1].profitabilityScore;
                const sixMonthsAgoProfScore = trendData[trendData.length - 6].profitabilityScore;
                const profScoreChange = currentProfScore - sixMonthsAgoProfScore;
                
                if (profScoreChange < -15) {
                  issues.push({
                    category: 'Financial Score',
                    severity: 'medium',
                    title: 'Deteriorating Profitability Trend',
                    description: `Profitability Score has fallen ${Math.abs(profScoreChange).toFixed(1)} points over 6 months, indicating worsening revenue growth and/or expense control.`,
                    metric: `${profScoreChange.toFixed(1)} pts`
                  });
                }

                // Check Asset Development Score trend
                const currentAdsScore = trendData[trendData.length - 1].adsScore;
                const sixMonthsAgoAdsScore = trendData[trendData.length - 6].adsScore;
                const adsScoreChange = currentAdsScore - sixMonthsAgoAdsScore;
                
                if (adsScoreChange < -15) {
                  issues.push({
                    category: 'Financial Score',
                    severity: 'medium',
                    title: 'Weakening Balance Sheet Trend',
                    description: `Asset Development Score has dropped ${Math.abs(adsScoreChange).toFixed(1)} points over 6 months, indicating the balance sheet is deteriorating relative to historical levels.`,
                    metric: `${adsScoreChange.toFixed(1)} pts`
                  });
                }
              }

              // Sort by severity
              const severityOrder = { high: 0, medium: 1, low: 2 };
              issues.sort((a, b) => severityOrder[a.severity] - severityOrder[b.severity]);

              return (
                <div>
                  {/* Summary Stats */}
                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '20px', marginBottom: '32px' }}>
                    <div style={{ background: '#fee2e2', borderRadius: '12px', padding: '20px', border: '2px solid #ef4444' }}>
                      <div style={{ fontSize: '32px', fontWeight: '700', color: '#991b1b', marginBottom: '8px' }}>
                        {issues.filter(i => i.severity === 'high').length}
                      </div>
                      <div style={{ fontSize: '14px', fontWeight: '600', color: '#7f1d1d' }}>High Priority Issues</div>
                    </div>
                    <div style={{ background: '#fef3c7', borderRadius: '12px', padding: '20px', border: '2px solid #f59e0b' }}>
                      <div style={{ fontSize: '32px', fontWeight: '700', color: '#92400e', marginBottom: '8px' }}>
                        {issues.filter(i => i.severity === 'medium').length}
                      </div>
                      <div style={{ fontSize: '14px', fontWeight: '600', color: '#78350f' }}>Medium Priority Issues</div>
                    </div>
                    <div style={{ background: '#dbeafe', borderRadius: '12px', padding: '20px', border: '2px solid #3b82f6' }}>
                      <div style={{ fontSize: '32px', fontWeight: '700', color: '#1e40af', marginBottom: '8px' }}>
                        {issues.filter(i => i.severity === 'low').length}
                      </div>
                      <div style={{ fontSize: '14px', fontWeight: '600', color: '#1e3a8a' }}>Low Priority Issues</div>
                    </div>
                  </div>

                  {/* Issues List */}
                  {issues.length === 0 ? (
                    <div style={{ background: '#d1fae5', borderRadius: '12px', padding: '32px', textAlign: 'center', border: '2px solid #10b981' }}>
                      <div style={{ fontSize: '48px', marginBottom: '16px' }}>✅</div>
                      <h3 style={{ fontSize: '20px', fontWeight: '700', color: '#065f46', marginBottom: '12px' }}>No Critical Issues Detected</h3>
                      <p style={{ fontSize: '15px', color: '#047857', margin: 0 }}>
                        All analyzed metrics are within acceptable ranges. Continue monitoring for any changes.
                      </p>
                    </div>
                  ) : (
                    <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
                      {issues.map((issue, idx) => {
                        const bgColor = issue.severity === 'high' ? '#fee2e2' : issue.severity === 'medium' ? '#fef3c7' : '#dbeafe';
                        const borderColor = issue.severity === 'high' ? '#ef4444' : issue.severity === 'medium' ? '#f59e0b' : '#3b82f6';
                        const textColor = issue.severity === 'high' ? '#991b1b' : issue.severity === 'medium' ? '#92400e' : '#1e40af';
                        const icon = issue.severity === 'high' ? '🔴' : issue.severity === 'medium' ? '🟡' : '🔵';
                        
                        return (
                          <div key={idx} style={{ background: bgColor, borderRadius: '12px', padding: '20px', border: `2px solid ${borderColor}` }}>
                            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', marginBottom: '12px' }}>
                              <div style={{ flex: 1 }}>
                                <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px' }}>
                                  <span style={{ fontSize: '18px' }}>{icon}</span>
                                  <span style={{ fontSize: '11px', fontWeight: '700', color: textColor, textTransform: 'uppercase', letterSpacing: '0.5px' }}>
                                    {issue.category}
                                  </span>
                                </div>
                                <h3 style={{ fontSize: '18px', fontWeight: '700', color: textColor, marginBottom: '8px', margin: 0 }}>
                                  {issue.title}
                                </h3>
                              </div>
                              {issue.metric && (
                                <div style={{ background: 'white', borderRadius: '8px', padding: '8px 16px', border: `1px solid ${borderColor}` }}>
                                  <div style={{ fontSize: '18px', fontWeight: '700', color: textColor }}>{issue.metric}</div>
                                </div>
                              )}
                            </div>
                            <p style={{ fontSize: '14px', color: textColor, margin: 0, lineHeight: '1.6' }}>
                              {issue.description}
                            </p>
                          </div>
                        );
                      })}
                    </div>
                  )}

                  {/* Action Items */}
                  {issues.filter(i => i.severity === 'high').length > 0 && (
                    <div style={{ marginTop: '32px', background: '#f8fafc', borderRadius: '12px', padding: '24px', border: '2px solid #667eea' }}>
                      <h3 style={{ fontSize: '18px', fontWeight: '700', color: '#1e293b', marginBottom: '16px' }}>📋 Recommended Actions</h3>
                      <ul style={{ margin: 0, paddingLeft: '20px', fontSize: '14px', color: '#475569', lineHeight: '1.8' }}>
                        {issues.filter(i => i.severity === 'high').length > 0 && (
                          <li><strong>Immediate attention required:</strong> Address all high-priority issues within the next 30 days</li>
                        )}
                        {issues.some(i => i.category === 'Liquidity') && (
                          <li><strong>Improve liquidity:</strong> Focus on accelerating collections, managing payables, and securing additional working capital if needed</li>
                        )}
                        {issues.some(i => i.category === 'Expense Control') && (
                          <li><strong>Cost reduction:</strong> Conduct detailed expense review to identify cost-saving opportunities without impacting revenue</li>
                        )}
                        {issues.some(i => i.category === 'Revenue Trends') && (
                          <li><strong>Revenue growth:</strong> Develop strategies to stabilize and grow revenue through new markets, products, or customer acquisition</li>
                        )}
                        {issues.some(i => i.category === 'Cash Flow') && (
                          <li><strong>Cash management:</strong> Implement cash flow forecasting and monitoring to prevent liquidity crises</li>
                        )}
                        <li><strong>Regular monitoring:</strong> Review these metrics weekly until trends improve</li>
                      </ul>
                    </div>
                  )}
                </div>
              );
            })()}
          </div>
          )}
        </div>
      )}

      {/* Projections View */}
      {currentView === 'projections' && selectedCompanyId && projections.mostLikely.length > 0 && (
        <div style={{ maxWidth: '100%', padding: '32px 32px 32px 16px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '32px' }}>
            <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', margin: 0 }}>Financial Projections</h1>
            {companyName && <div style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b' }}>{companyName}</div>}
          </div>
          
          <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>
              <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b' }}>Scenario Assumptions</h2>
              <button onClick={() => setShowDefaultSettings(!showDefaultSettings)} style={{ padding: '8px 16px', background: '#667eea', color: 'white', border: 'none', borderRadius: '8px', fontSize: '14px', fontWeight: '600', cursor: 'pointer' }}>
                {showDefaultSettings ? 'Hide Settings' : 'Adjust Scenarios'}
              </button>
            </div>
            
            {showDefaultSettings && (
              <div style={{ background: '#f8fafc', borderRadius: '8px', padding: '20px', marginTop: '16px' }}>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '24px', marginBottom: '20px' }}>
                  <div>
                    <h3 style={{ fontSize: '16px', fontWeight: '600', color: '#10b981', marginBottom: '12px' }}>Best Case Scenario</h3>
                    <div style={{ marginBottom: '12px' }}>
                      <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#475569', marginBottom: '4px' }}>Revenue Multiplier: {bestCaseRevMultiplier}x</label>
                      <input type="range" min="1" max="3" step="0.1" value={bestCaseRevMultiplier} onChange={(e) => setBestCaseRevMultiplier(parseFloat(e.target.value))} style={{ width: '100%' }} />
                    </div>
                    <div>
                      <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#475569', marginBottom: '4px' }}>Expense Multiplier: {bestCaseExpMultiplier}x</label>
                      <input type="range" min="0.3" max="1" step="0.05" value={bestCaseExpMultiplier} onChange={(e) => setBestCaseExpMultiplier(parseFloat(e.target.value))} style={{ width: '100%' }} />
                    </div>
                  </div>
                  <div>
                    <h3 style={{ fontSize: '16px', fontWeight: '600', color: '#ef4444', marginBottom: '12px' }}>Worst Case Scenario</h3>
                    <div style={{ marginBottom: '12px' }}>
                      <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#475569', marginBottom: '4px' }}>Revenue Multiplier: {worstCaseRevMultiplier}x</label>
                      <input type="range" min="0" max="1" step="0.05" value={worstCaseRevMultiplier} onChange={(e) => setWorstCaseRevMultiplier(parseFloat(e.target.value))} style={{ width: '100%' }} />
                    </div>
                    <div>
                      <label style={{ display: 'block', fontSize: '14px', fontWeight: '500', color: '#475569', marginBottom: '4px' }}>Expense Multiplier: {worstCaseExpMultiplier}x</label>
                      <input type="range" min="1" max="2" step="0.05" value={worstCaseExpMultiplier} onChange={(e) => setWorstCaseExpMultiplier(parseFloat(e.target.value))} style={{ width: '100%' }} />
                    </div>
                  </div>
                </div>
                <button onClick={saveProjectionDefaults} style={{ padding: '10px 20px', background: '#10b981', color: 'white', border: 'none', borderRadius: '8px', fontSize: '14px', fontWeight: '600', cursor: 'pointer' }}>Save as Defaults</button>
              </div>
            )}
          </div>

          <div style={{ display: 'grid', gap: '32px' }}>
            <ProjectionChart title="Revenue Projection" historicalData={monthly} projectedData={projections} valueKey="revenue" formatValue={(v) => `$${(v / 1000).toFixed(0)}K`} />
            <ProjectionChart title="Expense Projection" historicalData={monthly} projectedData={projections} valueKey="expense" formatValue={(v) => `$${(v / 1000).toFixed(0)}K`} />
            <ProjectionChart title="Net Income Projection" historicalData={monthly} projectedData={projections} valueKey="netIncome" formatValue={(v) => `$${(v / 1000).toFixed(0)}K`} />
            <ProjectionChart title="Total Assets Projection" historicalData={monthly} projectedData={projections} valueKey="totalAssets" formatValue={(v) => `$${(v / 1000).toFixed(0)}K`} />
            <ProjectionChart title="Total Liabilities Projection" historicalData={monthly} projectedData={projections} valueKey="totalLiab" formatValue={(v) => `$${(v / 1000).toFixed(0)}K`} />
            <ProjectionChart title="Equity Projection" historicalData={monthly} projectedData={projections} valueKey="equity" formatValue={(v) => `$${(v / 1000).toFixed(0)}K`} />
          </div>
        </div>
      )}

      {/* Working Capital View */}
      {currentView === 'working-capital' && selectedCompanyId && monthly.length > 0 && (
        <div style={{ maxWidth: '1400px', margin: '0 auto', padding: '32px' }}>
          <style>{`
            @media print {
              @page {
                size: landscape;
                margin: 0.15in;
              }
              
              /* Hide navigation and UI elements */
              .no-print,
              header,
              nav,
              aside,
              [role="navigation"],
              button {
                display: none !important;
              }
              
              /* Remove background colors and shadows */
              * {
                box-shadow: none !important;
              }
              
              /* Page breaks */
              .page-break-after {
                page-break-after: always;
              }
              
              /* Ensure content fits on landscape pages */
              .wc-print-content {
                width: 100%;
              }
              
              /* Scale down first page content to fit */
              .wc-first-page-content,
              .page-break-after {
                transform: scale(0.85);
                transform-origin: top left;
                width: 117.65%; /* Compensate for scale */
              }
              
              /* Reduce spacing for print */
              @media print {
                h1 {
                  font-size: 24px !important;
                  margin-bottom: 16px !important;
                }
                
                h2 {
                  font-size: 16px !important;
                  margin-bottom: 12px !important;
                }
                
                .wc-first-page-content {
                  margin-bottom: 16px !important;
                  gap: 8px !important;
                }
                
                .page-break-after {
                  margin-bottom: 16px !important;
                  padding: 16px !important;
                }
                
                /* Reduce padding and font sizes in metric cards */
                .wc-first-page-content > div {
                  padding: 10px !important;
                }
                
                .wc-first-page-content > div h3 {
                  font-size: 11px !important;
                  margin-bottom: 6px !important;
                }
                
                .wc-first-page-content > div > div:first-of-type {
                  font-size: 22px !important;
                  margin-bottom: 2px !important;
                }
                
                .wc-first-page-content > div > div:last-of-type {
                  font-size: 10px !important;
                }
                
                /* Compress second page content */
                .page-break-after ~ div {
                  margin-bottom: 12px !important;
                  padding: 16px !important;
                  gap: 12px !important;
                }
                
                .page-break-after ~ div h2 {
                  font-size: 16px !important;
                  margin-bottom: 8px !important;
                }
                
                .page-break-after ~ div > div {
                  padding: 12px !important;
                  margin-bottom: 0 !important;
                }
                
                /* Reduce spacing in asset/liability breakdown items */
                .page-break-after ~ div > div > div > div {
                  padding: 8px !important;
                  margin-bottom: 0 !important;
                }
                
                /* Reduce spacing in insights section */
                .page-break-after ~ div:last-child > div > div {
                  padding: 10px !important;
                  margin-bottom: 0 !important;
                  font-size: 11px !important;
                  line-height: 1.4 !important;
                }
              }
            }
          `}</style>
          
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '32px' }}>
            <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', margin: 0 }}>Working Capital Analysis</h1>
            <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
              {companyName && <div style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b' }}>{companyName}</div>}
              <button 
                className="no-print"
                onClick={() => window.print()} 
                style={{ 
                  padding: '12px 24px', 
                  background: '#667eea', 
                  color: 'white', 
                  border: 'none', 
                  borderRadius: '8px', 
                  fontSize: '14px', 
                  fontWeight: '600', 
                  cursor: 'pointer',
                  boxShadow: '0 2px 8px rgba(102, 126, 234, 0.3)'
                }}>
                🖨️ Print
              </button>
            </div>
          </div>
          
          {(() => {
            // Calculate working capital for each month
            const wcData = monthly.map(m => ({
              month: m.month,
              currentAssets: m.cash + m.ar + m.inventory + m.otherCA,
              currentLiabilities: m.ap + m.otherCL,
              workingCapital: (m.cash + m.ar + m.inventory + m.otherCA) - (m.ap + m.otherCL),
              revenue: m.revenue
            }));
            
            // Current period metrics
            const current = wcData[wcData.length - 1];
            const prior = wcData.length >= 13 ? wcData[wcData.length - 13] : wcData[0];
            
            const currentWC = current.workingCapital;
            const wcRatio = current.currentLiabilities !== 0 ? current.currentAssets / current.currentLiabilities : 0;
            const wcChange = currentWC - prior.workingCapital;
            const wcChangePercent = prior.workingCapital !== 0 ? (wcChange / Math.abs(prior.workingCapital)) * 100 : 0;
            
            // Calculate days working capital (WC / daily revenue)
            const last12Months = monthly.slice(-12);
            const annualRevenue = last12Months.reduce((sum, m) => sum + m.revenue, 0);
            const dailyRevenue = annualRevenue / 365;
            const daysWC = dailyRevenue !== 0 ? currentWC / dailyRevenue : 0;
            
            // Working Capital Cycle components
            const daysAR = current.revenue !== 0 ? (current.currentAssets * 0.4 / (current.revenue * 12)) * 365 : 0; // Estimate AR as 40% of current assets
            const daysAP = current.revenue !== 0 ? (current.currentLiabilities * 0.6 / (current.revenue * 12 * 0.7)) * 365 : 0; // Estimate AP
            const daysInventory = current.revenue !== 0 ? (current.currentAssets * 0.2 / (current.revenue * 12 * 0.7)) * 365 : 0; // Estimate inventory
            const cashConversionCycle = daysAR + daysInventory - daysAP;
            
            // Historical averages
            const avgWC = wcData.reduce((sum, d) => sum + d.workingCapital, 0) / wcData.length;
            const minWC = Math.min(...wcData.map(d => d.workingCapital));
            const maxWC = Math.max(...wcData.map(d => d.workingCapital));
            
            return (
              <>
                {/* Key Metrics Cards */}
                <div className="wc-first-page-content" style={{ display: 'grid', gridTemplateColumns: 'repeat(4, minmax(0, 200px))', gap: '20px', marginBottom: '32px', justifyContent: 'center' }}>
                  <div style={{ background: 'white', borderRadius: '12px', padding: '20px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', border: '2px solid #667eea' }}>
                    <h3 style={{ fontSize: '13px', fontWeight: '600', color: '#64748b', marginBottom: '8px' }}>Current Working Capital</h3>
                    <div style={{ fontSize: '28px', fontWeight: '700', color: '#667eea', marginBottom: '4px' }}>
                      ${(currentWC / 1000).toFixed(0)}K
                    </div>
                    <div style={{ fontSize: '12px', color: wcChange >= 0 ? '#10b981' : '#ef4444', fontWeight: '600' }}>
                      {wcChange >= 0 ? '↑' : '↓'} ${Math.abs(wcChange / 1000).toFixed(0)}K ({wcChangePercent >= 0 ? '+' : ''}{wcChangePercent.toFixed(1)}%) vs. 1Y ago
                    </div>
                  </div>
                  
                  <div style={{ background: 'white', borderRadius: '12px', padding: '20px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', border: '2px solid #667eea' }}>
                    <h3 style={{ fontSize: '13px', fontWeight: '600', color: '#64748b', marginBottom: '8px' }}>Working Capital Ratio</h3>
                    <div style={{ fontSize: '28px', fontWeight: '700', color: wcRatio >= 1.5 ? '#10b981' : wcRatio >= 1.0 ? '#f59e0b' : '#ef4444', marginBottom: '4px' }}>
                      {wcRatio.toFixed(2)}
                    </div>
                    <div style={{ fontSize: '12px', color: '#64748b' }}>
                      {wcRatio >= 1.5 ? 'Strong' : wcRatio >= 1.0 ? 'Adequate' : 'Needs Attention'}
                    </div>
                  </div>
                  
                  <div style={{ background: 'white', borderRadius: '12px', padding: '20px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', border: '2px solid #667eea' }}>
                    <h3 style={{ fontSize: '13px', fontWeight: '600', color: '#64748b', marginBottom: '8px' }}>Days Working Capital</h3>
                    <div style={{ fontSize: '28px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>
                      {daysWC.toFixed(0)}
                    </div>
                    <div style={{ fontSize: '12px', color: '#64748b' }}>
                      Days of revenue covered
                    </div>
                  </div>
                  
                  <div style={{ background: 'white', borderRadius: '12px', padding: '20px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', border: '2px solid #667eea' }}>
                    <h3 style={{ fontSize: '13px', fontWeight: '600', color: '#64748b', marginBottom: '8px' }}>Cash Conversion Cycle</h3>
                    <div style={{ fontSize: '28px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>
                      {cashConversionCycle.toFixed(0)}
                    </div>
                    <div style={{ fontSize: '12px', color: '#64748b' }}>
                      Days (estimated)
                    </div>
                  </div>
                </div>
                
                {/* Working Capital Trend Chart */}
                <div className="page-break-after" style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '20px' }}>Working Capital Trend</h2>
                  <LineChart 
                    title="" 
                    data={wcData.map(d => ({ month: d.month, value: d.workingCapital }))} 
                    color="#667eea"
                    showTable={false}
                    formatter={(val) => `$${Math.round(val).toLocaleString()}`}
                  />
                  
                  {/* Custom Quarterly Table */}
                  <div style={{ marginTop: '16px', overflowX: 'auto' }}>
                    <table style={{ width: '100%', fontSize: '12px', borderCollapse: 'collapse' }}>
                      <tbody>
                        <tr style={{ background: '#f1f5f9', borderBottom: '2px solid #cbd5e1' }}>
                          <td style={{ padding: '8px 12px', fontWeight: '700', color: '#1e293b', minWidth: '80px' }}>
                            Quarter
                          </td>
                          {wcData.filter((_, i) => i % 3 === 2).map((d, i) => (
                            <td key={`quarter-${i}`} style={{ padding: '8px 12px', textAlign: 'center', fontWeight: '600', color: '#64748b' }}>
                              {d.month}
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '1px solid #e2e8f0' }}>
                          <td style={{ padding: '8px 12px', fontWeight: '700', color: '#1e293b' }}>
                            Value
                          </td>
                          {wcData.filter((_, i) => i % 3 === 2).map((d, i) => (
                            <td key={`val-${i}`} style={{ padding: '8px 12px', textAlign: 'center', fontWeight: '700', color: '#667eea' }}>
                              ${Math.round(d.workingCapital).toLocaleString()}
                            </td>
                          ))}
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
                
                {/* Components Breakdown */}
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '24px', marginBottom: '24px' }}>
                  <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                    <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '20px' }}>Current Assets</h2>
                    <div style={{ display: 'grid', gap: '12px' }}>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '12px', background: '#f8fafc', borderRadius: '8px' }}>
                        <span style={{ fontSize: '14px', color: '#64748b' }}>Cash</span>
                        <span style={{ fontSize: '16px', fontWeight: '600', color: '#1e293b' }}>${(current.currentAssets * 0.3 / 1000).toFixed(0)}K</span>
                      </div>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '12px', background: '#f8fafc', borderRadius: '8px' }}>
                        <span style={{ fontSize: '14px', color: '#64748b' }}>Accounts Receivable</span>
                        <span style={{ fontSize: '16px', fontWeight: '600', color: '#1e293b' }}>${(current.currentAssets * 0.4 / 1000).toFixed(0)}K</span>
                      </div>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '12px', background: '#f8fafc', borderRadius: '8px' }}>
                        <span style={{ fontSize: '14px', color: '#64748b' }}>Inventory</span>
                        <span style={{ fontSize: '16px', fontWeight: '600', color: '#1e293b' }}>${(current.currentAssets * 0.2 / 1000).toFixed(0)}K</span>
                      </div>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '12px', background: '#f8fafc', borderRadius: '8px' }}>
                        <span style={{ fontSize: '14px', color: '#64748b' }}>Other Current Assets</span>
                        <span style={{ fontSize: '16px', fontWeight: '600', color: '#1e293b' }}>${(current.currentAssets * 0.1 / 1000).toFixed(0)}K</span>
                      </div>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '16px', background: '#667eea', borderRadius: '8px', marginTop: '8px' }}>
                        <span style={{ fontSize: '16px', fontWeight: '600', color: 'white' }}>Total Current Assets</span>
                        <span style={{ fontSize: '20px', fontWeight: '700', color: 'white' }}>${(current.currentAssets / 1000).toFixed(0)}K</span>
                      </div>
                    </div>
                  </div>
                  
                  <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                    <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '20px' }}>Current Liabilities</h2>
                    <div style={{ display: 'grid', gap: '12px' }}>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '12px', background: '#f8fafc', borderRadius: '8px' }}>
                        <span style={{ fontSize: '14px', color: '#64748b' }}>Accounts Payable</span>
                        <span style={{ fontSize: '16px', fontWeight: '600', color: '#1e293b' }}>${(current.currentLiabilities * 0.6 / 1000).toFixed(0)}K</span>
                      </div>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '12px', background: '#f8fafc', borderRadius: '8px' }}>
                        <span style={{ fontSize: '14px', color: '#64748b' }}>Accrued Expenses</span>
                        <span style={{ fontSize: '16px', fontWeight: '600', color: '#1e293b' }}>${(current.currentLiabilities * 0.25 / 1000).toFixed(0)}K</span>
                      </div>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '12px', background: '#f8fafc', borderRadius: '8px' }}>
                        <span style={{ fontSize: '14px', color: '#64748b' }}>Other Current Liabilities</span>
                        <span style={{ fontSize: '16px', fontWeight: '600', color: '#1e293b' }}>${(current.currentLiabilities * 0.15 / 1000).toFixed(0)}K</span>
                      </div>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '16px', background: '#ef4444', borderRadius: '8px', marginTop: '60px' }}>
                        <span style={{ fontSize: '16px', fontWeight: '600', color: 'white' }}>Total Current Liabilities</span>
                        <span style={{ fontSize: '20px', fontWeight: '700', color: 'white' }}>${(current.currentLiabilities / 1000).toFixed(0)}K</span>
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* Working Capital Analysis */}
                <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '20px' }}>Working Capital Insights</h2>
                  
                  <div style={{ display: 'grid', gap: '16px' }}>
                    {currentWC > 0 && wcRatio >= 1.5 && (
                      <div style={{ padding: '16px', background: '#f0fdf4', borderRadius: '8px', borderLeft: '4px solid #10b981' }}>
                        <div style={{ fontSize: '14px', fontWeight: '600', color: '#166534', marginBottom: '4px' }}>✓ Strong Liquidity Position</div>
                        <div style={{ fontSize: '13px', color: '#166534', lineHeight: '1.6' }}>
                          Your working capital ratio of {wcRatio} indicates strong short-term financial health with ${(currentWC / 1000).toFixed(0)}K in working capital available to cover operational needs.
                        </div>
                      </div>
                    )}
                    
                    {currentWC > 0 && wcRatio < 1.5 && wcRatio >= 1.0 && (
                      <div style={{ padding: '16px', background: '#fffbeb', borderRadius: '8px', borderLeft: '4px solid #f59e0b' }}>
                        <div style={{ fontSize: '14px', fontWeight: '600', color: '#92400e', marginBottom: '4px' }}>⚠ Adequate but Monitor Closely</div>
                        <div style={{ fontSize: '13px', color: '#92400e', lineHeight: '1.6' }}>
                          Your working capital ratio of {wcRatio} is adequate but below ideal levels. Consider improving cash flow or reducing short-term liabilities to strengthen your position.
                        </div>
                      </div>
                    )}
                    
                    {wcRatio < 1.0 && (
                      <div style={{ padding: '16px', background: '#fef2f2', borderRadius: '8px', borderLeft: '4px solid #ef4444' }}>
                        <div style={{ fontSize: '14px', fontWeight: '600', color: '#991b1b', marginBottom: '4px' }}>⚠ Liquidity Concern</div>
                        <div style={{ fontSize: '13px', color: '#991b1b', lineHeight: '1.6' }}>
                          Your working capital ratio of {wcRatio} indicates current liabilities exceed current assets. Immediate attention to cash flow management and working capital optimization is recommended.
                        </div>
                      </div>
                    )}
                    
                    {wcChange > 0 && (
                      <div style={{ padding: '16px', background: '#f0f9ff', borderRadius: '8px', borderLeft: '4px solid #0284c7' }}>
                        <div style={{ fontSize: '14px', fontWeight: '600', color: '#0c4a6e', marginBottom: '4px' }}>↑ Positive Trend</div>
                        <div style={{ fontSize: '13px', color: '#0c4a6e', lineHeight: '1.6' }}>
                          Working capital has increased by ${(wcChange / 1000).toFixed(0)}K ({wcChangePercent.toFixed(1)}%) over the past year, indicating improved operational efficiency and financial stability.
                        </div>
                      </div>
                    )}
                    
                    <div style={{ padding: '16px', background: '#f8fafc', borderRadius: '8px', border: '1px solid #e2e8f0' }}>
                      <div style={{ fontSize: '14px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>Historical Metrics</div>
                      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '12px', fontSize: '13px', color: '#64748b' }}>
                        <div>
                          <span style={{ fontWeight: '600' }}>Average WC:</span> ${(avgWC / 1000).toFixed(0)}K
                        </div>
                        <div>
                          <span style={{ fontWeight: '600' }}>Minimum WC:</span> ${(minWC / 1000).toFixed(0)}K
                        </div>
                        <div>
                          <span style={{ fontWeight: '600' }}>Maximum WC:</span> ${(maxWC / 1000).toFixed(0)}K
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </>
            );
          })()}
        </div>
      )}

      {/* Valuation View */}
      {currentView === 'valuation' && selectedCompanyId && monthly.length > 0 && (
        <div style={{ maxWidth: '1400px', margin: '0 auto', padding: '32px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '32px' }}>
            <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', margin: 0 }}>Business Valuation</h1>
            {companyName && <div style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b' }}>{companyName}</div>}
          </div>
          
          {(() => {
            // Calculate trailing 12 months values
            const last12 = monthly.slice(-12);
            const ttmRevenue = last12.reduce((sum, m) => sum + m.revenue, 0);
            const ttmExpense = last12.reduce((sum, m) => sum + m.expense, 0);
            const ttmNetIncome = ttmRevenue - ttmExpense;
            
            // Estimate EBITDA (simplified - assumes depreciation is ~5% of revenue and interest is minimal)
            const estimatedDepreciation = ttmRevenue * 0.05;
            const estimatedInterest = ttmRevenue * 0.02;
            const ttmEBITDA = ttmNetIncome + estimatedDepreciation + estimatedInterest;
            
            // Estimate SDE (add back owner's compensation - estimate at 15% of revenue)
            const estimatedOwnerComp = ttmRevenue * 0.15;
            const ttmSDE = ttmEBITDA + estimatedOwnerComp;
            
            // Calculate valuations
            const sdeValuation = ttmSDE * sdeMultiplier;
            const ebitdaValuation = ttmEBITDA * ebitdaMultiplier;
            
            // Calculate Free Cash Flow (FCF) for DCF
            // FCF = Net Income + Depreciation - Changes in Working Capital - CapEx
            const currentMonth = monthly[monthly.length - 1];
            const month12Ago = monthly.length >= 13 ? monthly[monthly.length - 13] : monthly[0];
            
            // Working capital change over last 12 months
            const currentWC = (currentMonth.cash + currentMonth.ar + currentMonth.inventory) - (currentMonth.ap + currentMonth.otherCL);
            const priorWC = (month12Ago.cash + month12Ago.ar + month12Ago.inventory) - (month12Ago.ap + month12Ago.otherCL);
            const changeInWC = currentWC - priorWC;
            
            // Capital expenditures (change in fixed assets + depreciation)
            const changeInFixedAssets = currentMonth.fixedAssets - month12Ago.fixedAssets;
            const ttmCapEx = Math.max(0, changeInFixedAssets + estimatedDepreciation);
            
            // Free Cash Flow
            const ttmFreeCashFlow = ttmNetIncome + estimatedDepreciation - changeInWC - ttmCapEx;
            
            // DCF calculation with adjustable parameters using FCF
            const growthRate = growth_24mo / 100;
            const discountRate = dcfDiscountRate / 100;
            const terminalGrowthRate = dcfTerminalGrowth / 100;
            let dcfValue = 0;
            for (let year = 1; year <= 5; year++) {
              const projectedFCF = ttmFreeCashFlow * Math.pow(1 + growthRate, year);
              dcfValue += projectedFCF / Math.pow(1 + discountRate, year);
            }
            const terminalValue = (ttmFreeCashFlow * Math.pow(1 + growthRate, 5) * (1 + terminalGrowthRate)) / (discountRate - terminalGrowthRate);
            dcfValue += terminalValue / Math.pow(1 + discountRate, 5);
            
            return (
              <>
                {/* Overview Cards */}
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '20px', marginBottom: '32px' }}>
                  <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', border: '2px solid #10b981' }}>
                    <h3 style={{ fontSize: '14px', fontWeight: '600', color: '#64748b', marginBottom: '8px' }}>SDE Valuation</h3>
                    <div style={{ fontSize: '32px', fontWeight: '700', color: '#10b981', marginBottom: '8px' }}>
                      ${(sdeValuation / 1000000).toFixed(0)}M
                    </div>
                    <div style={{ fontSize: '13px', color: '#64748b' }}>
                      TTM SDE: ${(ttmSDE / 1000).toFixed(0)}K × {sdeMultiplier}x
                    </div>
                  </div>
                  
                  <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', border: '2px solid #667eea' }}>
                    <h3 style={{ fontSize: '14px', fontWeight: '600', color: '#64748b', marginBottom: '8px' }}>EBITDA Valuation</h3>
                    <div style={{ fontSize: '32px', fontWeight: '700', color: '#667eea', marginBottom: '8px' }}>
                      ${(ebitdaValuation / 1000000).toFixed(0)}M
                    </div>
                    <div style={{ fontSize: '13px', color: '#64748b' }}>
                      TTM EBITDA: ${(ttmEBITDA / 1000).toFixed(0)}K × {ebitdaMultiplier}x
                    </div>
                  </div>
                  
                  <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', border: '2px solid #f59e0b' }}>
                    <h3 style={{ fontSize: '14px', fontWeight: '600', color: '#64748b', marginBottom: '8px' }}>DCF Valuation</h3>
                    <div style={{ fontSize: '32px', fontWeight: '700', color: '#f59e0b', marginBottom: '8px' }}>
                      ${(dcfValue / 1000000).toFixed(0)}M
                    </div>
                    <div style={{ fontSize: '13px', color: '#64748b' }}>
                      5-year @ {dcfDiscountRate.toFixed(1)}% discount, {dcfTerminalGrowth.toFixed(1)}% terminal
                    </div>
                  </div>
                </div>
                
                {/* SDE Method */}
                <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '20px' }}>
                    Seller's Discretionary Earnings (SDE) Method
                  </h2>
                  
                  <div style={{ background: '#f0fdf4', borderRadius: '8px', padding: '20px', marginBottom: '20px' }}>
                    <div style={{ marginBottom: '16px' }}>
                      <div style={{ fontSize: '14px', color: '#64748b', marginBottom: '4px' }}>Trailing 12 Months SDE</div>
                      <div style={{ fontSize: '28px', fontWeight: '700', color: '#10b981' }}>${(ttmSDE / 1000).toFixed(0)}K</div>
                    </div>
                    
                    <div style={{ fontSize: '13px', color: '#475569', lineHeight: '1.6' }}>
                      <strong>Calculation:</strong> Net Income + Owner Compensation + Interest + Depreciation + Discretionary Expenses
                      <br/>
                      = ${(ttmNetIncome / 1000).toFixed(0)}K + ${(estimatedOwnerComp / 1000).toFixed(0)}K + ${(estimatedInterest / 1000).toFixed(0)}K + ${(estimatedDepreciation / 1000).toFixed(0)}K
                    </div>
                  </div>
                  
                  <div style={{ marginBottom: '20px' }}>
                    <label style={{ display: 'block', fontSize: '14px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>
                      SDE Multiple: {sdeMultiplier.toFixed(1)}x
                    </label>
                    <input 
                      type="range" 
                      min="1" 
                      max="5" 
                      step="0.1" 
                      value={sdeMultiplier} 
                      onChange={(e) => setSdeMultiplier(parseFloat(e.target.value))} 
                      style={{ width: '100%', marginBottom: '8px' }} 
                    />
                    <div style={{ fontSize: '12px', color: '#64748b', display: 'flex', justifyContent: 'space-between' }}>
                      <span>Typical Range: 1.5x - 4.0x</span>
                      <span>Industry Average: 2.5x</span>
                    </div>
                  </div>
                  
                  <div style={{ background: '#f8fafc', borderRadius: '8px', padding: '16px', border: '1px solid #e2e8f0' }}>
                    <div style={{ fontSize: '16px', fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>
                      Estimated Business Value (SDE)
                    </div>
                    <div style={{ fontSize: '36px', fontWeight: '700', color: '#10b981' }}>
                      ${(sdeValuation / 1000000).toFixed(0)}M
                    </div>
                    <div style={{ fontSize: '13px', color: '#64748b', marginTop: '4px' }}>
                      Range: ${((ttmSDE * 1.5) / 1000000).toFixed(0)}M - ${((ttmSDE * 4.0) / 1000000).toFixed(0)}M
                    </div>
                  </div>
                </div>
                
                {/* EBITDA Method */}
                <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '20px' }}>
                    EBITDA Multiple Method
                  </h2>
                  
                  <div style={{ background: '#ede9fe', borderRadius: '8px', padding: '20px', marginBottom: '20px' }}>
                    <div style={{ marginBottom: '16px' }}>
                      <div style={{ fontSize: '14px', color: '#64748b', marginBottom: '4px' }}>Trailing 12 Months EBITDA</div>
                      <div style={{ fontSize: '28px', fontWeight: '700', color: '#667eea' }}>${(ttmEBITDA / 1000).toFixed(0)}K</div>
                    </div>
                    
                    <div style={{ fontSize: '13px', color: '#475569', lineHeight: '1.6' }}>
                      <strong>Calculation:</strong> Net Income + Interest + Taxes + Depreciation + Amortization
                      <br/>
                      = ${(ttmNetIncome / 1000).toFixed(0)}K + ${(estimatedInterest / 1000).toFixed(0)}K + ${(estimatedDepreciation / 1000).toFixed(0)}K
                    </div>
                  </div>
                  
                  <div style={{ marginBottom: '20px' }}>
                    <label style={{ display: 'block', fontSize: '14px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>
                      EBITDA Multiple: {ebitdaMultiplier.toFixed(1)}x
                    </label>
                    <input 
                      type="range" 
                      min="2" 
                      max="10" 
                      step="0.1" 
                      value={ebitdaMultiplier} 
                      onChange={(e) => setEbitdaMultiplier(parseFloat(e.target.value))} 
                      style={{ width: '100%', marginBottom: '8px' }} 
                    />
                    <div style={{ fontSize: '12px', color: '#64748b', display: 'flex', justifyContent: 'space-between' }}>
                      <span>Typical Range: 3.0x - 8.0x</span>
                      <span>Industry Average: 5.0x</span>
                    </div>
                  </div>
                  
                  <div style={{ background: '#f8fafc', borderRadius: '8px', padding: '16px', border: '1px solid #e2e8f0' }}>
                    <div style={{ fontSize: '16px', fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>
                      Estimated Business Value (EBITDA)
                    </div>
                    <div style={{ fontSize: '36px', fontWeight: '700', color: '#667eea' }}>
                      ${(ebitdaValuation / 1000000).toFixed(0)}M
                    </div>
                    <div style={{ fontSize: '13px', color: '#64748b', marginTop: '4px' }}>
                      Range: ${((ttmEBITDA * 3.0) / 1000000).toFixed(0)}M - ${((ttmEBITDA * 8.0) / 1000000).toFixed(0)}M
                    </div>
                  </div>
                </div>
                
                {/* DCF Method */}
                <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '20px' }}>
                    Discounted Cash Flow (DCF) Method
                  </h2>
                  
                  <div style={{ background: '#fef3c7', borderRadius: '8px', padding: '20px', marginBottom: '20px' }}>
                    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '20px', marginBottom: '16px' }}>
                      <div>
                        <div style={{ fontSize: '12px', color: '#92400e', marginBottom: '4px' }}>Historical Growth Rate</div>
                        <div style={{ fontSize: '20px', fontWeight: '700', color: '#f59e0b' }}>{growth_24mo.toFixed(1)}%</div>
                        <div style={{ fontSize: '11px', color: '#92400e', marginTop: '2px' }}>Used for 5-year projection</div>
                      </div>
                      <div>
                        <div style={{ fontSize: '12px', color: '#92400e', marginBottom: '4px' }}>Discount Rate</div>
                        <div style={{ fontSize: '20px', fontWeight: '700', color: '#f59e0b' }}>{dcfDiscountRate.toFixed(1)}%</div>
                        <div style={{ fontSize: '11px', color: '#92400e', marginTop: '2px' }}>Risk-adjusted rate</div>
                      </div>
                      <div>
                        <div style={{ fontSize: '12px', color: '#92400e', marginBottom: '4px' }}>Terminal Growth</div>
                        <div style={{ fontSize: '20px', fontWeight: '700', color: '#f59e0b' }}>{dcfTerminalGrowth.toFixed(1)}%</div>
                        <div style={{ fontSize: '11px', color: '#92400e', marginTop: '2px' }}>Perpetuity growth</div>
                      </div>
                    </div>
                    
                    <div style={{ fontSize: '13px', color: '#78350f', lineHeight: '1.6', marginBottom: '16px' }}>
                      5-year free cash flow projection based on historical growth rate, discounted to present value. Includes terminal value calculation for perpetuity beyond forecast period.
                    </div>
                  </div>
                  
                  {/* Free Cash Flow Calculation */}
                  <div style={{ background: '#fef3c7', borderRadius: '8px', padding: '20px', marginBottom: '20px', border: '1px solid #fcd34d' }}>
                    <div style={{ marginBottom: '16px' }}>
                      <div style={{ fontSize: '14px', color: '#92400e', marginBottom: '8px', fontWeight: '600' }}>Trailing 12 Months Free Cash Flow</div>
                      <div style={{ fontSize: '28px', fontWeight: '700', color: '#f59e0b' }}>${(ttmFreeCashFlow / 1000).toFixed(0)}K</div>
                    </div>
                    
                    <div style={{ fontSize: '13px', color: '#78350f', lineHeight: '1.8' }}>
                      <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '6px' }}>
                        <span>Net Income</span>
                        <span style={{ fontWeight: '600' }}>${(ttmNetIncome / 1000).toFixed(0)}K</span>
                      </div>
                      <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '6px' }}>
                        <span>+ Depreciation/Amortization</span>
                        <span style={{ fontWeight: '600' }}>${(estimatedDepreciation / 1000).toFixed(0)}K</span>
                      </div>
                      <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '6px' }}>
                        <span>- Change in Working Capital</span>
                        <span style={{ fontWeight: '600' }}>${(changeInWC / 1000).toFixed(0)}K</span>
                      </div>
                      <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '6px', paddingBottom: '6px', borderBottom: '1px solid #fcd34d' }}>
                        <span>- Capital Expenditures</span>
                        <span style={{ fontWeight: '600' }}>${(ttmCapEx / 1000).toFixed(0)}K</span>
                      </div>
                      <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '8px' }}>
                        <span style={{ fontWeight: '700' }}>= Free Cash Flow</span>
                        <span style={{ fontWeight: '700', color: '#f59e0b' }}>${(ttmFreeCashFlow / 1000).toFixed(0)}K</span>
                      </div>
                    </div>
                  </div>
                  
                  {/* Adjustable Parameters */}
                  <div style={{ marginBottom: '20px' }}>
                    <label style={{ display: 'block', fontSize: '14px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>
                      Discount Rate (WACC): {dcfDiscountRate.toFixed(1)}%
                    </label>
                    <input 
                      type="range" 
                      min="5" 
                      max="20" 
                      step="0.5" 
                      value={dcfDiscountRate} 
                      onChange={(e) => setDcfDiscountRate(parseFloat(e.target.value))} 
                      style={{ width: '100%', marginBottom: '8px' }} 
                    />
                    <div style={{ fontSize: '12px', color: '#64748b', display: 'flex', justifyContent: 'space-between' }}>
                      <span>Lower Risk: 5-8%</span>
                      <span>Typical: 10-12%</span>
                      <span>Higher Risk: 15-20%</span>
                    </div>
                  </div>
                  
                  <div style={{ marginBottom: '20px' }}>
                    <label style={{ display: 'block', fontSize: '14px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>
                      Terminal Growth Rate: {dcfTerminalGrowth.toFixed(1)}%
                    </label>
                    <input 
                      type="range" 
                      min="0" 
                      max="5" 
                      step="0.5" 
                      value={dcfTerminalGrowth} 
                      onChange={(e) => setDcfTerminalGrowth(parseFloat(e.target.value))} 
                      style={{ width: '100%', marginBottom: '8px' }} 
                    />
                    <div style={{ fontSize: '12px', color: '#64748b', display: 'flex', justifyContent: 'space-between' }}>
                      <span>Conservative: 0-2%</span>
                      <span>Typical: 2-3%</span>
                      <span>Optimistic: 3-5%</span>
                    </div>
                  </div>
                  
                  <div style={{ background: '#f8fafc', borderRadius: '8px', padding: '16px', border: '1px solid #e2e8f0' }}>
                    <div style={{ fontSize: '16px', fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>
                      Estimated Business Value (DCF)
                    </div>
                    <div style={{ fontSize: '36px', fontWeight: '700', color: '#f59e0b' }}>
                      ${(dcfValue / 1000000).toFixed(0)}M
                    </div>
                    <div style={{ fontSize: '13px', color: '#64748b', marginTop: '8px' }}>
                      <strong>Note:</strong> DCF based on Free Cash Flow (FCF) projections. Valuations are highly sensitive to assumptions about growth rates, discount rates, working capital, and capital expenditures.
                    </div>
                  </div>
                </div>
              </>
            );
          })()}
        </div>
      )}

      {/* Cash Flow View */}
      {currentView === 'cash-flow' && selectedCompanyId && monthly.length > 0 && (
        <div style={{ maxWidth: '1400px', margin: '0 auto', padding: '32px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '32px' }}>
            <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', margin: 0 }}>Cash Flow Analysis</h1>
            {companyName && <div style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b' }}>{companyName}</div>}
          </div>

          {(() => {
            // Calculate cash flow for last 12 months
            const last12 = monthly.slice(-12);
            
            const cashFlowData = last12.map((curr, idx) => {
              const prev = idx === 0 && monthly.length > 12 ? monthly[monthly.length - 13] : (idx > 0 ? last12[idx - 1] : curr);
              
              // Operating Activities
              const netIncome = curr.revenue - curr.expense;
              const depreciation = curr.depreciationExpense || 0; // Depreciation and amortization expense
              const changeInAR = curr.ar - prev.ar;
              const changeInInventory = curr.inventory - prev.inventory;
              const changeInAP = curr.ap - prev.ap;
              const changeInWorkingCapital = -(changeInAR + changeInInventory - changeInAP);
              const operatingCashFlow = netIncome + depreciation + changeInWorkingCapital;
              
              // Investing Activities
              const changeInFixedAssets = curr.fixedAssets - prev.fixedAssets;
              const capitalExpenditures = changeInFixedAssets + depreciation; // Add back depreciation to estimate CapEx
              const investingCashFlow = -capitalExpenditures;
              
              // Financing Activities
              const changeInDebt = curr.ltd - prev.ltd;
              const changeInEquity = curr.totalEquity - prev.totalEquity - netIncome; // Equity change excluding net income
              const financingCashFlow = changeInDebt + changeInEquity;
              
              // Net Change and Free Cash Flow
              const netCashChange = operatingCashFlow + investingCashFlow + financingCashFlow;
              const freeCashFlow = operatingCashFlow - Math.max(0, capitalExpenditures);
              
              // Metrics
              const cashFlowMargin = curr.revenue > 0 ? (operatingCashFlow / curr.revenue) * 100 : 0;
              const daysCashOnHand = operatingCashFlow > 0 ? (curr.cash / (operatingCashFlow / 30)) : 0;
              
              return {
                month: curr.month,
                netIncome,
                depreciation,
                changeInWorkingCapital,
                operatingCashFlow,
                capitalExpenditures,
                investingCashFlow,
                changeInDebt,
                changeInEquity,
                financingCashFlow,
                netCashChange,
                freeCashFlow,
                cashFlowMargin,
                daysCashOnHand,
                endingCash: curr.cash
              };
            });

            // Summary metrics
            const totalOperatingCF = cashFlowData.reduce((sum, d) => sum + d.operatingCashFlow, 0);
            const totalInvestingCF = cashFlowData.reduce((sum, d) => sum + d.investingCashFlow, 0);
            const totalFinancingCF = cashFlowData.reduce((sum, d) => sum + d.financingCashFlow, 0);
            const totalFreeCF = cashFlowData.reduce((sum, d) => sum + d.freeCashFlow, 0);
            const avgCashFlowMargin = cashFlowData.reduce((sum, d) => sum + d.cashFlowMargin, 0) / cashFlowData.length;

            return (
              <>
                {/* Summary Cards */}
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(220px, 1fr))', gap: '16px', marginBottom: '32px' }}>
                  <div style={{ background: 'white', borderRadius: '12px', padding: '20px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', border: '2px solid #10b981' }}>
                    <div style={{ fontSize: '12px', fontWeight: '600', color: '#64748b', marginBottom: '4px' }}>Operating Cash Flow (12mo)</div>
                    <div style={{ fontSize: '28px', fontWeight: '700', color: '#10b981' }}>
                      ${(totalOperatingCF / 1000).toFixed(0)}K
                    </div>
                    <div style={{ fontSize: '11px', color: '#64748b', marginTop: '4px' }}>Cash from operations</div>
                  </div>
                  
                  <div style={{ background: 'white', borderRadius: '12px', padding: '20px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', border: '2px solid #ef4444' }}>
                    <div style={{ fontSize: '12px', fontWeight: '600', color: '#64748b', marginBottom: '4px' }}>Investing Cash Flow (12mo)</div>
                    <div style={{ fontSize: '28px', fontWeight: '700', color: '#ef4444' }}>
                      ${(totalInvestingCF / 1000).toFixed(0)}K
                    </div>
                    <div style={{ fontSize: '11px', color: '#64748b', marginTop: '4px' }}>CapEx & investments</div>
                  </div>
                  
                  <div style={{ background: 'white', borderRadius: '12px', padding: '20px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', border: '2px solid #3b82f6' }}>
                    <div style={{ fontSize: '12px', fontWeight: '600', color: '#64748b', marginBottom: '4px' }}>Financing Cash Flow (12mo)</div>
                    <div style={{ fontSize: '28px', fontWeight: '700', color: '#3b82f6' }}>
                      ${(totalFinancingCF / 1000).toFixed(0)}K
                    </div>
                    <div style={{ fontSize: '11px', color: '#64748b', marginTop: '4px' }}>Debt & equity changes</div>
                  </div>
                  
                  <div style={{ background: 'white', borderRadius: '12px', padding: '20px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', border: '2px solid #667eea' }}>
                    <div style={{ fontSize: '12px', fontWeight: '600', color: '#64748b', marginBottom: '4px' }}>Free Cash Flow (12mo)</div>
                    <div style={{ fontSize: '28px', fontWeight: '700', color: totalFreeCF >= 0 ? '#10b981' : '#ef4444' }}>
                      ${(totalFreeCF / 1000).toFixed(0)}K
                    </div>
                    <div style={{ fontSize: '11px', color: '#64748b', marginTop: '4px' }}>OCF - CapEx</div>
                  </div>
                  
                  <div style={{ background: 'white', borderRadius: '12px', padding: '20px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', border: '2px solid #f59e0b' }}>
                    <div style={{ fontSize: '12px', fontWeight: '600', color: '#64748b', marginBottom: '4px' }}>Avg Cash Flow Margin</div>
                    <div style={{ fontSize: '28px', fontWeight: '700', color: '#f59e0b' }}>
                      {avgCashFlowMargin.toFixed(1)}%
                    </div>
                    <div style={{ fontSize: '11px', color: '#64748b', marginTop: '4px' }}>OCF / Revenue</div>
                  </div>
                </div>

                {/* Cash Flow Statement Table */}
                <div style={{ background: 'white', borderRadius: '12px', padding: '32px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '24px' }}>Statement of Cash Flows</h2>
                  
                  <div style={{ overflowX: 'auto' }}>
                    <table style={{ width: '100%', fontSize: '12px', borderCollapse: 'collapse' }}>
                      <thead>
                        <tr style={{ borderBottom: '2px solid #e2e8f0' }}>
                          <th style={{ textAlign: 'left', padding: '10px', fontSize: '13px', fontWeight: '600', color: '#64748b', position: 'sticky', left: 0, background: 'white', minWidth: '200px' }}>Cash Flow Item</th>
                          {cashFlowData.map((cf, i) => (
                            <th key={i} style={{ textAlign: 'right', padding: '10px', fontSize: '11px', fontWeight: '600', color: '#64748b', minWidth: '90px' }}>
                              {cf.month}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        {/* Operating Activities */}
                        <tr style={{ background: '#f0fdf4' }}>
                          <td colSpan={13} style={{ padding: '12px 10px', fontSize: '14px', fontWeight: '700', color: '#065f46' }}>
                            OPERATING ACTIVITIES
                          </td>
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px 10px', fontSize: '12px', color: '#475569', paddingLeft: '24px' }}>Net Income</td>
                          {cashFlowData.map((cf, i) => (
                            <td key={i} style={{ padding: '8px 10px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              ${cf.netIncome.toLocaleString()}
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px 10px', fontSize: '12px', color: '#475569', paddingLeft: '24px' }}>+ Depreciation</td>
                          {cashFlowData.map((cf, i) => (
                            <td key={i} style={{ padding: '8px 10px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              ${cf.depreciation.toLocaleString()}
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px 10px', fontSize: '12px', color: '#475569', paddingLeft: '24px' }}>+ Change in Working Capital</td>
                          {cashFlowData.map((cf, i) => (
                            <td key={i} style={{ padding: '8px 10px', fontSize: '12px', color: cf.changeInWorkingCapital >= 0 ? '#10b981' : '#ef4444', textAlign: 'right' }}>
                              ${cf.changeInWorkingCapital.toLocaleString()}
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '2px solid #10b981', background: '#f0fdf4' }}>
                          <td style={{ padding: '10px', fontSize: '13px', fontWeight: '700', color: '#065f46' }}>Operating Cash Flow</td>
                          {cashFlowData.map((cf, i) => (
                            <td key={i} style={{ padding: '10px', fontSize: '13px', fontWeight: '700', color: '#065f46', textAlign: 'right' }}>
                              ${cf.operatingCashFlow.toLocaleString()}
                            </td>
                          ))}
                        </tr>
                        
                        {/* Investing Activities */}
                        <tr style={{ background: '#fef2f2' }}>
                          <td colSpan={13} style={{ padding: '12px 10px', fontSize: '14px', fontWeight: '700', color: '#991b1b' }}>
                            INVESTING ACTIVITIES
                          </td>
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px 10px', fontSize: '12px', color: '#475569', paddingLeft: '24px' }}>Capital Expenditures</td>
                          {cashFlowData.map((cf, i) => (
                            <td key={i} style={{ padding: '8px 10px', fontSize: '12px', color: '#ef4444', textAlign: 'right' }}>
                              (${cf.capitalExpenditures.toLocaleString()})
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '2px solid #ef4444', background: '#fef2f2' }}>
                          <td style={{ padding: '10px', fontSize: '13px', fontWeight: '700', color: '#991b1b' }}>Investing Cash Flow</td>
                          {cashFlowData.map((cf, i) => (
                            <td key={i} style={{ padding: '10px', fontSize: '13px', fontWeight: '700', color: '#991b1b', textAlign: 'right' }}>
                              ${cf.investingCashFlow.toLocaleString()}
                            </td>
                          ))}
                        </tr>
                        
                        {/* Financing Activities */}
                        <tr style={{ background: '#eff6ff' }}>
                          <td colSpan={13} style={{ padding: '12px 10px', fontSize: '14px', fontWeight: '700', color: '#1e40af' }}>
                            FINANCING ACTIVITIES
                          </td>
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px 10px', fontSize: '12px', color: '#475569', paddingLeft: '24px' }}>Change in Long-Term Debt</td>
                          {cashFlowData.map((cf, i) => (
                            <td key={i} style={{ padding: '8px 10px', fontSize: '12px', color: cf.changeInDebt >= 0 ? '#10b981' : '#ef4444', textAlign: 'right' }}>
                              ${cf.changeInDebt.toLocaleString()}
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px 10px', fontSize: '12px', color: '#475569', paddingLeft: '24px' }}>Change in Equity</td>
                          {cashFlowData.map((cf, i) => (
                            <td key={i} style={{ padding: '8px 10px', fontSize: '12px', color: cf.changeInEquity >= 0 ? '#10b981' : '#ef4444', textAlign: 'right' }}>
                              ${cf.changeInEquity.toLocaleString()}
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '2px solid #3b82f6', background: '#eff6ff' }}>
                          <td style={{ padding: '10px', fontSize: '13px', fontWeight: '700', color: '#1e40af' }}>Financing Cash Flow</td>
                          {cashFlowData.map((cf, i) => (
                            <td key={i} style={{ padding: '10px', fontSize: '13px', fontWeight: '700', color: '#1e40af', textAlign: 'right' }}>
                              ${cf.financingCashFlow.toLocaleString()}
                            </td>
                          ))}
                        </tr>
                        
                        {/* Net Change */}
                        <tr style={{ borderBottom: '3px double #1e293b', background: '#f8fafc' }}>
                          <td style={{ padding: '12px 10px', fontSize: '14px', fontWeight: '700', color: '#1e293b' }}>Net Change in Cash</td>
                          {cashFlowData.map((cf, i) => (
                            <td key={i} style={{ padding: '12px 10px', fontSize: '14px', fontWeight: '700', color: cf.netCashChange >= 0 ? '#10b981' : '#ef4444', textAlign: 'right' }}>
                              ${cf.netCashChange.toLocaleString()}
                            </td>
                          ))}
                        </tr>
                        <tr style={{ background: '#fef3c7' }}>
                          <td style={{ padding: '10px', fontSize: '13px', fontWeight: '700', color: '#92400e' }}>Free Cash Flow</td>
                          {cashFlowData.map((cf, i) => (
                            <td key={i} style={{ padding: '10px', fontSize: '13px', fontWeight: '700', color: cf.freeCashFlow >= 0 ? '#065f46' : '#991b1b', textAlign: 'right' }}>
                              ${cf.freeCashFlow.toLocaleString()}
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '2px solid #e2e8f0' }}>
                          <td style={{ padding: '10px', fontSize: '13px', fontWeight: '600', color: '#475569' }}>Ending Cash Balance</td>
                          {cashFlowData.map((cf, i) => (
                            <td key={i} style={{ padding: '10px', fontSize: '13px', fontWeight: '600', color: '#1e293b', textAlign: 'right' }}>
                              ${cf.endingCash.toLocaleString()}
                            </td>
                          ))}
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>

                {/* Cash Flow Metrics */}
                <div style={{ background: 'white', borderRadius: '12px', padding: '32px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '24px' }}>Cash Flow Metrics</h2>
                  
                  <div style={{ overflowX: 'auto' }}>
                    <table style={{ width: '100%', fontSize: '12px', borderCollapse: 'collapse' }}>
                      <thead>
                        <tr style={{ borderBottom: '2px solid #e2e8f0' }}>
                          <th style={{ textAlign: 'left', padding: '10px', fontSize: '13px', fontWeight: '600', color: '#64748b', position: 'sticky', left: 0, background: 'white', minWidth: '180px' }}>Metric</th>
                          {cashFlowData.map((cf, i) => (
                            <th key={i} style={{ textAlign: 'right', padding: '10px', fontSize: '11px', fontWeight: '600', color: '#64748b', minWidth: '90px' }}>
                              {cf.month}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px 10px', fontSize: '12px', color: '#475569' }}>Cash Flow Margin (%)</td>
                          {cashFlowData.map((cf, i) => (
                            <td key={i} style={{ padding: '8px 10px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              {cf.cashFlowMargin.toFixed(1)}%
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px 10px', fontSize: '12px', color: '#475569' }}>Days Cash on Hand</td>
                          {cashFlowData.map((cf, i) => (
                            <td key={i} style={{ padding: '8px 10px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              {cf.daysCashOnHand.toFixed(0)} days
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px 10px', fontSize: '12px', color: '#475569' }}>Cash Conversion Rate</td>
                          {cashFlowData.map((cf, i) => (
                            <td key={i} style={{ padding: '8px 10px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              {cf.netIncome > 0 ? ((cf.operatingCashFlow / cf.netIncome) * 100).toFixed(0) : 'N/A'}%
                            </td>
                          ))}
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>

                {/* Key Insights */}
                <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '24px' }}>Cash Flow Insights</h2>
                  
                  <div style={{ display: 'grid', gap: '16px' }}>
                    {totalOperatingCF > 0 ? (
                      <div style={{ padding: '16px', background: '#f0fdf4', border: '1px solid #86efac', borderRadius: '8px' }}>
                        <div style={{ fontSize: '14px', fontWeight: '600', color: '#065f46', marginBottom: '4px' }}>✓ Positive Operating Cash Flow</div>
                        <div style={{ fontSize: '13px', color: '#047857' }}>
                          The company generated ${(totalOperatingCF / 1000).toFixed(0)}K in cash from operations over the last 12 months, indicating healthy operational performance.
                        </div>
                      </div>
                    ) : (
                      <div style={{ padding: '16px', background: '#fef2f2', border: '1px solid #fca5a5', borderRadius: '8px' }}>
                        <div style={{ fontSize: '14px', fontWeight: '600', color: '#991b1b', marginBottom: '4px' }}>⚠ Negative Operating Cash Flow</div>
                        <div style={{ fontSize: '13px', color: '#dc2626' }}>
                          The company consumed ${Math.abs(totalOperatingCF / 1000).toFixed(0)}K in cash from operations, which may indicate operational challenges.
                        </div>
                      </div>
                    )}
                    
                    {totalFreeCF > 0 ? (
                      <div style={{ padding: '16px', background: '#f0fdf4', border: '1px solid #86efac', borderRadius: '8px' }}>
                        <div style={{ fontSize: '14px', fontWeight: '600', color: '#065f46', marginBottom: '4px' }}>✓ Positive Free Cash Flow</div>
                        <div style={{ fontSize: '13px', color: '#047857' }}>
                          After capital expenditures, the company has ${(totalFreeCF / 1000).toFixed(0)}K in free cash flow available for growth, debt reduction, or distributions.
                        </div>
                      </div>
                    ) : (
                      <div style={{ padding: '16px', background: '#fffbeb', border: '1px solid #fcd34d', borderRadius: '8px' }}>
                        <div style={{ fontSize: '14px', fontWeight: '600', color: '#92400e', marginBottom: '4px' }}>⚠ Negative Free Cash Flow</div>
                        <div style={{ fontSize: '13px', color: '#b45309' }}>
                          Capital expenditures exceed operating cash flow by ${Math.abs(totalFreeCF / 1000).toFixed(0)}K, requiring external financing.
                        </div>
                      </div>
                    )}
                    
                    {avgCashFlowMargin > 15 ? (
                      <div style={{ padding: '16px', background: '#f0fdf4', border: '1px solid #86efac', borderRadius: '8px' }}>
                        <div style={{ fontSize: '14px', fontWeight: '600', color: '#065f46', marginBottom: '4px' }}>✓ Strong Cash Flow Margin</div>
                        <div style={{ fontSize: '13px', color: '#047857' }}>
                          Average cash flow margin of {avgCashFlowMargin.toFixed(1)}% indicates the company efficiently converts revenue into cash.
                        </div>
                      </div>
                    ) : avgCashFlowMargin < 5 ? (
                      <div style={{ padding: '16px', background: '#fef2f2', border: '1px solid #fca5a5', borderRadius: '8px' }}>
                        <div style={{ fontSize: '14px', fontWeight: '600', color: '#991b1b', marginBottom: '4px' }}>⚠ Low Cash Flow Margin</div>
                        <div style={{ fontSize: '13px', color: '#dc2626' }}>
                          Cash flow margin of {avgCashFlowMargin.toFixed(1)}% suggests challenges in converting revenue to cash. Review receivables collection and expense timing.
                        </div>
                      </div>
                    ) : null}
                  </div>
                </div>
              </>
            );
          })()}
        </div>
      )}

      {/* Data Mapping View - AI-Assisted Mapping Interface */}
      {(currentView === 'admin' && adminDashboardTab === 'data-mapping' && selectedCompanyId && qbRawData) && (() => {
        // CRITICAL SECURITY CHECK: Ensure qbRawData matches the selected company
        if (!qbRawData._companyId || qbRawData._companyId !== selectedCompanyId) {
          console.error(`🚨 SECURITY BLOCK: Data mismatch! Selected: ${selectedCompanyId}, Data companyId: ${qbRawData._companyId || 'MISSING'}`);
          return <div style={{ padding: '48px', textAlign: 'center' }}>
            <div style={{ fontSize: '18px', color: '#ef4444', marginBottom: '12px' }}>⚠️ Loading company data...</div>
            <div style={{ fontSize: '14px', color: '#64748b' }}>Please wait while we fetch the correct financial data.</div>
          </div>;
        }
        
        const currentCompany = companies.find(c => c.id === selectedCompanyId);
        const currentCompanyName = currentCompany?.name || 'Unknown';
        console.log(`🔄 ========================================`);
        console.log(`🔄 DATA MAPPING RENDERING (Refresh Key: ${dataRefreshKey})`);
        console.log(`🔄 Selected Company: "${currentCompanyName}" (ID: ${selectedCompanyId})`);
        console.log(`🔄 QB Data sync date:`, qbRawData.syncDate);
        console.log(`🔄 Data belongs to company:`, qbRawData._companyId);
        console.log(`🔄 Record ID:`, qbRawData._recordId);
        console.log(`🔄 ========================================`);
        
        // Helper function to recursively extract all rows from QB report
        // Extract from the last month column, not the total column
        // Calculate totals by summing detail rows instead of using QB's Summary rows
        const extractRows = (data: any, level: number = 0, parentSection: string = ''): any[] => {
          const result: any[] = [];
          
          if (!data) return result;
          
          // Check if this is a multi-column report (monthly breakdown)
          const columns = data.Columns?.Column || [];
          const hasMultipleMonths = columns.length > 2; // More than just account name + one value column
          
          const rows = Array.isArray(data?.Rows) ? data.Rows : (data?.Rows?.Row ? (Array.isArray(data.Rows.Row) ? data.Rows.Row : [data.Rows.Row]) : []);
          
          for (const row of rows) {
            if (row.type === 'Section') {
              // Add section header
              const sectionName = row.Header?.ColData?.[0]?.value || parentSection;
              if (sectionName) {
                result.push({
                  type: 'section',
                  name: sectionName,
                  level,
                  isHeader: true,
                  section: sectionName
                });
              }
              
              // Track index before nested rows for calculating section total
              const beforeNestedIndex = result.length;
              
              // Recursively process nested rows WITH section tracking
              if (row.Rows?.Row) {
                const nested = extractRows({ Rows: { Row: row.Rows.Row } }, level + 1, sectionName);
                result.push(...nested);
              }
              
              // Calculate section total by summing ONLY data rows (not subtotals) in this section
              const nestedRows = result.slice(beforeNestedIndex);
              let calculatedTotal = 0;
              nestedRows.forEach(r => {
                if (r.type === 'data') {  // Only sum detail rows, not subtotal rows
                  const numValue = parseFloat(r.value) || 0;
                  calculatedTotal += numValue;
                }
              });
              
              // Add section summary/total with calculated value
              if (row.Summary?.ColData) {
                const name = row.Summary.ColData[0]?.value || '';
                if (name) {
                  result.push({
                    type: 'total',
                    name,
                    value: calculatedTotal,
                    level,
                    isTotal: true
                  });
                }
              }
            } else if (row.type === 'Data' && row.ColData) {
              // Add data row (individual account)
              const name = row.ColData[0]?.value || '';
              // Extract from appropriate column: last month if multi-month, otherwise last column
              let value = '0';
              for (let i = row.ColData.length - 1; i >= 1; i--) {
                const colValue = row.ColData[i]?.value;
                if (colValue !== undefined && colValue !== '' && !isNaN(parseFloat(colValue))) {
                  value = colValue;
                  break;
                }
              }
              if (name) {
                result.push({
                  type: 'data',
                  name,
                  value,
                  level,
                  section: parentSection  // Track which section this account belongs to
                });
              }
            }
          }
          
          return result;
        };
        
        const plRows = extractRows(qbRawData.profitAndLoss);
        const bsRows = extractRows(qbRawData.balanceSheet);
        
        // Debug: Log all total rows to identify the Total Income discrepancy
        console.log('=== P&L Total Rows ===');
        plRows.filter(r => r.isTotal).forEach(r => {
          console.log(`${r.name}: ${r.value}`);
        });
        
        return (
          <div key={`data-mapping-${selectedCompanyId}-${dataRefreshKey}`} style={{ maxWidth: '1800px', margin: '0 auto', padding: '32px' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px' }}>
              <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', margin: 0 }}>Account Mapping</h1>
              {companyName && <div style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b' }}>{companyName}</div>}
            </div>
            <p style={{ fontSize: '14px', color: '#64748b', marginBottom: '16px' }}>
              Map QuickBooks accounts to your standardized financial fields • Synced: {qbRawData.syncDate ? new Date(qbRawData.syncDate).toLocaleString() : 'Unknown'}
            </p>

            {/* Lines of Business Section */}
            <div style={{ marginBottom: '24px' }}>
              <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>
                  Lines of Business
                </h2>
                <p style={{ fontSize: '13px', color: '#64748b', marginBottom: '16px' }}>
                  Define up to 5 lines of business to allocate revenue and expenses for detailed reporting
                </p>
                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '12px' }}>
                  {linesOfBusiness.map((lob, index) => (
                    <div key={index}>
                      <label style={{ display: 'block', fontSize: '12px', fontWeight: '600', color: '#475569', marginBottom: '4px' }}>
                        Line of Business {index + 1}
                      </label>
                      <input
                        type="text"
                        value={lob}
                        onChange={(e) => {
                          const updated = [...linesOfBusiness];
                          updated[index] = e.target.value;
                          setLinesOfBusiness(updated);
                        }}
                        placeholder={`e.g., ${index === 0 ? 'Consulting' : index === 1 ? 'Products' : index === 2 ? 'Services' : index === 3 ? 'Training' : 'Other'}`}
                        style={{
                          width: '100%',
                          padding: '8px 12px',
                          border: '1px solid #cbd5e1',
                          borderRadius: '6px',
                          fontSize: '13px',
                          color: '#1e293b'
                        }}
                      />
                    </div>
                  ))}
                </div>
              </div>
            </div>

            {/* AI-Assisted Mapping Section */}
            <div style={{ marginBottom: '32px' }}>
              <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>
                  <div>
                    <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>
                      AI-Assisted Account Mapping
                    </h2>
                    <p style={{ fontSize: '14px', color: '#64748b', margin: 0 }}>
                      Use AI to automatically suggest mappings from QuickBooks accounts to your standardized financial fields
                    </p>
                  </div>
                  <button
                    onClick={async () => {
                      setIsGeneratingMappings(true);
                      try {
                        // Build account classification lookup from Chart of Accounts
                        const accountClassifications: Record<string, string> = {};
                        const chartOfAccounts = qbRawData?.chartOfAccounts?.QueryResponse?.Account || [];
                        
                        chartOfAccounts.forEach((account: any) => {
                          const accountName = account.Name;
                          const accountType = account.AccountType || '';
                          
                          // Map QB AccountType to our simplified classifications
                          let classification = '';
                          if (accountType === 'Income' || accountType === 'Other Income') {
                            classification = 'Revenue';
                          } else if (accountType === 'Cost of Goods Sold') {
                            classification = 'Cost of Goods Sold';
                          } else if (accountType === 'Expense' || accountType === 'Other Expense') {
                            classification = 'Expense';
                          } else if (accountType.includes('Asset')) {
                            classification = 'Asset';
                          } else if (accountType.includes('Liability')) {
                            classification = 'Liability';
                          } else if (accountType === 'Equity') {
                            classification = 'Equity';
                          }
                          
                          if (accountName && classification) {
                            accountClassifications[accountName] = classification;
                          }
                        });
                        
                        if (Object.keys(accountClassifications).length === 0) {
                          console.error('⚠️ No Chart of Accounts data found! Classifications will be incorrect.');
                        }
                        
                        // Extract all account names WITH classifications from QB data
                        const qbAccountsWithClass: Array<{name: string, classification: string}> = [];
                        
                        // Use the SAME extractRows function that works for display
                        const plRows = extractRows(qbRawData.profitAndLoss);
                        const bsRows = extractRows(qbRawData.balanceSheet);
                        
                        // For P&L: Get individual REVENUE items AND individual EXPENSE items (not totals)
                        const revenueDataRows = plRows.filter(r => {
                          if (r.type !== 'data' || r.isHeader || r.isTotal) return false;
                          const section = (r.section || '').toLowerCase();
                          return section.includes('income') || section.includes('revenue');
                        });
                        const expenseDataRows = plRows.filter(r => {
                          if (r.type !== 'data' || r.isHeader || r.isTotal) return false;
                          const section = (r.section || '').toLowerCase();
                          return section.includes('expense') || section.includes('cost');
                        });
                        
                        // For Balance Sheet: Get individual items (all detail accounts)
                        const bsDataRows = bsRows.filter(r => r.type === 'data' && !r.isHeader && !r.isTotal);
                        
                        console.log('🔍 Revenue individual items:', revenueDataRows.length);
                        console.log('🔍 Expense individual items:', expenseDataRows.length);
                        console.log('🔍 BS individual items:', bsDataRows.length);
                        
                        // DEBUG: Pick first revenue account to track through entire process
                        const testAccount = revenueDataRows[0]?.name || expenseDataRows[0]?.name || bsDataRows[0]?.name;
                        console.log(`\n🔬 TRACKING TEST ACCOUNT: "${testAccount}"`);
                        if (testAccount) {
                          const testRow = plRows.find(r => r.name === testAccount) || bsRows.find(r => r.name === testAccount);
                          console.log('Test account raw data:', testRow);
                        }
                        
                        // Add revenue individual items
                        revenueDataRows.forEach(row => {
                          const classification = accountClassifications[row.name] || 'Revenue';
                          qbAccountsWithClass.push({ name: row.name, classification });
                        });
                        
                        // Add expense individual items
                        expenseDataRows.forEach(row => {
                          const classification = accountClassifications[row.name] || 'Expense';
                          qbAccountsWithClass.push({ name: row.name, classification });
                        });
                        
                        // Add BS individual items
                        bsDataRows.forEach(row => {
                          const classification = accountClassifications[row.name] || 'Asset';
                          qbAccountsWithClass.push({ name: row.name, classification });
                        });
                        
                        console.log('🔍 TOTAL accounts to map:', qbAccountsWithClass.length);
                        console.log('🔍 First 10 accounts:', qbAccountsWithClass.slice(0, 10).map(a => a.name));

                        const response = await fetch('/api/ai-mapping', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({ 
                            qbAccountsWithClass,
                            targetFields: []
                          })
                        });

                        if (!response.ok) {
                          throw new Error('Failed to generate mappings');
                        }

                        const data = await response.json();
                        setAiMappings(data.mappings || []);
                        
                        // DEBUG: Track test account through mapping
                        if (testAccount) {
                          const testMapping = data.mappings.find((m: any) => m.qbAccount === testAccount);
                          console.log(`\n🔬 TEST ACCOUNT MAPPING:`, testMapping);
                        }
                        
                        setShowMappingSection(true);
                      } catch (error: any) {
                        console.error('Error generating mappings:', error);
                        alert('Failed to generate AI mappings: ' + error.message);
                      } finally {
                        setIsGeneratingMappings(false);
                      }
                    }}
                    disabled={isGeneratingMappings || plRows.length === 0}
                    style={{
                      padding: '12px 24px',
                      background: isGeneratingMappings ? '#94a3b8' : '#667eea',
                      color: 'white',
                      border: 'none',
                      borderRadius: '8px',
                      fontSize: '14px',
                      fontWeight: '600',
                      cursor: isGeneratingMappings ? 'not-allowed' : 'pointer',
                      boxShadow: '0 2px 6px rgba(102, 126, 234, 0.3)',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '8px'
                    }}
                  >
                    {isGeneratingMappings ? (
                      <>
                        <span>⏳</span>
                        <span>Generating Mappings...</span>
                      </>
                    ) : (
                      <>
                        <span>🤖</span>
                        <span>Generate AI Mappings</span>
                      </>
                    )}
                  </button>
                </div>

                {showMappingSection && aiMappings.length > 0 && (
                  <div>
                    <div style={{ marginBottom: '16px', padding: '16px', background: '#f0f9ff', border: '1px solid #bae6fd', borderRadius: '8px' }}>
                      <div style={{ fontSize: '14px', fontWeight: '600', color: '#0369a1', marginBottom: '4px' }}>
                        ✨ AI Suggestions Generated
                      </div>
                      <div style={{ fontSize: '13px', color: '#0c4a6e' }}>
                        Review the suggested mappings below. You can edit any mapping before saving. Mappings will be used to automatically populate your standardized financial statements from QuickBooks data.
                      </div>
                    </div>

                    <div style={{ maxHeight: '500px', overflowY: 'auto', marginBottom: '16px' }}>
                      <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '13px' }}>
                        <thead style={{ position: 'sticky', top: 0, background: 'white', zIndex: 1 }}>
                          <tr style={{ borderBottom: '2px solid #e2e8f0' }}>
                            <th style={{ padding: '12px', textAlign: 'left', fontWeight: '600', color: '#1e293b', width: '10%' }}>Classification</th>
                            <th style={{ padding: '12px', textAlign: 'left', fontWeight: '600', color: '#1e293b', width: '20%' }}>QuickBooks Account</th>
                            <th style={{ padding: '12px', textAlign: 'right', fontWeight: '600', color: '#1e293b', width: '10%' }}>Amount</th>
                            <th style={{ padding: '12px', textAlign: 'left', fontWeight: '600', color: '#1e293b', width: '15%' }}>Target Field</th>
                            <th colSpan={linesOfBusiness.filter(lob => lob.trim() !== '').length || 1} style={{ padding: '12px', textAlign: 'center', fontWeight: '600', color: '#1e293b', borderLeft: '2px solid #e2e8f0', borderRight: '2px solid #e2e8f0' }}>
                              Line of Business Allocation (%)
                            </th>
                            <th style={{ padding: '12px', textAlign: 'center', fontWeight: '600', color: '#1e293b', width: '7%' }}>Total %</th>
                            <th style={{ padding: '12px', textAlign: 'left', fontWeight: '600', color: '#1e293b', width: '10%' }}>Confidence</th>
                          </tr>
                          <tr style={{ borderBottom: '2px solid #e2e8f0' }}>
                            <th colSpan={4}></th>
                            {linesOfBusiness.filter(lob => lob.trim() !== '').length > 0 ? (
                              linesOfBusiness.filter(lob => lob.trim() !== '').map((lob, idx) => (
                                <th key={idx} style={{ padding: '8px 4px', textAlign: 'center', fontSize: '11px', fontWeight: '600', color: '#475569', borderLeft: idx === 0 ? '2px solid #e2e8f0' : '1px solid #f1f5f9', borderRight: idx === linesOfBusiness.filter(l => l.trim() !== '').length - 1 ? '2px solid #e2e8f0' : 'none', background: '#f8fafc' }}>
                                  {lob}
                                </th>
                              ))
                            ) : (
                              <th style={{ padding: '8px 4px', textAlign: 'center', fontSize: '11px', fontWeight: '600', color: '#94a3b8', borderLeft: '2px solid #e2e8f0', borderRight: '2px solid #e2e8f0', background: '#f8fafc' }}>
                                Define LOBs above
                              </th>
                            )}
                            <th></th>
                            <th></th>
                          </tr>
                        </thead>
                        <tbody>
                          {(() => {
                            // Sort mappings by classification
                            const classificationOrder = ['Revenue', 'Cost of Goods Sold', 'COGS', 'Expense', 'Asset', 'Current Asset', 'Fixed Asset', 'Other Asset', 'Liability', 'Current Liability', 'Long Term Liability', 'Equity'];
                            const sortedMappings = [...aiMappings].sort((a, b) => {
                              const aClass = a.qbAccountClassification || '';
                              const bClass = b.qbAccountClassification || '';
                              const aIdx = classificationOrder.findIndex(c => aClass.includes(c) || c.includes(aClass));
                              const bIdx = classificationOrder.findIndex(c => bClass.includes(c) || c.includes(bClass));
                              if (aIdx === -1 && bIdx === -1) return 0;
                              if (aIdx === -1) return 1;
                              if (bIdx === -1) return -1;
                              return aIdx - bIdx;
                            });
                            
                            return sortedMappings.map((mapping, idx) => {
                              // Get amount from already-extracted plRows and bsRows
                              let amount = null;
                              if (plRows && bsRows) {
                                const allRows = [...plRows, ...bsRows];
                                const accountRow = allRows.find((row: any) => row.name === mapping.qbAccount);
                                if (accountRow) {
                                  amount = parseFloat(accountRow.value) || 0;
                                }
                              }
                              
                              return (
                                <tr key={`${mapping.qbAccount}-${idx}`} style={{ borderBottom: '1px solid #f1f5f9' }}>
                                  <td style={{ padding: '12px', color: '#475569', fontSize: '12px', fontWeight: '600' }}>
                                    {mapping.qbAccountClassification || '-'}
                                  </td>
                                  <td style={{ padding: '12px', color: '#475569' }}>{mapping.qbAccount}</td>
                                  <td style={{ padding: '12px', color: '#475569', textAlign: 'right', fontFamily: 'monospace' }}>
                                    {amount !== null && amount !== undefined ? `$${Number(amount).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}` : '-'}
                                  </td>
                                  <td style={{ padding: '12px' }}>
                                    <select
                                      value={mapping.targetField || ''}
                                      onChange={(e) => {
                                        const newValue = e.target.value;
                                        const updated = aiMappings.map(m => 
                                          m.qbAccount === mapping.qbAccount 
                                            ? { ...m, targetField: newValue }
                                            : m
                                        );
                                        setAiMappings(updated);
                                      }}
                                      style={{
                                        width: '100%',
                                        padding: '6px 10px',
                                        border: '1px solid #cbd5e1',
                                        borderRadius: '6px',
                                        fontSize: '13px',
                                        color: '#1e293b',
                                        cursor: 'pointer'
                                      }}
                                    >
                                      <option value="">-- Select Field --</option>
                                      <optgroup label="Income Statement">
                                        <option value="revenue">Revenue</option>
                                        <option value="expense">Total Expense</option>
                                        <option value="cogsPayroll">COGS - Payroll</option>
                                        <option value="cogsOwnerPay">COGS - Owner Pay</option>
                                        <option value="cogsContractors">COGS - Contractors</option>
                                        <option value="cogsMaterials">COGS - Materials</option>
                                        <option value="cogsCommissions">COGS - Commissions</option>
                                        <option value="cogsOther">COGS - Other</option>
                                        <option value="cogsTotal">COGS - Total</option>
                                        <option value="payroll">Payroll</option>
                                        <option value="ownerBasePay">Owner Base Pay</option>
                                        <option value="benefits">Benefits</option>
                                        <option value="insurance">Insurance</option>
                                        <option value="professionalFees">Professional Fees</option>
                                        <option value="subcontractors">Subcontractors</option>
                                        <option value="rent">Rent</option>
                                        <option value="taxLicense">Tax & License</option>
                                        <option value="phoneComm">Phone & Communication</option>
                                        <option value="infrastructure">Infrastructure/Utilities</option>
                                        <option value="autoTravel">Auto & Travel</option>
                                        <option value="salesExpense">Sales & Marketing</option>
                                        <option value="marketing">Marketing</option>
                                        <option value="trainingCert">Training & Certification</option>
                                        <option value="mealsEntertainment">Meals & Entertainment</option>
                                        <option value="interestExpense">Interest Expense</option>
                                        <option value="depreciationAmortization">Depreciation & Amortization</option>
                                        <option value="otherExpense">Other Expense</option>
                                        <option value="nonOperatingIncome">Non-Operating Income</option>
                                        <option value="extraordinaryItems">Extraordinary Items</option>
                                      </optgroup>
                                      <optgroup label="Balance Sheet - Assets">
                                        <option value="cash">Cash</option>
                                        <option value="ar">Accounts Receivable</option>
                                        <option value="inventory">Inventory</option>
                                        <option value="otherCA">Other Current Assets</option>
                                        <option value="tca">Total Current Assets</option>
                                        <option value="fixedAssets">Fixed Assets</option>
                                        <option value="otherAssets">Other Assets</option>
                                        <option value="totalAssets">Total Assets</option>
                                      </optgroup>
                                      <optgroup label="Balance Sheet - Liabilities">
                                        <option value="ap">Accounts Payable</option>
                                        <option value="otherCL">Other Current Liabilities</option>
                                        <option value="tcl">Total Current Liabilities</option>
                                        <option value="ltd">Long Term Debt</option>
                                        <option value="totalLiab">Total Liabilities</option>
                                      </optgroup>
                                      <optgroup label="Balance Sheet - Equity">
                                        <option value="totalEquity">Total Equity</option>
                                        <option value="totalLAndE">Total Liabilities & Equity</option>
                                      </optgroup>
                                    </select>
                                  </td>
                                  {linesOfBusiness.filter(lob => lob.trim() !== '').length > 0 ? (
                                    linesOfBusiness.filter(lob => lob.trim() !== '').map((lob, lobIdx) => {
                                      const lobAllocations = mapping.lobAllocations || {};
                                      const currentPercent = lobAllocations[lob] !== undefined ? lobAllocations[lob] : 0;
                                      const allAllocations = lobAllocations;
                                      const total = Object.values(allAllocations).reduce((sum: number, val: any) => sum + (val || 0), 0);
                                      const isOverAllocated = total > 100;
                                      const isUnderAllocated = total < 100 && total > 0;
                                      
                                      return (
                                        <td key={lobIdx} style={{ padding: '8px 4px', borderLeft: lobIdx === 0 ? '2px solid #e2e8f0' : '1px solid #f1f5f9', borderRight: lobIdx === linesOfBusiness.filter(l => l.trim() !== '').length - 1 ? '2px solid #e2e8f0' : 'none', background: '#fafafa' }}>
                                          <input
                                            type="number"
                                            min="0"
                                            max="100"
                                            value={currentPercent}
                                            onChange={(e) => {
                                              const newValue = parseInt(e.target.value) || 0;
                                              const clamped = Math.min(Math.max(newValue, 0), 100);
                                              const updated = aiMappings.map(m => 
                                                m.qbAccount === mapping.qbAccount 
                                                  ? { 
                                                      ...m, 
                                                      lobAllocations: {
                                                        ...(m.lobAllocations || {}),
                                                        [lob]: clamped
                                                      }
                                                    }
                                                  : m
                                              );
                                              setAiMappings(updated);
                                            }}
                                            style={{
                                              width: '50px',
                                              padding: '4px 6px',
                                              border: isOverAllocated ? '2px solid #ef4444' : isUnderAllocated ? '2px solid #f59e0b' : '1px solid #cbd5e1',
                                              borderRadius: '4px',
                                              fontSize: '12px',
                                              color: '#1e293b',
                                              textAlign: 'center',
                                              background: 'white'
                                            }}
                                            title={isOverAllocated ? `Total allocation is ${total}% (exceeds 100%)` : isUnderAllocated ? `Total allocation is ${total}% (less than 100%)` : `Total allocation: ${total}%`}
                                          />
                                        </td>
                                      );
                                    })
                                  ) : (
                                    <td style={{ padding: '12px', textAlign: 'center', color: '#94a3b8', fontSize: '12px', borderLeft: '2px solid #e2e8f0', borderRight: '2px solid #e2e8f0', background: '#fafafa' }}>
                                      -
                                    </td>
                                  )}
                                  <td style={{ padding: '12px', textAlign: 'center' }}>
                                    {(() => {
                                      const lobAllocations = mapping.lobAllocations || {};
                                      const total = Object.values(lobAllocations).reduce((sum: number, val: any) => sum + (val || 0), 0);
                                      const isOverAllocated = total > 100;
                                      const isUnderAllocated = total < 100 && total > 0;
                                      const isPerfect = total === 100;
                                      
                                      return (
                                        <span style={{
                                          padding: '4px 8px',
                                          borderRadius: '4px',
                                          fontSize: '12px',
                                          fontWeight: '600',
                                          background: isOverAllocated ? '#fee2e2' : isUnderAllocated ? '#fef3c7' : isPerfect ? '#dcfce7' : '#f1f5f9',
                                          color: isOverAllocated ? '#dc2626' : isUnderAllocated ? '#d97706' : isPerfect ? '#16a34a' : '#64748b'
                                        }}>
                                          {total}%
                                        </span>
                                      );
                                    })()}
                                  </td>
                                  <td style={{ padding: '12px' }}>
                                    <select
                                      value={mapping.confidence}
                                      onChange={(e) => {
                                        const newValue = e.target.value;
                                        const updated = aiMappings.map(m => 
                                          m.qbAccount === mapping.qbAccount 
                                            ? { ...m, confidence: newValue }
                                            : m
                                        );
                                        setAiMappings(updated);
                                      }}
                                      style={{
                                        padding: '6px 10px',
                                        border: '1px solid #cbd5e1',
                                        borderRadius: '6px',
                                        fontSize: '13px',
                                        color: '#1e293b',
                                        background: mapping.confidence === 'high' ? '#dcfce7' : (mapping.confidence === 'medium' ? '#fef3c7' : '#fee2e2')
                                      }}
                                    >
                                      <option value="high">High</option>
                                      <option value="medium">Medium</option>
                                      <option value="low">Low</option>
                                    </select>
                                  </td>
                                </tr>
                              );
                            });
                          })()}
                        </tbody>
                      </table>
                    </div>

                    {/* Action Buttons Section */}
                    <div style={{ marginTop: '24px', padding: '20px', background: '#f8fafc', borderRadius: '8px', border: '1px solid #e2e8f0' }}>
                      {/* Row 1: Mapping Controls */}
                      <div style={{ display: 'flex', gap: '12px', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px', paddingBottom: '16px', borderBottom: '1px solid #e2e8f0' }}>
                        <div>
                          <h3 style={{ fontSize: '14px', fontWeight: '600', color: '#1e293b', marginBottom: '4px' }}>Account Mapping Controls</h3>
                          <p style={{ fontSize: '12px', color: '#64748b', margin: 0 }}>Save your mappings before processing data</p>
                        </div>
                        <div style={{ display: 'flex', gap: '12px', alignItems: 'center' }}>
                          <button
                            onClick={async () => {
                              if (confirm('Are you sure you want to clear all mappings? This will delete saved mappings from the database.')) {
                                try {
                                  // Delete from database
                                  const response = await fetch(`/api/account-mappings?companyId=${selectedCompanyId}`, {
                                    method: 'DELETE'
                                  });
                                  if (!response.ok) throw new Error('Failed to delete mappings');
                                  
                                  // Clear from state
                                  setAiMappings([]);
                                  alert('All mappings cleared! ✅');
                                } catch (error: any) {
                                  alert('Failed to clear mappings: ' + error.message);
                                }
                              }
                            }}
                            disabled={aiMappings.length === 0}
                            style={{
                              padding: '10px 20px',
                              background: aiMappings.length === 0 ? '#f1f5f9' : '#fee2e2',
                              color: aiMappings.length === 0 ? '#94a3b8' : '#dc2626',
                              border: '1px solid #fecaca',
                              borderRadius: '6px',
                              fontSize: '13px',
                              fontWeight: '600',
                              cursor: aiMappings.length === 0 ? 'not-allowed' : 'pointer'
                            }}
                          >
                            🗑️ Clear All
                          </button>
                          <button
                            onClick={() => {
                              setShowMappingSection(false);
                              setAiMappings([]);
                            }}
                            style={{
                              padding: '10px 20px',
                              background: 'white',
                              color: '#64748b',
                              border: '1px solid #cbd5e1',
                              borderRadius: '6px',
                              fontSize: '13px',
                              fontWeight: '600',
                              cursor: 'pointer'
                            }}
                          >
                            Cancel
                          </button>
                          <button
                            onClick={async () => {
                              setIsSavingMappings(true);
                              try {
                                // Deduplicate mappings by qbAccount (keep first occurrence)
                                const uniqueMappings = aiMappings.filter((m, index, self) =>
                                  index === self.findIndex((t) => t.qbAccount === m.qbAccount)
                                );
                                
                                console.log(`Deduplicating mappings: ${aiMappings.length} -> ${uniqueMappings.length}`);
                                
                                const response = await fetch('/api/account-mappings', {
                                  method: 'POST',
                                  headers: { 'Content-Type': 'application/json' },
                                  body: JSON.stringify({
                                    companyId: selectedCompanyId,
                                    mappings: uniqueMappings
                                  })
                                });

                                if (!response.ok) {
                                  const errorData = await response.json();
                                  throw new Error(errorData.details || 'Failed to save mappings');
                                }

                                // Update local state to reflect deduplicated mappings
                                setAiMappings(uniqueMappings);
                                
                                alert('Mappings saved successfully! ✅');
                                // Keep the section visible after saving so users can see their saved mappings
                              } catch (error: any) {
                                console.error('Error saving mappings:', error);
                                alert('Failed to save mappings: ' + error.message);
                              } finally {
                                setIsSavingMappings(false);
                              }
                            }}
                            disabled={isSavingMappings}
                            style={{
                              padding: '10px 24px',
                              background: isSavingMappings ? '#94a3b8' : '#10b981',
                              color: 'white',
                              border: 'none',
                              borderRadius: '6px',
                              fontSize: '13px',
                              fontWeight: '600',
                              cursor: isSavingMappings ? 'not-allowed' : 'pointer',
                              boxShadow: '0 2px 6px rgba(16, 185, 129, 0.3)'
                            }}
                          >
                            {isSavingMappings ? 'Saving...' : '💾 Save Mappings'}
                          </button>
                        </div>
                      </div>

                      {/* Row 2: Data Processing */}
                      <div style={{ display: 'flex', gap: '12px', justifyContent: 'space-between', alignItems: 'center' }}>
                        <div>
                          <h3 style={{ fontSize: '14px', fontWeight: '600', color: '#1e293b', marginBottom: '4px' }}>Data Processing</h3>
                          <p style={{ fontSize: '12px', color: '#64748b', margin: 0 }}>Process QuickBooks data using your saved mappings</p>
                        </div>
                        <div style={{ display: 'flex', gap: '12px', alignItems: 'center' }}>
                      <button
                        onClick={async () => {
                          if (!aiMappings || aiMappings.length === 0) {
                            alert('Please save account mappings first!');
                            return;
                          }
                          
                          if (!qbRawData || !qbRawData.profitAndLoss) {
                            alert('No QuickBooks data available!');
                            return;
                          }
                          
                          setIsProcessingMonthlyData(true);
                          try {
                            console.log('🔄 Processing 36 months of data using mappings...');
                            console.log('📋 Total mappings:', aiMappings.length);
                            
                            // DEBUG: Track Professional Services expense account
                            const testMapping = aiMappings.find(m => 
                              m.qbAccount?.toLowerCase().includes('professional') || 
                              m.qbAccount?.toLowerCase().includes('accounting') ||
                              m.qbAccount?.toLowerCase().includes('legal')
                            );
                            const testAccountName = testMapping?.qbAccount;
                            console.log(`🔬 TRACKING PROFESSIONAL SERVICES: "${testAccountName}"`, testMapping);
                            
                            // Get column information from QB report
                            const plColumns = qbRawData.profitAndLoss.Columns?.Column || [];
                            const bsColumns = qbRawData.balanceSheet?.Columns?.Column || [];
                            
                            console.log('QB P&L Columns:', plColumns.map((c: any) => c.ColTitle || c.ColType));
                            
                            // The first column is account names, rest are data columns
                            // Filter out "Total" column if present (usually the last one)
                            const monthColumns = plColumns.slice(1).filter((col: any) => {
                              const title = col.ColTitle || '';
                              return title && title.toLowerCase() !== 'total';
                            });
                            console.log(`Found ${monthColumns.length} month columns in P&L`);
                            console.log('Month column headers:', monthColumns.map((c: any) => c.ColTitle));
                            
                            // Helper function to extract all account values for a specific column index
                            // Uses the SAME recursive logic as the working P&L display extraction
                            const extractColumnData = (reportData: any, columnIndex: number, isFirstCall = false) => {
                              const accountValues: { [accountName: string]: number } = {};
                              
                              const processRows = (rows: any[], depth = 0) => {
                                for (const row of rows) {
                                  if (row.type === 'Section') {
                                    // Process nested rows first
                                    if (row.Rows?.Row) {
                                      const subRows = Array.isArray(row.Rows.Row) ? row.Rows.Row : [row.Rows.Row];
                                      processRows(subRows, depth + 1);
                                    }
                                    
                                    // Get section total from Summary row
                                    if (row.Summary?.ColData) {
                                      const accountName = row.Summary.ColData[0]?.value || '';
                                      const value = row.Summary.ColData[columnIndex]?.value;
                                      
                                      if (accountName) {
                                        const numValue = value === '' || value === undefined ? 0 : parseFloat(value);
                                        accountValues[accountName] = isNaN(numValue) ? 0 : numValue;
                                        
                                        if (isFirstCall && accountName.toLowerCase().includes('legal')) {
                                          console.log(`\n💰 Found Section Summary "${accountName}":`, {
                                      columnIndex,
                                      value,
                                            numValue
                                          });
                                        }
                                      }
                                    }
                                  } else if (row.type === 'Data' && row.ColData) {
                                    // Get detail account value
                                    const accountName = row.ColData[0]?.value || '';
                                    const value = row.ColData[columnIndex]?.value;
                                    
                                  if (accountName) {
                                    const numValue = value === '' || value === undefined ? 0 : parseFloat(value);
                                    accountValues[accountName] = isNaN(numValue) ? 0 : numValue;
                                  }
                                }
                                }
                              };
                              
                              const rows = Array.isArray(reportData?.Rows) ? reportData.Rows : 
                                          (reportData?.Rows?.Row ? (Array.isArray(reportData.Rows.Row) ? reportData.Rows.Row : [reportData.Rows.Row]) : []);
                              
                              processRows(rows, 0);
                              
                              if (isFirstCall) {
                                console.log(`\n📊 Extraction results: Found ${Object.keys(accountValues).length} accounts`);
                              }
                              
                              return accountValues;
                            };
                            
                            // Process each month's data
                            const monthlyData: any[] = [];
                            
                            for (let i = 1; i <= monthColumns.length; i++) {
                              // Extract data for this column (enable debug logging for first month)
                              const plData = extractColumnData(qbRawData.profitAndLoss, i, i === 1);
                              const bsData = qbRawData.balanceSheet ? extractColumnData(qbRawData.balanceSheet, i, false) : {};
                              
                              // Debug logging for first few months
                              if (i <= 3) {
                                console.log(`\n🔍 Month ${i} extraction debug:`);
                                console.log(`P&L data keys:`, Object.keys(plData).slice(0, 10));
                                console.log(`P&L sample values:`, Object.entries(plData).slice(0, 5));
                                console.log(`BS data keys:`, Object.keys(bsData).slice(0, 10));
                              }
                              
                              // Debug mappings for first month
                              if (i === 1) {
                                console.log(`\n🗺️ Total mappings: ${aiMappings.length}`);
                                const targetFieldCounts: Record<string, number> = {};
                                aiMappings.forEach(m => {
                                  targetFieldCounts[m.targetField] = (targetFieldCounts[m.targetField] || 0) + 1;
                                });
                                console.log(`Target field distribution:`, targetFieldCounts);
                                const revenueMappings = aiMappings.filter(m => m.targetField === 'revenue');
                                console.log(`Revenue mappings (${revenueMappings.length}):`, revenueMappings.map(m => m.qbAccount));
                              }
                              
                              // Initialize month record
                              const monthRecord: any = {
                                revenue: 0,
                                expense: 0,
                                cogsPayroll: 0,
                                cogsOwnerPay: 0,
                                cogsContractors: 0,
                                cogsMaterials: 0,
                                cogsCommissions: 0,
                                cogsOther: 0,
                                cogsTotal: 0,
                                payroll: 0,
                                ownerBasePay: 0,
                                benefits: 0,
                                insurance: 0,
                                professionalFees: 0,
                                subcontractors: 0,
                                rent: 0,
                                taxLicense: 0,
                                phoneComm: 0,
                                infrastructure: 0,
                                autoTravel: 0,
                                salesExpense: 0,
                                marketing: 0,
                                trainingCert: 0,
                                mealsEntertainment: 0,
                                interestExpense: 0,
                                depreciationAmortization: 0,
                                otherExpense: 0,
                                nonOperatingIncome: 0,
                                extraordinaryItems: 0,
                                cash: 0,
                                ar: 0,
                                inventory: 0,
                                otherCA: 0,
                                tca: 0,
                                fixedAssets: 0,
                                otherAssets: 0,
                                totalAssets: 0,
                                ap: 0,
                                otherCL: 0,
                                tcl: 0,
                                ltd: 0,
                                totalLiab: 0,
                                totalEquity: 0,
                                totalLAndE: 0
                              };
                              
                              // Apply mappings to populate the month record
                              aiMappings.forEach((mapping, idx) => {
                                const qbAccount = mapping.qbAccount;
                                const targetField = mapping.targetField;
                                const classification = mapping.qbAccountClassification || '';
                                
                                // Get value from appropriate data source
                                const isBalanceSheet = classification.includes('Asset') || 
                                                      classification.includes('Liability') || 
                                                      classification.includes('Equity');
                                const value = isBalanceSheet ? (bsData[qbAccount] || 0) : (plData[qbAccount] || 0);
                                
                                // DEBUG: Track test account through every month
                                if (qbAccount === testAccountName) {
                                  console.log(`\n🔬 MONTH ${i} - TEST ACCOUNT "${testAccountName}":`, {
                                    targetField,
                                    classification,
                                    isBalanceSheet,
                                    foundInPLData: qbAccount in plData,
                                    foundInBSData: qbAccount in bsData,
                                    extractedValue: value,
                                    plDataKeys: Object.keys(plData).slice(0, 5),
                                    bsDataKeys: Object.keys(bsData).slice(0, 5)
                                  });
                                }
                                
                                // Map to target field
                                if (targetField === 'revenue') monthRecord.revenue += value;
                                else if (targetField === 'expense') monthRecord.expense += value;
                                else if (targetField === 'cogsPayroll') monthRecord.cogsPayroll += value;
                                else if (targetField === 'cogsOwnerPay') monthRecord.cogsOwnerPay += value;
                                else if (targetField === 'cogsContractors') monthRecord.cogsContractors += value;
                                else if (targetField === 'cogsMaterials') monthRecord.cogsMaterials += value;
                                else if (targetField === 'cogsCommissions') monthRecord.cogsCommissions += value;
                                else if (targetField === 'cogsOther') monthRecord.cogsOther += value;
                                else if (targetField === 'payroll') monthRecord.payroll += value;
                                else if (targetField === 'ownerBasePay') monthRecord.ownerBasePay += value;
                                else if (targetField === 'benefits') monthRecord.benefits += value;
                                else if (targetField === 'insurance') monthRecord.insurance += value;
                                else if (targetField === 'professionalFees') monthRecord.professionalFees += value;
                                else if (targetField === 'subcontractors') monthRecord.subcontractors += value;
                                else if (targetField === 'rent') monthRecord.rent += value;
                                else if (targetField === 'taxLicense') monthRecord.taxLicense += value;
                                else if (targetField === 'phoneComm') monthRecord.phoneComm += value;
                                else if (targetField === 'infrastructure') monthRecord.infrastructure += value;
                                else if (targetField === 'autoTravel') monthRecord.autoTravel += value;
                                else if (targetField === 'salesExpense') monthRecord.salesExpense += value;
                                else if (targetField === 'marketing') monthRecord.marketing += value;
                                else if (targetField === 'trainingCert') monthRecord.trainingCert += value;
                                else if (targetField === 'mealsEntertainment') monthRecord.mealsEntertainment += value;
                                else if (targetField === 'interestExpense') monthRecord.interestExpense += value;
                                else if (targetField === 'depreciationAmortization') monthRecord.depreciationAmortization += value;
                                else if (targetField === 'otherExpense') monthRecord.otherExpense += value;
                                else if (targetField === 'nonOperatingIncome') monthRecord.nonOperatingIncome += value;
                                else if (targetField === 'extraordinaryItems') monthRecord.extraordinaryItems += value;
                                else if (targetField === 'cash') monthRecord.cash += value;
                                else if (targetField === 'ar') monthRecord.ar += value;
                                else if (targetField === 'inventory') monthRecord.inventory += value;
                                else if (targetField === 'otherCA') monthRecord.otherCA += value;
                                else if (targetField === 'tca') monthRecord.tca += value;
                                else if (targetField === 'fixedAssets') monthRecord.fixedAssets += value;
                                else if (targetField === 'otherAssets') monthRecord.otherAssets += value;
                                else if (targetField === 'totalAssets') monthRecord.totalAssets += value;
                                else if (targetField === 'ap') monthRecord.ap += value;
                                else if (targetField === 'otherCL') monthRecord.otherCL += value;
                                else if (targetField === 'tcl') monthRecord.tcl += value;
                                else if (targetField === 'ltd') monthRecord.ltd += value;
                                else if (targetField === 'totalLiab') monthRecord.totalLiab += value;
                                else if (targetField === 'totalEquity') monthRecord.totalEquity += value;
                                else if (targetField === 'totalLAndE') monthRecord.totalLAndE += value;
                              });
                              
                              // Calculate totals
                              monthRecord.cogsTotal = monthRecord.cogsPayroll + monthRecord.cogsOwnerPay + 
                                                     monthRecord.cogsContractors + monthRecord.cogsMaterials + 
                                                     monthRecord.cogsCommissions + monthRecord.cogsOther;
                              monthRecord.tca = monthRecord.cash + monthRecord.ar + monthRecord.inventory + monthRecord.otherCA;
                              monthRecord.totalAssets = monthRecord.tca + monthRecord.fixedAssets + monthRecord.otherAssets;
                              monthRecord.tcl = monthRecord.ap + monthRecord.otherCL;
                              monthRecord.totalLiab = monthRecord.tcl + monthRecord.ltd;
                              monthRecord.totalLAndE = monthRecord.totalLiab + monthRecord.totalEquity;
                              
                              // Get month date from column header
                              const columnHeader = monthColumns[i - 1]?.ColTitle || '';
                              let monthDate = new Date();
                              let parsedSuccessfully = false;
                              
                              // Try to parse month from column header (e.g., "Sep 30, 2022", "Oct 2022", "Sep-2025")
                              if (columnHeader) {
                                const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                                const fullMonthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                                
                                // Remove commas and split on spaces/dashes
                                const cleanHeader = columnHeader.replace(/,/g, '');
                                const parts = cleanHeader.split(/[-\s]+/);
                                
                                // Find month name (could be at any position)
                                let monthIndex = -1;
                                let monthPart = '';
                                for (const part of parts) {
                                  monthIndex = monthNames.indexOf(part);
                                  if (monthIndex === -1) {
                                    monthIndex = fullMonthNames.indexOf(part);
                                  }
                                  if (monthIndex >= 0) {
                                    monthPart = part;
                                    break;
                                  }
                                }
                                
                                // Find year (4-digit number)
                                let year = 0;
                                for (const part of parts) {
                                  const num = parseInt(part);
                                  if (!isNaN(num) && num >= 2000 && num <= 2100) {
                                    year = num;
                                    break;
                                  }
                                }
                                
                                if (monthIndex >= 0 && year > 0) {
                                  monthDate = new Date(year, monthIndex, 1);
                                  parsedSuccessfully = true;
                                }
                              }
                              
                              if (!parsedSuccessfully) {
                                console.warn(`Failed to parse date from column header: "${columnHeader}"`);
                              }
                              
                              monthRecord.monthDate = monthDate.toISOString();
                              monthlyData.push(monthRecord);
                              
                              // Log first few months for debugging
                              if (i <= 3) {
                                console.log(`Month ${i}: Column="${columnHeader}", Date=${monthDate.toISOString().substring(0, 7)}, Revenue=${monthRecord.revenue}`);
                              }
                            }
                            
                            console.log(`✅ Processed ${monthlyData.length} months of data`);
                            console.log('First month:', monthlyData[0]);
                            console.log('Last month:', monthlyData[monthlyData.length - 1]);
                            console.log('Date range:', monthlyData[0]?.monthDate?.substring(0, 7), 'to', monthlyData[monthlyData.length - 1]?.monthDate?.substring(0, 7));
                            
                            // DEBUG: Final summary of test account
                            if (testAccountName) {
                              const testMapping = aiMappings.find(m => m.qbAccount === testAccountName);
                              const targetField = testMapping?.targetField;
                              console.log(`\n🔬 FINAL SUMMARY - TEST ACCOUNT "${testAccountName}":`);
                              console.log(`Mapped to field: ${targetField}`);
                              console.log('Values across all months:');
                              monthlyData.forEach((month, idx) => {
                                if (targetField && month[targetField]) {
                                  console.log(`  Month ${idx + 1}: ${month[targetField]}`);
                                }
                              });
                            }
                            
                            // Check if we have less than expected months
                            if (monthlyData.length < 12) {
                              console.warn(`⚠️ WARNING: Only ${monthlyData.length} months of data found. Expected at least 12 months for proper reporting.`);
                              if (monthlyData.length === 1) {
                                alert(`⚠️ Only 1 month of data was processed!\n\nQuickBooks may have returned a single-column report instead of monthly breakdown.\n\nThe reports need at least 12 months of data to function properly.\n\nTip: Check the QuickBooks sync settings or try re-syncing.`);
                              } else {
                                alert(`⚠️ Only ${monthlyData.length} months of data processed.\n\nReports work best with at least 12 months of data.`);
                              }
                            }
                            
                            // Save to database
                            if (!currentUser) {
                              throw new Error('User not logged in');
                            }
                            
                            const saveResponse = await fetch('/api/financials', {
                              method: 'POST',
                              headers: { 'Content-Type': 'application/json' },
                              body: JSON.stringify({
                                companyId: selectedCompanyId,
                                uploadedByUserId: currentUser.id,
                                fileName: 'QuickBooks Sync Data',
                                rawData: qbRawData,
                                columnMapping: { source: 'quickbooks', mappings: aiMappings },
                                monthlyData
                              })
                            });
                            
                            if (!saveResponse.ok) {
                              throw new Error('Failed to save monthly data');
                            }
                            
                            alert(`✅ Successfully processed and saved ${monthlyData.length} months of financial data!`);
                          } catch (error: any) {
                            console.error('Error processing monthly data:', error);
                            alert('Failed to process monthly data: ' + error.message);
                          } finally {
                            setIsProcessingMonthlyData(false);
                          }
                        }}
                        disabled={isProcessingMonthlyData || aiMappings.length === 0}
                        style={{
                          padding: '10px 24px',
                          background: isProcessingMonthlyData || aiMappings.length === 0 ? '#94a3b8' : '#3b82f6',
                          color: 'white',
                          border: 'none',
                          borderRadius: '6px',
                          fontSize: '13px',
                          fontWeight: '600',
                          cursor: isProcessingMonthlyData || aiMappings.length === 0 ? 'not-allowed' : 'pointer',
                          boxShadow: '0 2px 6px rgba(59, 130, 246, 0.3)'
                        }}
                      >
                        {isProcessingMonthlyData ? 'Processing...' : '⚙️ Process & Save Monthly Data'}
                      </button>
                          <button
                            onClick={async () => {
                              try {
                                // Fetch the saved monthly data from the API
                                const response = await fetch(`/api/financials?companyId=${selectedCompanyId}`);
                                if (!response.ok) {
                                  throw new Error('Failed to load financial data');
                                }
                                
                                const data = await response.json();
                                const monthlyData = data.records?.[0]?.monthlyData || [];
                                
                                if (!monthlyData || monthlyData.length === 0) {
                                  alert('No financial data found. Please process the monthly data first.');
                                  return;
                                }
                                
                                // Convert to CSV
                                const headers = Object.keys(monthlyData[0]).filter(key => key !== 'id' && key !== 'companyId' && key !== 'createdAt' && key !== 'updatedAt');
                                const csvContent = [
                                  headers.join(','),
                                  ...monthlyData.map((row: any) => 
                                    headers.map(header => {
                                      const value = row[header];
                                      // Format dates nicely
                                      if (header === 'monthDate' && value) {
                                        return new Date(value).toISOString().substring(0, 7); // YYYY-MM format
                                      }
                                      // Handle numbers
                                      if (typeof value === 'number') {
                                        return value;
                                      }
                                      // Escape commas in strings
                                      if (typeof value === 'string' && value.includes(',')) {
                                        return `"${value}"`;
                                      }
                                      return value || 0;
                                    }).join(',')
                                  )
                                ].join('\n');
                                
                                // Create download link
                                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                                const link = document.createElement('a');
                                const url = URL.createObjectURL(blob);
                                const companyName = companies.find(c => c.id === selectedCompanyId)?.name || 'Company';
                                const fileName = `${companyName.replace(/[^a-zA-Z0-9]/g, '_')}_Financial_Data_${new Date().toISOString().substring(0, 10)}.csv`;
                                
                                link.setAttribute('href', url);
                                link.setAttribute('download', fileName);
                                link.style.visibility = 'hidden';
                                document.body.appendChild(link);
                                link.click();
                                document.body.removeChild(link);
                                
                              } catch (error: any) {
                                console.error('Error downloading data:', error);
                                alert('Failed to download data: ' + error.message);
                              }
                            }}
                            style={{
                              padding: '10px 24px',
                              background: '#10b981',
                              color: 'white',
                              border: 'none',
                              borderRadius: '6px',
                              fontSize: '13px',
                              fontWeight: '600',
                              cursor: 'pointer',
                              boxShadow: '0 2px 6px rgba(16, 185, 129, 0.3)'
                            }}
                          >
                            📥 Download Mapped Data (CSV)
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        );
      })()}

      {/* Financial Statements View - P&L and Balance Sheet ONLY */}
      {currentView === 'financial-statements' && selectedCompanyId && qbRawData && (() => {
        // CRITICAL SECURITY CHECK: Ensure qbRawData matches the selected company
        if (!qbRawData._companyId || qbRawData._companyId !== selectedCompanyId) {
          console.error(`🚨 SECURITY BLOCK: Data mismatch! Selected: ${selectedCompanyId}, Data companyId: ${qbRawData._companyId || 'MISSING'}`);
          return <div style={{ padding: '48px', textAlign: 'center' }}>
            <div style={{ fontSize: '18px', color: '#ef4444', marginBottom: '12px' }}>⚠️ Loading company data...</div>
            <div style={{ fontSize: '14px', color: '#64748b' }}>Please wait while we fetch the correct financial data.</div>
          </div>;
        }
        
        const currentCompany = companies.find(c => c.id === selectedCompanyId);
        const currentCompanyName = currentCompany?.name || 'Unknown';
        console.log(`📊 ========================================`);
        console.log(`📊 FINANCIAL STATEMENTS RENDERING (Refresh Key: ${dataRefreshKey})`);
        console.log(`📊 Selected Company: "${currentCompanyName}" (ID: ${selectedCompanyId})`);
        console.log(`📊 QB Data sync date:`, qbRawData.syncDate);
        console.log(`📊 Data belongs to company:`, qbRawData._companyId);
        console.log(`📊 Record ID:`, qbRawData._recordId);
        console.log(`📊 ========================================`);

        // Helper function to recursively extract all rows from QB report
        const extractRows = (data: any, level: number = 0, parentSection: string = ''): any[] => {
          const result: any[] = [];
          if (!data?.Rows?.Row) return result;
          const rows = Array.isArray(data.Rows.Row) ? data.Rows.Row : [data.Rows.Row];
          
          for (const row of rows) {
            if (row.type === 'Section') {
              const headerName = row.Header?.ColData?.[0]?.value || '';
              result.push({
                type: 'header',
                name: headerName,
                level,
                isHeader: true,
                section: headerName
              });
              if (row.Rows?.Row) {
                const childRows = Array.isArray(row.Rows.Row) ? row.Rows.Row : [row.Rows.Row];
                result.push(...extractRows({ Rows: { Row: childRows } }, level + 1, headerName));
              }
              if (row.Summary?.ColData) {
                const summaryName = row.Summary.ColData[0]?.value || `Total ${headerName}`;
                const value = row.Summary.ColData[row.Summary.ColData.length - 1]?.value;
                let calculatedTotal = 0;
                const dataRows = result.filter(r => r.section === headerName && r.type === 'data');
                if (dataRows.length > 0) {
                  calculatedTotal = dataRows.reduce((sum, r) => sum + (parseFloat(r.value) || 0), 0);
                } else {
                  calculatedTotal = parseFloat(value) || 0;
                }
                if (summaryName && !isNaN(calculatedTotal)) {
                  result.push({
                    type: 'total',
                    name: summaryName,
                    value: calculatedTotal,
                    level,
                    isTotal: true
                  });
                }
              }
            } else if (row.type === 'Data' && row.ColData) {
              const name = row.ColData[0]?.value || '';
              let value = '0';
              for (let i = row.ColData.length - 1; i >= 1; i--) {
                const colValue = row.ColData[i]?.value;
                if (colValue !== undefined && colValue !== '' && !isNaN(parseFloat(colValue))) {
                  value = colValue;
                  break;
                }
              }
              result.push({
                type: 'data',
                name,
                value: parseFloat(value) || 0,
                level,
                section: parentSection,
                colData: row.ColData
              });
            }
          }
          return result;
        };

        const plRows = qbRawData.profitAndLoss?.Rows?.Row ? extractRows(qbRawData.profitAndLoss) : [];
        const bsRows = qbRawData.balanceSheet?.Rows?.Row ? extractRows(qbRawData.balanceSheet) : [];
        
        return (
          <div key={`financial-statements-${selectedCompanyId}-${dataRefreshKey}`} style={{ maxWidth: '1800px', margin: '0 auto', padding: '32px' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px' }}>
              <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', margin: 0 }}>Financial Statements</h1>
              {companyName && <div style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b' }}>{companyName}</div>}
            </div>
            <p style={{ fontSize: '14px', color: '#64748b', marginBottom: '24px' }}>
              QuickBooks Data • Synced: {qbRawData.syncDate ? new Date(qbRawData.syncDate).toLocaleString() : 'Unknown'}
            </p>

            {/* Tab Navigation */}
            <div style={{ display: 'flex', gap: '8px', marginBottom: '24px', borderBottom: '2px solid #e2e8f0' }}>
              <button
                onClick={() => setFinancialStatementsTab('aggregated')}
                style={{
                  padding: '12px 24px',
                  background: financialStatementsTab === 'aggregated' ? '#667eea' : 'transparent',
                  color: financialStatementsTab === 'aggregated' ? 'white' : '#64748b',
                  border: 'none',
                  borderBottom: financialStatementsTab === 'aggregated' ? '3px solid #667eea' : '3px solid transparent',
                  fontSize: '16px',
                  fontWeight: '600',
                  cursor: 'pointer',
                  borderRadius: '8px 8px 0 0',
                  transition: 'all 0.2s'
                }}
              >
                Aggregated Financials
              </button>
              <button
                onClick={() => setFinancialStatementsTab('line-of-business')}
                style={{
                  padding: '12px 24px',
                  background: financialStatementsTab === 'line-of-business' ? '#667eea' : 'transparent',
                  color: financialStatementsTab === 'line-of-business' ? 'white' : '#64748b',
                  border: 'none',
                  borderBottom: financialStatementsTab === 'line-of-business' ? '3px solid #667eea' : '3px solid transparent',
                  fontSize: '16px',
                  fontWeight: '600',
                  cursor: 'pointer',
                  borderRadius: '8px 8px 0 0',
                  transition: 'all 0.2s'
                }}
              >
                Line of Business Reporting
              </button>
            </div>

            {/* Aggregated Financials Tab */}
            {financialStatementsTab === 'aggregated' && (
            <>
            {/* Statement Controls */}
            <div style={{ marginBottom: '32px', padding: '24px', background: 'white', borderRadius: '12px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '16px' }}>
                {/* Type of Statement */}
                <div>
                  <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>
                    Type of Statement
                  </label>
                  <select 
                    value={statementType}
                    onChange={(e) => setStatementType(e.target.value as 'income-statement' | 'balance-sheet')}
                    style={{ 
                      width: '100%', 
                      padding: '10px 12px', 
                      border: '1px solid #cbd5e1', 
                      borderRadius: '6px', 
                      fontSize: '14px',
                      color: '#1e293b',
                      background: 'white',
                      cursor: 'pointer'
                    }}
                  >
                    <option value="income-statement">Income Statement</option>
                    <option value="balance-sheet">Balance Sheet</option>
                  </select>
                </div>

                {/* Period */}
                <div>
                  <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>
                    Period
                  </label>
                  <select 
                    value={statementPeriod}
                    onChange={(e) => setStatementPeriod(e.target.value as any)}
                    style={{ 
                      width: '100%', 
                      padding: '10px 12px', 
                      border: '1px solid #cbd5e1', 
                      borderRadius: '6px', 
                      fontSize: '14px',
                      color: '#1e293b',
                      background: 'white',
                      cursor: 'pointer'
                    }}
                  >
                    <option value="current-month">Current Month</option>
                    <option value="current-quarter">Current Quarter</option>
                    <option value="last-12-months">Last 12 months</option>
                    <option value="ytd">YTD</option>
                    <option value="last-year">Last Year</option>
                    <option value="last-3-years">Last 3 Years</option>
                  </select>
                </div>

                {/* Display As */}
                <div>
                  <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>
                    Display As
                  </label>
                  <select 
                    value={statementDisplay}
                    onChange={(e) => setStatementDisplay(e.target.value as 'monthly' | 'quarterly' | 'annual')}
                    style={{ 
                      width: '100%', 
                      padding: '10px 12px', 
                      border: '1px solid #cbd5e1', 
                      borderRadius: '6px', 
                      fontSize: '14px',
                      color: '#1e293b',
                      background: 'white',
                      cursor: 'pointer'
                    }}
                  >
                    <option value="monthly">Monthly</option>
                    <option value="quarterly">Quarterly</option>
                    <option value="annual">Annual</option>
                  </select>
                </div>
              </div>
            </div>

            {/* Statement Content Area */}
            {(() => {
              console.log('📊 Financial Statement Render Check:', {
                statementType,
                statementPeriod,
                monthlyLength: monthly?.length || 0,
                loadedMonthlyDataLength: loadedMonthlyData?.length || 0,
                hasMonthly: !!monthly,
                monthlyFirst: monthly?.[0],
                condition: statementType === 'income-statement' && statementPeriod === 'current-month' && monthly.length > 0
              });
              
              if (statementType === 'income-statement' && statementPeriod === 'current-month' && monthly.length > 0) {
                const currentMonth = monthly[monthly.length - 1];
                const monthDate = new Date(currentMonth.date || currentMonth.month);
                const monthName = monthDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
                
                // Revenue
                const revenue = currentMonth.revenue || 0;
                
                // Cost of Goods Sold
                const cogsPayroll = currentMonth.cogsPayroll || 0;
                const cogsOwnerPay = currentMonth.cogsOwnerPay || 0;
                const cogsContractors = currentMonth.cogsContractors || 0;
                const cogsMaterials = currentMonth.cogsMaterials || 0;
                const cogsCommissions = currentMonth.cogsCommissions || 0;
                const cogsOther = currentMonth.cogsOther || 0;
                const cogs = cogsPayroll + cogsOwnerPay + cogsContractors + cogsMaterials + cogsCommissions + cogsOther;
                
                const grossProfit = revenue - cogs;
                const grossMargin = revenue > 0 ? (grossProfit / revenue) * 100 : 0;
                
                // Operating Expenses
                const opexPayroll = currentMonth.opexPayroll || 0;
                const ownersBasePay = currentMonth.ownersBasePay || 0;
                const ownersRetirement = currentMonth.ownersRetirement || 0;
                const professionalServices = currentMonth.professionalServices || 0;
                const rentLease = currentMonth.rentLease || 0;
                const utilities = currentMonth.utilities || 0;
                const equipment = currentMonth.equipment || 0;
                const travel = currentMonth.travel || 0;
                const insurance = currentMonth.insurance || 0;
                const opexSalesMarketing = currentMonth.opexSalesMarketing || 0;
                const contractorsDistribution = currentMonth.contractorsDistribution || 0;
                const depreciationExpense = currentMonth.depreciationExpense || 0;
                const opexOther = currentMonth.opexOther || 0;
                
                const totalOpex = opexPayroll + ownersBasePay + ownersRetirement + professionalServices + 
                                 rentLease + utilities + equipment + travel + insurance + 
                                 opexSalesMarketing + contractorsDistribution + depreciationExpense + opexOther;
                
                const operatingIncome = grossProfit - totalOpex;
                const operatingMargin = revenue > 0 ? (operatingIncome / revenue) * 100 : 0;
                
                // Other Income/Expense
                const interestExpense = currentMonth.interestExpense || 0;
                const nonOperatingIncome = currentMonth.nonOperatingIncome || 0;
                const extraordinaryItems = currentMonth.extraordinaryItems || 0;
                
                const netIncome = operatingIncome - interestExpense + nonOperatingIncome + extraordinaryItems;
                const netMargin = revenue > 0 ? (netIncome / revenue) * 100 : 0;
                
                return (
                  <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                      <div style={{ marginBottom: '32px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                        <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Income Statement</h2>
                        <div style={{ fontSize: '14px', color: '#64748b' }}>For the Month Ended {monthName}</div>
                      </div>

                      {/* Revenue Section */}
                      <div style={{ marginBottom: '24px' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0', borderBottom: '1px solid #e2e8f0' }}>
                          <span style={{ fontWeight: '600', color: '#1e293b' }}>Revenue</span>
                          <span style={{ fontWeight: '600', color: '#1e293b' }}>${revenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      </div>

                      {/* COGS Section */}
                      <div style={{ marginBottom: '24px' }}>
                        <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>Cost of Goods Sold</div>
                        {cogsPayroll > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>COGS - Payroll</span>
                            <span style={{ color: '#475569' }}>${cogsPayroll.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {cogsOwnerPay > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>COGS - Owner Pay</span>
                            <span style={{ color: '#475569' }}>${cogsOwnerPay.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {cogsContractors > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>COGS - Contractors</span>
                            <span style={{ color: '#475569' }}>${cogsContractors.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {cogsMaterials > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>COGS - Materials</span>
                            <span style={{ color: '#475569' }}>${cogsMaterials.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {cogsCommissions > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>COGS - Commissions</span>
                            <span style={{ color: '#475569' }}>${cogsCommissions.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {cogsOther > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>COGS - Other</span>
                            <span style={{ color: '#475569' }}>${cogsOther.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0', borderTop: '1px solid #e2e8f0', marginTop: '4px' }}>
                          <span style={{ fontWeight: '600', color: '#1e293b' }}>Total COGS</span>
                          <span style={{ fontWeight: '600', color: '#1e293b' }}>${cogs.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      </div>

                      {/* Gross Profit */}
                      <div style={{ marginBottom: '24px', background: '#dbeafe', padding: '12px', borderRadius: '8px' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                          <span style={{ fontWeight: '700', color: '#1e40af' }}>Gross Profit</span>
                          <span style={{ fontWeight: '700', color: '#1e40af' }}>${grossProfit.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                        <div style={{ fontSize: '13px', color: '#1e40af', textAlign: 'right' }}>
                          {grossMargin.toFixed(1)}% margin
                        </div>
                      </div>

                      {/* Operating Expenses */}
                      <div style={{ marginBottom: '24px' }}>
                        <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>Operating Expenses</div>
                        {opexPayroll > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Payroll</span>
                            <span style={{ color: '#475569' }}>${opexPayroll.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {ownersBasePay > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Owner's Base Pay</span>
                            <span style={{ color: '#475569' }}>${ownersBasePay.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {ownersRetirement > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Owner's Retirement</span>
                            <span style={{ color: '#475569' }}>${ownersRetirement.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {professionalServices > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Professional Services</span>
                            <span style={{ color: '#475569' }}>${professionalServices.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {rentLease > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Rent/Lease</span>
                            <span style={{ color: '#475569' }}>${rentLease.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {utilities > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Utilities</span>
                            <span style={{ color: '#475569' }}>${utilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {equipment > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Equipment</span>
                            <span style={{ color: '#475569' }}>${equipment.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {travel > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Travel</span>
                            <span style={{ color: '#475569' }}>${travel.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {insurance > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Insurance</span>
                            <span style={{ color: '#475569' }}>${insurance.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {opexSalesMarketing > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Sales & Marketing</span>
                            <span style={{ color: '#475569' }}>${opexSalesMarketing.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {contractorsDistribution > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Contractors Distribution</span>
                            <span style={{ color: '#475569' }}>${contractorsDistribution.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {depreciationExpense > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Depreciation & Amortization</span>
                            <span style={{ color: '#475569' }}>${depreciationExpense.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {opexOther > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Other Operating Expenses</span>
                            <span style={{ color: '#475569' }}>${opexOther.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0', borderTop: '1px solid #e2e8f0', marginTop: '4px' }}>
                          <span style={{ fontWeight: '600', color: '#1e293b' }}>Total Operating Expenses</span>
                          <span style={{ fontWeight: '600', color: '#1e293b' }}>${totalOpex.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      </div>

                      {/* Operating Income */}
                      <div style={{ marginBottom: '24px', background: '#f0fdf4', padding: '12px', borderRadius: '8px' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                          <span style={{ fontWeight: '700', color: '#166534' }}>Operating Income</span>
                          <span style={{ fontWeight: '700', color: '#166534' }}>${operatingIncome.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                        <div style={{ fontSize: '13px', color: '#166534', textAlign: 'right' }}>
                          {operatingMargin.toFixed(1)}% margin
                        </div>
                      </div>

                      {/* Other Income/Expense */}
                      {(interestExpense > 0 || nonOperatingIncome > 0 || extraordinaryItems !== 0) && (
                        <div style={{ marginBottom: '24px' }}>
                          <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>Other Income/(Expense)</div>
                          {nonOperatingIncome > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Non-Operating Income</span>
                              <span style={{ color: '#10b981' }}>${nonOperatingIncome.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {interestExpense > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Interest Expense</span>
                              <span style={{ color: '#ef4444' }}>($  {interestExpense.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })})</span>
                            </div>
                          )}
                          {extraordinaryItems !== 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Extraordinary Items</span>
                              <span style={{ color: extraordinaryItems >= 0 ? '#10b981' : '#ef4444' }}>
                                {extraordinaryItems >= 0 ? '$' : '($'}{Math.abs(extraordinaryItems).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}{extraordinaryItems < 0 ? ')' : ''}
                              </span>
                            </div>
                          )}
                        </div>
                      )}

                      {/* Net Income */}
                      <div style={{ background: netIncome >= 0 ? '#dcfce7' : '#fee2e2', padding: '16px', borderRadius: '8px', marginTop: '32px' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                          <span style={{ fontWeight: '700', fontSize: '18px', color: netIncome >= 0 ? '#166534' : '#991b1b' }}>Net Income</span>
                          <span style={{ fontWeight: '700', fontSize: '18px', color: netIncome >= 0 ? '#166534' : '#991b1b' }}>
                            ${netIncome.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                          </span>
                        </div>
                        <div style={{ fontSize: '14px', color: netIncome >= 0 ? '#166534' : '#991b1b', textAlign: 'right' }}>
                          {netMargin.toFixed(1)}% net margin
                        </div>
                      </div>
                  </div>
                );
              } else if (statementType === 'income-statement-percent' && statementPeriod === 'current-month') {
                const currentMonth = monthly[monthly.length - 1];
                const monthDate = new Date(currentMonth.date || currentMonth.month);
                const monthName = monthDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
                
                // Revenue
                const revenue = currentMonth.revenue || 0;
                
                // Cost of Goods Sold
                const cogsPayroll = currentMonth.cogsPayroll || 0;
                const cogsOwnerPay = currentMonth.cogsOwnerPay || 0;
                const cogsContractors = currentMonth.cogsContractors || 0;
                const cogsMaterials = currentMonth.cogsMaterials || 0;
                const cogsCommissions = currentMonth.cogsCommissions || 0;
                const cogsOther = currentMonth.cogsOther || 0;
                const cogs = cogsPayroll + cogsOwnerPay + cogsContractors + cogsMaterials + cogsCommissions + cogsOther;
                
                const grossProfit = revenue - cogs;
                const grossMargin = revenue > 0 ? (grossProfit / revenue) * 100 : 0;
                
                // Operating Expenses
                const opexPayroll = currentMonth.opexPayroll || 0;
                const ownersBasePay = currentMonth.ownersBasePay || 0;
                const ownersRetirement = currentMonth.ownersRetirement || 0;
                const professionalServices = currentMonth.professionalServices || 0;
                const rentLease = currentMonth.rentLease || 0;
                const utilities = currentMonth.utilities || 0;
                const equipment = currentMonth.equipment || 0;
                const travel = currentMonth.travel || 0;
                const insurance = currentMonth.insurance || 0;
                const opexSalesMarketing = currentMonth.opexSalesMarketing || 0;
                const contractorsDistribution = currentMonth.contractorsDistribution || 0;
                const depreciationExpense = currentMonth.depreciationExpense || 0;
                const opexOther = currentMonth.opexOther || 0;
                
                const totalOpex = opexPayroll + ownersBasePay + ownersRetirement + professionalServices + 
                                 rentLease + utilities + equipment + travel + insurance + 
                                 opexSalesMarketing + contractorsDistribution + depreciationExpense + opexOther;
                
                const operatingIncome = grossProfit - totalOpex;
                const operatingMargin = revenue > 0 ? (operatingIncome / revenue) * 100 : 0;
                
                // Other Income/Expense
                const interestExpense = currentMonth.interestExpense || 0;
                const nonOperatingIncome = currentMonth.nonOperatingIncome || 0;
                const extraordinaryItems = currentMonth.extraordinaryItems || 0;
                
                const netIncome = operatingIncome - interestExpense + nonOperatingIncome + extraordinaryItems;
                const netMargin = revenue > 0 ? (netIncome / revenue) * 100 : 0;
                
                // Helper function to calculate percentage
                const pct = (amount: number) => revenue > 0 ? (amount / revenue) * 100 : 0;
                
                return (
                  <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                    <div style={{ marginBottom: '32px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                      <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Income Statement - Common Size Analysis</h2>
                      <div style={{ fontSize: '14px', color: '#64748b' }}>For the Month Ended {monthName} • All items shown as % of Revenue</div>
                    </div>

                    {/* Column Headers */}
                    <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '8px 0', borderBottom: '2px solid #cbd5e1', marginBottom: '12px', fontWeight: '600', fontSize: '13px', color: '#475569' }}>
                      <div>Line Item</div>
                      <div style={{ textAlign: 'right' }}>Amount</div>
                      <div style={{ textAlign: 'right' }}>% of Revenue</div>
                    </div>

                    {/* Revenue Section */}
                    <div style={{ marginBottom: '24px' }}>
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '8px 0', borderBottom: '1px solid #e2e8f0', background: '#f8fafc' }}>
                        <span style={{ fontWeight: '600', color: '#1e293b' }}>Revenue</span>
                        <span style={{ fontWeight: '600', color: '#1e293b', textAlign: 'right' }}>${revenue.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ fontWeight: '600', color: '#1e293b', textAlign: 'right' }}>100.0%</span>
                      </div>
                    </div>

                    {/* COGS Section */}
                    <div style={{ marginBottom: '24px' }}>
                      <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px', fontSize: '15px' }}>Cost of Goods Sold</div>
                      {cogsPayroll > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>COGS - Payroll</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${cogsPayroll.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(cogsPayroll).toFixed(1)}%</span>
                        </div>
                      )}
                      {cogsOwnerPay > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>COGS - Owner Pay</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${cogsOwnerPay.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(cogsOwnerPay).toFixed(1)}%</span>
                        </div>
                      )}
                      {cogsContractors > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>COGS - Contractors</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${cogsContractors.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(cogsContractors).toFixed(1)}%</span>
                        </div>
                      )}
                      {cogsMaterials > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>COGS - Materials</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${cogsMaterials.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(cogsMaterials).toFixed(1)}%</span>
                        </div>
                      )}
                      {cogsCommissions > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>COGS - Commissions</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${cogsCommissions.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(cogsCommissions).toFixed(1)}%</span>
                        </div>
                      )}
                      {cogsOther > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>COGS - Other</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${cogsOther.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(cogsOther).toFixed(1)}%</span>
                        </div>
                      )}
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '8px 0', borderTop: '1px solid #e2e8f0', marginTop: '4px' }}>
                        <span style={{ fontWeight: '600', color: '#1e293b', paddingLeft: '20px' }}>Total COGS</span>
                        <span style={{ fontWeight: '600', color: '#1e293b', textAlign: 'right' }}>${cogs.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ fontWeight: '600', color: '#1e293b', textAlign: 'right' }}>{pct(cogs).toFixed(1)}%</span>
                      </div>
                    </div>

                    {/* Gross Profit */}
                    <div style={{ marginBottom: '24px', background: '#dbeafe', padding: '12px', borderRadius: '8px' }}>
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr' }}>
                        <span style={{ fontWeight: '700', color: '#1e40af' }}>Gross Profit</span>
                        <span style={{ fontWeight: '700', color: '#1e40af', textAlign: 'right' }}>${grossProfit.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ fontWeight: '700', color: '#1e40af', textAlign: 'right' }}>{grossMargin.toFixed(1)}%</span>
                      </div>
                    </div>

                    {/* Operating Expenses */}
                    <div style={{ marginBottom: '24px' }}>
                      <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px', fontSize: '15px' }}>Operating Expenses</div>
                      {opexPayroll > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>Payroll</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${opexPayroll.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(opexPayroll).toFixed(1)}%</span>
                        </div>
                      )}
                      {ownersBasePay > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>Owner's Base Pay</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${ownersBasePay.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(ownersBasePay).toFixed(1)}%</span>
                        </div>
                      )}
                      {ownersRetirement > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>Owner's Retirement</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${ownersRetirement.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(ownersRetirement).toFixed(1)}%</span>
                        </div>
                      )}
                      {professionalServices > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>Professional Services</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${professionalServices.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(professionalServices).toFixed(1)}%</span>
                        </div>
                      )}
                      {rentLease > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>Rent/Lease</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${rentLease.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(rentLease).toFixed(1)}%</span>
                        </div>
                      )}
                      {utilities > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>Utilities</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${utilities.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(utilities).toFixed(1)}%</span>
                        </div>
                      )}
                      {equipment > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>Equipment</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${equipment.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(equipment).toFixed(1)}%</span>
                        </div>
                      )}
                      {travel > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>Travel</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${travel.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(travel).toFixed(1)}%</span>
                        </div>
                      )}
                      {insurance > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>Insurance</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${insurance.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(insurance).toFixed(1)}%</span>
                        </div>
                      )}
                      {opexSalesMarketing > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>Sales & Marketing</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${opexSalesMarketing.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(opexSalesMarketing).toFixed(1)}%</span>
                        </div>
                      )}
                      {contractorsDistribution > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>Contractors Distribution</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${contractorsDistribution.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(contractorsDistribution).toFixed(1)}%</span>
                        </div>
                      )}
                      {depreciationExpense > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>Depreciation & Amortization</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${depreciationExpense.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(depreciationExpense).toFixed(1)}%</span>
                        </div>
                      )}
                      {opexOther > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>Other Operating Expenses</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>${opexOther.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#475569', textAlign: 'right' }}>{pct(opexOther).toFixed(1)}%</span>
                        </div>
                      )}
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '8px 0', borderTop: '1px solid #e2e8f0', marginTop: '4px' }}>
                        <span style={{ fontWeight: '600', color: '#1e293b', paddingLeft: '20px' }}>Total Operating Expenses</span>
                        <span style={{ fontWeight: '600', color: '#1e293b', textAlign: 'right' }}>${totalOpex.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ fontWeight: '600', color: '#1e293b', textAlign: 'right' }}>{pct(totalOpex).toFixed(1)}%</span>
                      </div>
                    </div>

                    {/* Operating Income */}
                    <div style={{ marginBottom: '24px', background: '#f0fdf4', padding: '12px', borderRadius: '8px' }}>
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr' }}>
                        <span style={{ fontWeight: '700', color: '#166534' }}>Operating Income</span>
                        <span style={{ fontWeight: '700', color: '#166534', textAlign: 'right' }}>${operatingIncome.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ fontWeight: '700', color: '#166534', textAlign: 'right' }}>{operatingMargin.toFixed(1)}%</span>
                      </div>
                    </div>

                    {/* Other Income/Expense */}
                    {(interestExpense > 0 || nonOperatingIncome > 0 || extraordinaryItems !== 0) && (
                      <div style={{ marginBottom: '24px' }}>
                        <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px', fontSize: '15px' }}>Other Income/(Expense)</div>
                        {nonOperatingIncome > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                            <span style={{ color: '#475569', paddingLeft: '20px' }}>Non-Operating Income</span>
                            <span style={{ color: '#10b981', textAlign: 'right' }}>${nonOperatingIncome.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                            <span style={{ color: '#10b981', textAlign: 'right' }}>{pct(nonOperatingIncome).toFixed(1)}%</span>
                          </div>
                        )}
                        {interestExpense > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                            <span style={{ color: '#475569', paddingLeft: '20px' }}>Interest Expense</span>
                            <span style={{ color: '#ef4444', textAlign: 'right' }}>($  {interestExpense.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })})</span>
                            <span style={{ color: '#ef4444', textAlign: 'right' }}>({pct(interestExpense).toFixed(1)}%)</span>
                          </div>
                        )}
                        {extraordinaryItems !== 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                            <span style={{ color: '#475569', paddingLeft: '20px' }}>Extraordinary Items</span>
                            <span style={{ color: extraordinaryItems >= 0 ? '#10b981' : '#ef4444', textAlign: 'right' }}>
                              {extraordinaryItems >= 0 ? '$' : '($'}{Math.abs(extraordinaryItems).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}{extraordinaryItems < 0 ? ')' : ''}
                            </span>
                            <span style={{ color: extraordinaryItems >= 0 ? '#10b981' : '#ef4444', textAlign: 'right' }}>
                              {extraordinaryItems >= 0 ? '' : '('}{pct(Math.abs(extraordinaryItems)).toFixed(1)}%{extraordinaryItems < 0 ? ')' : ''}
                            </span>
                          </div>
                        )}
                      </div>
                    )}

                    {/* Net Income */}
                    <div style={{ background: netIncome >= 0 ? '#dcfce7' : '#fee2e2', padding: '16px', borderRadius: '8px', marginTop: '32px' }}>
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr' }}>
                        <span style={{ fontWeight: '700', fontSize: '18px', color: netIncome >= 0 ? '#166534' : '#991b1b' }}>Net Income</span>
                        <span style={{ fontWeight: '700', fontSize: '18px', color: netIncome >= 0 ? '#166534' : '#991b1b', textAlign: 'right' }}>
                          ${netIncome.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                        </span>
                        <span style={{ fontWeight: '700', fontSize: '18px', color: netIncome >= 0 ? '#166534' : '#991b1b', textAlign: 'right' }}>
                          {netMargin.toFixed(1)}%
                        </span>
                      </div>
                    </div>
                  </div>
                );
              } else if (statementType === 'balance-sheet' && statementPeriod === 'current-month') {
                const currentMonth = monthly[monthly.length - 1];
                const monthDate = new Date(currentMonth.date || currentMonth.month);
                const monthName = monthDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
                
                // Assets
                const cash = currentMonth.cash || 0;
                const ar = currentMonth.ar || 0;
                const inventory = currentMonth.inventory || 0;
                const otherCA = currentMonth.otherCA || 0;
                const tca = cash + ar + inventory + otherCA;
                
                const fixedAssets = currentMonth.fixedAssets || 0;
                const otherAssets = currentMonth.otherAssets || 0;
                const totalAssets = tca + fixedAssets + otherAssets;
                
                // Liabilities
                const ap = currentMonth.ap || 0;
                const otherCL = currentMonth.otherCL || 0;
                const tcl = ap + otherCL;
                
                const ltd = currentMonth.ltd || 0;
                const totalLiabilities = tcl + ltd;
                
                // Equity
                const totalEquity = currentMonth.totalEquity || 0;
                
                // Total L&E
                const totalLAndE = totalLiabilities + totalEquity;
                
                return (
                  <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                    <div style={{ marginBottom: '32px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                      <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Balance Sheet</h2>
                      <div style={{ fontSize: '14px', color: '#64748b' }}>As of {monthName}</div>
                    </div>

                    {/* ASSETS */}
                    <div style={{ marginBottom: '32px' }}>
                      <div style={{ fontSize: '18px', fontWeight: '700', color: '#1e293b', marginBottom: '16px', paddingBottom: '8px', borderBottom: '2px solid #667eea' }}>ASSETS</div>
                      
                      {/* Current Assets */}
                      <div style={{ marginBottom: '20px' }}>
                        <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px', fontSize: '15px' }}>Current Assets</div>
                        {cash > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Cash</span>
                            <span style={{ color: '#475569' }}>${cash.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {ar > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Accounts Receivable</span>
                            <span style={{ color: '#475569' }}>${ar.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {inventory > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Inventory</span>
                            <span style={{ color: '#475569' }}>${inventory.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {otherCA > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Other Current Assets</span>
                            <span style={{ color: '#475569' }}>${otherCA.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0 8px 20px', borderTop: '1px solid #e2e8f0', marginTop: '4px' }}>
                          <span style={{ fontWeight: '600', color: '#1e293b' }}>Total Current Assets</span>
                          <span style={{ fontWeight: '600', color: '#1e293b' }}>${tca.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      </div>

                      {/* Non-Current Assets */}
                      {fixedAssets > 0 && (
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569' }}>Fixed Assets</span>
                          <span style={{ color: '#475569' }}>${fixedAssets.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      )}
                      {otherAssets > 0 && (
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569' }}>Other Assets</span>
                          <span style={{ color: '#475569' }}>${otherAssets.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      )}
                      
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '12px 0', borderTop: '2px solid #667eea', marginTop: '8px', background: '#f8fafc' }}>
                        <span style={{ fontWeight: '700', fontSize: '16px', color: '#1e293b' }}>TOTAL ASSETS</span>
                        <span style={{ fontWeight: '700', fontSize: '16px', color: '#1e293b' }}>${totalAssets.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    </div>

                    {/* LIABILITIES */}
                    <div style={{ marginBottom: '32px' }}>
                      <div style={{ fontSize: '18px', fontWeight: '700', color: '#1e293b', marginBottom: '16px', paddingBottom: '8px', borderBottom: '2px solid #f59e0b' }}>LIABILITIES</div>
                      
                      {/* Current Liabilities */}
                      <div style={{ marginBottom: '20px' }}>
                        <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px', fontSize: '15px' }}>Current Liabilities</div>
                        {ap > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Accounts Payable</span>
                            <span style={{ color: '#475569' }}>${ap.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {otherCL > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Other Current Liabilities</span>
                            <span style={{ color: '#475569' }}>${otherCL.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0 8px 20px', borderTop: '1px solid #e2e8f0', marginTop: '4px' }}>
                          <span style={{ fontWeight: '600', color: '#1e293b' }}>Total Current Liabilities</span>
                          <span style={{ fontWeight: '600', color: '#1e293b' }}>${tcl.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      </div>

                      {/* Long-term Debt */}
                      {ltd > 0 && (
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569' }}>Long-term Debt</span>
                          <span style={{ color: '#475569' }}>${ltd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      )}
                      
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '12px 0', borderTop: '2px solid #f59e0b', marginTop: '8px', background: '#fef3c7' }}>
                        <span style={{ fontWeight: '700', fontSize: '16px', color: '#1e293b' }}>TOTAL LIABILITIES</span>
                        <span style={{ fontWeight: '700', fontSize: '16px', color: '#1e293b' }}>${totalLiabilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    </div>

                    {/* EQUITY */}
                    <div style={{ marginBottom: '24px' }}>
                      <div style={{ fontSize: '18px', fontWeight: '700', color: '#1e293b', marginBottom: '16px', paddingBottom: '8px', borderBottom: '2px solid #10b981' }}>EQUITY</div>
                      
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '12px 0', borderTop: '2px solid #10b981', background: '#d1fae5' }}>
                        <span style={{ fontWeight: '700', fontSize: '16px', color: '#1e293b' }}>TOTAL EQUITY</span>
                        <span style={{ fontWeight: '700', fontSize: '16px', color: '#1e293b' }}>${totalEquity.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    </div>

                    {/* TOTAL LIABILITIES & EQUITY */}
                    <div style={{ background: '#f1f5f9', padding: '16px', borderRadius: '8px', marginTop: '32px' }}>
                      <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                        <span style={{ fontWeight: '700', fontSize: '18px', color: '#1e293b' }}>TOTAL LIABILITIES & EQUITY</span>
                        <span style={{ fontWeight: '700', fontSize: '18px', color: '#1e293b' }}>
                          ${totalLAndE.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </span>
                      </div>
                      {Math.abs(totalAssets - totalLAndE) > 0.01 && (
                        <div style={{ fontSize: '12px', color: '#ef4444', marginTop: '8px', textAlign: 'right' }}>
                          ⚠️ Balance check: Assets - (Liabilities + Equity) = ${(totalAssets - totalLAndE).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </div>
                      )}
                    </div>
                  </div>
                );
              }
              
              // Multi-period logic (Current Quarter, Last 12 Months, YTD, Last Year, Last 3 Years)
              else if (monthly.length > 0 && statementPeriod !== 'current-month') {
                // Helper function to get months for the selected period
                const getMonthsForPeriod = () => {
                  const now = new Date();
                  const currentYear = now.getFullYear();
                  const currentMonth = now.getMonth(); // 0-11
                  
                  switch (statementPeriod) {
                    case 'current-quarter':
                      // Last 3 months
                      return monthly.slice(-3);
                    
                    case 'last-12-months':
                      // Last 12 months
                      return monthly.slice(-12);
                    
                    case 'ytd':
                      // Year to date - from January of current year to now
                      return monthly.filter(m => {
                        const mDate = new Date(m.date || m.month);
                        return mDate.getFullYear() === currentYear;
                      });
                    
                    case 'last-year':
                      // Full previous year
                      return monthly.filter(m => {
                        const mDate = new Date(m.date || m.month);
                        return mDate.getFullYear() === currentYear - 1;
                      });
                    
                    case 'last-3-years':
                      // Last 36 months
                      return monthly.slice(-36);
                    
                    default:
                      return [];
                  }
                };
                
                const periodMonths = getMonthsForPeriod();
                
                if (periodMonths.length === 0) {
                  return (
                    <div style={{ background: 'white', borderRadius: '12px', padding: '48px 32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', minHeight: '400px', textAlign: 'center' }}>
                      <div style={{ fontSize: '18px', fontWeight: '600', color: '#64748b', marginBottom: '12px' }}>
                        📊 No Data Available
                      </div>
                      <p style={{ fontSize: '14px', color: '#94a3b8' }}>
                        No financial data available for the selected period.
                      </p>
                    </div>
                  );
                }
                
                // Get period label
                const getPeriodLabel = () => {
                  const firstMonth = periodMonths[0];
                  const lastMonth = periodMonths[periodMonths.length - 1];
                  const firstDate = new Date(firstMonth.date || firstMonth.month);
                  const lastDate = new Date(lastMonth.date || lastMonth.month);
                  
                  switch (statementPeriod) {
                    case 'current-quarter':
                      return `Current Quarter (${firstDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })} - ${lastDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })})`;
                    case 'last-12-months':
                      return `Last 12 Months (${firstDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })} - ${lastDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })})`;
                    case 'ytd':
                      return `Year to Date ${lastDate.getFullYear()} (Jan - ${lastDate.toLocaleDateString('en-US', { month: 'short' })})`;
                    case 'last-year':
                      return `Fiscal Year ${firstDate.getFullYear()}`;
                    case 'last-3-years':
                      return `Last 3 Years (${firstDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })} - ${lastDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })})`;
                    default:
                      return '';
                  }
                };
                
              const periodLabel = getPeriodLabel();
              const latestMonth = periodMonths[periodMonths.length - 1];
              
              // Helper function to group months by display period
              const groupMonthsByDisplay = () => {
                if (statementDisplay === 'monthly') {
                  return periodMonths.map(m => ({
                    label: new Date(m.date || m.month).toLocaleDateString('en-US', { month: 'short', year: 'numeric' }),
                    months: [m]
                  }));
                } else if (statementDisplay === 'quarterly') {
                  const quarters: { [key: string]: any[] } = {};
                  periodMonths.forEach(m => {
                    const date = new Date(m.date || m.month);
                    const year = date.getFullYear();
                    const quarter = Math.floor(date.getMonth() / 3) + 1;
                    const key = `${year}-Q${quarter}`;
                    if (!quarters[key]) quarters[key] = [];
                    quarters[key].push(m);
                  });
                  return Object.entries(quarters).map(([key, months]) => ({
                    label: key,
                    months
                  }));
                } else {
                  const years: { [key: string]: any[] } = {};
                  periodMonths.forEach(m => {
                    const year = new Date(m.date || m.month).getFullYear().toString();
                    if (!years[year]) years[year] = [];
                    years[year].push(m);
                  });
                  return Object.entries(years).map(([year, months]) => ({
                    label: year,
                    months
                  }));
                }
              };
              
              const displayPeriods = groupMonthsByDisplay();
              
              // INCOME STATEMENT - Aggregate across period
              if (statementType === 'income-statement') {
                // Check if showing multiple periods side-by-side
                if (displayPeriods.length > 1) {
                  const calc = (months: any[], field: string) => months.reduce((sum, m) => sum + (m[field] || 0), 0);
                  const periodsData = displayPeriods.map(p => {
                    const m = p.months;
                    const cogsPayroll = calc(m, 'cogsPayroll');
                    const cogsOwnerPay = calc(m, 'cogsOwnerPay');
                    const cogsContractors = calc(m, 'cogsContractors');
                    const cogsMaterials = calc(m, 'cogsMaterials');
                    const cogsCommissions = calc(m, 'cogsCommissions');
                    const cogsOther = calc(m, 'cogsOther');
                    const opexPayroll = calc(m, 'opexPayroll');
                    const ownersBasePay = calc(m, 'ownersBasePay');
                    const ownersRetirement = calc(m, 'ownersRetirement');
                    const professionalServices = calc(m, 'professionalServices');
                    const rentLease = calc(m, 'rentLease');
                    const utilities = calc(m, 'utilities');
                    const equipment = calc(m, 'equipment');
                    const travel = calc(m, 'travel');
                    const insurance = calc(m, 'insurance');
                    const opexSalesMarketing = calc(m, 'opexSalesMarketing');
                    const contractorsDistribution = calc(m, 'contractorsDistribution');
                    const depreciationExpense = calc(m, 'depreciationExpense');
                    const opexOther = calc(m, 'opexOther');
                    const revenue = calc(m, 'revenue');
                    const cogs = cogsPayroll + cogsOwnerPay + cogsContractors + cogsMaterials + cogsCommissions + cogsOther;
                    const grossProfit = revenue - cogs;
                    const totalOpex = opexPayroll + ownersBasePay + ownersRetirement + professionalServices + rentLease + utilities + equipment + travel + insurance + opexSalesMarketing + contractorsDistribution + depreciationExpense + opexOther;
                    const operatingIncome = grossProfit - totalOpex;
                    const interestExpense = calc(m, 'interestExpense');
                    const nonOperatingIncome = calc(m, 'nonOperatingIncome');
                    const extraordinaryItems = calc(m, 'extraordinaryItems');
                    const netIncome = operatingIncome - interestExpense + nonOperatingIncome + extraordinaryItems;
                    return { label: p.label, revenue, cogsPayroll, cogsOwnerPay, cogsContractors, cogsMaterials, cogsCommissions, cogsOther, cogs, grossProfit, opexPayroll, ownersBasePay, ownersRetirement, professionalServices, rentLease, utilities, equipment, travel, insurance, opexSalesMarketing, contractorsDistribution, depreciationExpense, opexOther, totalOpex, operatingIncome, interestExpense, nonOperatingIncome, extraordinaryItems, netIncome };
                  });
                  const Row = ({ label, values, indent = 0, bold = false }: any) => (
                    <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: bold ? '14px' : '13px', fontWeight: bold ? '600' : 'normal' }}>
                      <div style={{ color: bold ? '#475569' : '#64748b', paddingLeft: `${indent}px` }}>{label}</div>
                      {values.map((v: number, i: number) => (
                        <div key={i} style={{ textAlign: 'right', color: bold ? '#475569' : '#64748b' }}>${(v / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                      ))}
                    </div>
                  );
                  return (
                    <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', overflowX: 'auto' }}>
                      <div style={{ marginBottom: '24px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                        <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Comparative Income Statement</h2>
                        <div style={{ fontSize: '14px', color: '#64748b' }}>{periodLabel} - {statementDisplay === 'monthly' ? 'Monthly' : statementDisplay === 'quarterly' ? 'Quarterly' : 'Annual'}</div>
                      </div>
                      <div style={{ minWidth: `${200 + (periodsData.length * 110)}px` }}>
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '12px 0', borderBottom: '2px solid #1e293b', fontWeight: '600', color: '#1e293b' }}>
                          <div>Line Item</div>
                          {periodsData.map((p, i) => <div key={i} style={{ textAlign: 'right' }}>{p.label}</div>)}
                        </div>
                        <Row label="Revenue" values={periodsData.map(p => p.revenue)} bold />
                        <div style={{ margin: '8px 0 4px', fontSize: '14px', fontWeight: '600', color: '#475569' }}>Cost of Goods Sold</div>
                        {periodsData.some(p => p.cogsPayroll > 0) && <Row label="COGS - Payroll" values={periodsData.map(p => p.cogsPayroll)} indent={20} />}
                        {periodsData.some(p => p.cogsOwnerPay > 0) && <Row label="COGS - Owner Pay" values={periodsData.map(p => p.cogsOwnerPay)} indent={20} />}
                        {periodsData.some(p => p.cogsContractors > 0) && <Row label="COGS - Contractors" values={periodsData.map(p => p.cogsContractors)} indent={20} />}
                        {periodsData.some(p => p.cogsMaterials > 0) && <Row label="COGS - Materials" values={periodsData.map(p => p.cogsMaterials)} indent={20} />}
                        {periodsData.some(p => p.cogsCommissions > 0) && <Row label="COGS - Commissions" values={periodsData.map(p => p.cogsCommissions)} indent={20} />}
                        {periodsData.some(p => p.cogsOther > 0) && <Row label="COGS - Other" values={periodsData.map(p => p.cogsOther)} indent={20} />}
                        <Row label="Total COGS" values={periodsData.map(p => p.cogs)} bold />
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '10px 8px', background: '#dbeafe', borderRadius: '4px', margin: '8px 0', fontWeight: '700', color: '#1e40af' }}>
                          <div>Gross Profit</div>
                          {periodsData.map((p, i) => <div key={i} style={{ textAlign: 'right' }}>${(p.grossProfit / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>)}
                        </div>
                        <div style={{ margin: '12px 0 4px', fontSize: '14px', fontWeight: '600', color: '#475569' }}>Operating Expenses</div>
                        {periodsData.some(p => p.opexPayroll > 0) && <Row label="Payroll" values={periodsData.map(p => p.opexPayroll)} indent={20} />}
                        {periodsData.some(p => p.ownersBasePay > 0) && <Row label="Owner's Base Pay" values={periodsData.map(p => p.ownersBasePay)} indent={20} />}
                        {periodsData.some(p => p.ownersRetirement > 0) && <Row label="Owner's Retirement" values={periodsData.map(p => p.ownersRetirement)} indent={20} />}
                        {periodsData.some(p => p.professionalServices > 0) && <Row label="Professional Services" values={periodsData.map(p => p.professionalServices)} indent={20} />}
                        {periodsData.some(p => p.rentLease > 0) && <Row label="Rent/Lease" values={periodsData.map(p => p.rentLease)} indent={20} />}
                        {periodsData.some(p => p.utilities > 0) && <Row label="Utilities" values={periodsData.map(p => p.utilities)} indent={20} />}
                        {periodsData.some(p => p.equipment > 0) && <Row label="Equipment" values={periodsData.map(p => p.equipment)} indent={20} />}
                        {periodsData.some(p => p.travel > 0) && <Row label="Travel" values={periodsData.map(p => p.travel)} indent={20} />}
                        {periodsData.some(p => p.insurance > 0) && <Row label="Insurance" values={periodsData.map(p => p.insurance)} indent={20} />}
                        {periodsData.some(p => p.opexSalesMarketing > 0) && <Row label="Sales & Marketing" values={periodsData.map(p => p.opexSalesMarketing)} indent={20} />}
                        {periodsData.some(p => p.contractorsDistribution > 0) && <Row label="Contractors - Distribution" values={periodsData.map(p => p.contractorsDistribution)} indent={20} />}
                        {periodsData.some(p => p.depreciationExpense > 0) && <Row label="Depreciation & Amortization" values={periodsData.map(p => p.depreciationExpense)} indent={20} />}
                        {periodsData.some(p => p.opexOther > 0) && <Row label="Other Operating Expenses" values={periodsData.map(p => p.opexOther)} indent={20} />}
                        <Row label="Total Operating Expenses" values={periodsData.map(p => p.totalOpex)} bold />
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '10px 8px', background: '#dbeafe', borderRadius: '4px', margin: '8px 0', fontWeight: '700', color: '#1e40af' }}>
                          <div>Operating Income</div>
                          {periodsData.map((p, i) => <div key={i} style={{ textAlign: 'right' }}>${(p.operatingIncome / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>)}
                        </div>
                        {periodsData.some(p => p.interestExpense > 0 || p.nonOperatingIncome > 0 || p.extraordinaryItems !== 0) && (
                          <>
                            <div style={{ margin: '12px 0 4px', fontSize: '14px', fontWeight: '600', color: '#475569' }}>Other Income/(Expense)</div>
                            {periodsData.some(p => p.interestExpense > 0) && <Row label="Interest Expense" values={periodsData.map(p => -p.interestExpense)} indent={20} />}
                            {periodsData.some(p => p.nonOperatingIncome > 0) && <Row label="Non-Operating Income" values={periodsData.map(p => p.nonOperatingIncome)} indent={20} />}
                            {periodsData.some(p => p.extraordinaryItems !== 0) && <Row label="Extraordinary Items" values={periodsData.map(p => p.extraordinaryItems)} indent={20} />}
                          </>
                        )}
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '12px 8px', background: '#dcfce7', borderRadius: '4px', margin: '12px 0 0', fontWeight: '700', fontSize: '15px' }}>
                          <div style={{ color: '#166534' }}>Net Income</div>
                          {periodsData.map((p, i) => (
                            <div key={i} style={{ textAlign: 'right', color: p.netIncome >= 0 ? '#166534' : '#991b1b' }}>
                              {p.netIncome >= 0 ? '$' : '($'}{(Math.abs(p.netIncome) / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K{p.netIncome < 0 ? ')' : ''}
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  );
                }
                
                // Sum all income statement items
                const revenue = periodMonths.reduce((sum, m) => sum + (m.revenue || 0), 0);
                  
                  const cogsPayroll = periodMonths.reduce((sum, m) => sum + (m.cogsPayroll || 0), 0);
                  const cogsOwnerPay = periodMonths.reduce((sum, m) => sum + (m.cogsOwnerPay || 0), 0);
                  const cogsContractors = periodMonths.reduce((sum, m) => sum + (m.cogsContractors || 0), 0);
                  const cogsMaterials = periodMonths.reduce((sum, m) => sum + (m.cogsMaterials || 0), 0);
                  const cogsCommissions = periodMonths.reduce((sum, m) => sum + (m.cogsCommissions || 0), 0);
                  const cogsOther = periodMonths.reduce((sum, m) => sum + (m.cogsOther || 0), 0);
                  const cogs = cogsPayroll + cogsOwnerPay + cogsContractors + cogsMaterials + cogsCommissions + cogsOther;
                  
                  const grossProfit = revenue - cogs;
                  const grossMargin = revenue > 0 ? (grossProfit / revenue) * 100 : 0;
                  
                  const opexPayroll = periodMonths.reduce((sum, m) => sum + (m.opexPayroll || 0), 0);
                  const ownersBasePay = periodMonths.reduce((sum, m) => sum + (m.ownersBasePay || 0), 0);
                  const ownersRetirement = periodMonths.reduce((sum, m) => sum + (m.ownersRetirement || 0), 0);
                  const professionalServices = periodMonths.reduce((sum, m) => sum + (m.professionalServices || 0), 0);
                  const rentLease = periodMonths.reduce((sum, m) => sum + (m.rentLease || 0), 0);
                  const utilities = periodMonths.reduce((sum, m) => sum + (m.utilities || 0), 0);
                  const equipment = periodMonths.reduce((sum, m) => sum + (m.equipment || 0), 0);
                  const travel = periodMonths.reduce((sum, m) => sum + (m.travel || 0), 0);
                  const insurance = periodMonths.reduce((sum, m) => sum + (m.insurance || 0), 0);
                  const opexSalesMarketing = periodMonths.reduce((sum, m) => sum + (m.opexSalesMarketing || 0), 0);
                  const contractorsDistribution = periodMonths.reduce((sum, m) => sum + (m.contractorsDistribution || 0), 0);
                  const depreciationExpense = periodMonths.reduce((sum, m) => sum + (m.depreciationExpense || 0), 0);
                  const opexOther = periodMonths.reduce((sum, m) => sum + (m.opexOther || 0), 0);
                  
                  const totalOpex = opexPayroll + ownersBasePay + ownersRetirement + professionalServices + 
                                   rentLease + utilities + equipment + travel + insurance + 
                                   opexSalesMarketing + contractorsDistribution + depreciationExpense + opexOther;
                  
                  const operatingIncome = grossProfit - totalOpex;
                  const operatingMargin = revenue > 0 ? (operatingIncome / revenue) * 100 : 0;
                  
                  const interestExpense = periodMonths.reduce((sum, m) => sum + (m.interestExpense || 0), 0);
                  const nonOperatingIncome = periodMonths.reduce((sum, m) => sum + (m.nonOperatingIncome || 0), 0);
                  const extraordinaryItems = periodMonths.reduce((sum, m) => sum + (m.extraordinaryItems || 0), 0);
                  
                  const netIncome = operatingIncome - interestExpense + nonOperatingIncome + extraordinaryItems;
                  const netMargin = revenue > 0 ? (netIncome / revenue) * 100 : 0;
                  
                  return (
                    <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                        <div style={{ marginBottom: '32px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                          <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Income Statement</h2>
                          <div style={{ fontSize: '14px', color: '#64748b' }}>For the Period: {periodLabel}</div>
                        </div>

                        {/* Revenue Section */}
                        <div style={{ marginBottom: '24px' }}>
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0', borderBottom: '1px solid #e2e8f0' }}>
                            <span style={{ fontWeight: '600', color: '#1e293b' }}>Revenue</span>
                            <span style={{ fontWeight: '600', color: '#1e293b' }}>${revenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        </div>

                        {/* COGS Section */}
                        <div style={{ marginBottom: '24px' }}>
                          <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>Cost of Goods Sold</div>
                          {cogsPayroll > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>COGS - Payroll</span>
                              <span style={{ color: '#475569' }}>${cogsPayroll.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {cogsOwnerPay > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>COGS - Owner Pay</span>
                              <span style={{ color: '#475569' }}>${cogsOwnerPay.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {cogsContractors > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>COGS - Contractors</span>
                              <span style={{ color: '#475569' }}>${cogsContractors.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {cogsMaterials > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>COGS - Materials</span>
                              <span style={{ color: '#475569' }}>${cogsMaterials.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {cogsCommissions > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>COGS - Commissions</span>
                              <span style={{ color: '#475569' }}>${cogsCommissions.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {cogsOther > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>COGS - Other</span>
                              <span style={{ color: '#475569' }}>${cogsOther.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0', borderTop: '1px solid #e2e8f0', marginTop: '4px' }}>
                            <span style={{ fontWeight: '600', color: '#1e293b' }}>Total COGS</span>
                            <span style={{ fontWeight: '600', color: '#1e293b' }}>${cogs.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        </div>

                        {/* Gross Profit */}
                        <div style={{ marginBottom: '24px', background: '#dbeafe', padding: '12px', borderRadius: '8px' }}>
                          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                            <span style={{ fontWeight: '700', color: '#1e40af' }}>Gross Profit</span>
                            <span style={{ fontWeight: '700', color: '#1e40af' }}>${grossProfit.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                          <div style={{ fontSize: '13px', color: '#1e40af', textAlign: 'right' }}>
                            {grossMargin.toFixed(1)}% margin
                          </div>
                        </div>

                        {/* Operating Expenses */}
                        <div style={{ marginBottom: '24px' }}>
                          <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>Operating Expenses</div>
                          {opexPayroll > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Payroll</span>
                              <span style={{ color: '#475569' }}>${opexPayroll.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {ownersBasePay > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Owner's Base Pay</span>
                              <span style={{ color: '#475569' }}>${ownersBasePay.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {ownersRetirement > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Owner's Retirement</span>
                              <span style={{ color: '#475569' }}>${ownersRetirement.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {professionalServices > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Professional Services</span>
                              <span style={{ color: '#475569' }}>${professionalServices.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {rentLease > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Rent/Lease</span>
                              <span style={{ color: '#475569' }}>${rentLease.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {utilities > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Utilities</span>
                              <span style={{ color: '#475569' }}>${utilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {equipment > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Equipment</span>
                              <span style={{ color: '#475569' }}>${equipment.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {travel > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Travel</span>
                              <span style={{ color: '#475569' }}>${travel.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {insurance > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Insurance</span>
                              <span style={{ color: '#475569' }}>${insurance.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {opexSalesMarketing > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Sales & Marketing</span>
                              <span style={{ color: '#475569' }}>${opexSalesMarketing.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {contractorsDistribution > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Contractors - Distribution</span>
                              <span style={{ color: '#475569' }}>${contractorsDistribution.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {depreciationExpense > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Depreciation & Amortization</span>
                              <span style={{ color: '#475569' }}>${depreciationExpense.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {opexOther > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Other Operating Expenses</span>
                              <span style={{ color: '#475569' }}>${opexOther.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0', borderTop: '1px solid #e2e8f0', marginTop: '4px' }}>
                            <span style={{ fontWeight: '600', color: '#1e293b' }}>Total Operating Expenses</span>
                            <span style={{ fontWeight: '600', color: '#1e293b' }}>${totalOpex.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        </div>

                        {/* Operating Income */}
                        <div style={{ marginBottom: '24px', background: '#dbeafe', padding: '12px', borderRadius: '8px' }}>
                          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                            <span style={{ fontWeight: '700', color: '#1e40af' }}>Operating Income</span>
                            <span style={{ fontWeight: '700', color: '#1e40af' }}>${operatingIncome.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                          <div style={{ fontSize: '13px', color: '#1e40af', textAlign: 'right' }}>
                            {operatingMargin.toFixed(1)}% operating margin
                          </div>
                        </div>

                        {/* Other Income/Expense */}
                        <div style={{ marginBottom: '24px' }}>
                          <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>Other Income/(Expense)</div>
                          {interestExpense > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Interest Expense</span>
                              <span style={{ color: '#475569' }}>(${ interestExpense.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })})</span>
                            </div>
                          )}
                          {nonOperatingIncome > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Non-Operating Income</span>
                              <span style={{ color: '#475569' }}>${nonOperatingIncome.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {extraordinaryItems !== 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#475569' }}>Extraordinary Items</span>
                              <span style={{ color: '#475569' }}>{extraordinaryItems >= 0 ? '$' : '($'}{Math.abs(extraordinaryItems).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}{extraordinaryItems < 0 ? ')' : ''}</span>
                            </div>
                          )}
                        </div>

                        {/* Net Income */}
                        <div style={{ background: netIncome >= 0 ? '#dcfce7' : '#fee2e2', padding: '16px', borderRadius: '8px', marginTop: '24px' }}>
                          <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                            <span style={{ fontWeight: '700', fontSize: '18px', color: netIncome >= 0 ? '#166534' : '#991b1b' }}>Net Income</span>
                            <span style={{ fontWeight: '700', fontSize: '18px', color: netIncome >= 0 ? '#166534' : '#991b1b' }}>
                              {netIncome >= 0 ? '$' : '($'}{Math.abs(netIncome).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}{netIncome < 0 ? ')' : ''}
                            </span>
                          </div>
                          <div style={{ fontSize: '14px', color: netIncome >= 0 ? '#166534' : '#991b1b', textAlign: 'right' }}>
                            {netMargin.toFixed(1)}% net margin
                          </div>
                        </div>
                    </div>
                  );
                }
                
                // COMMON SIZE INCOME STATEMENT - Aggregate with percentages
                else if (statementType === 'income-statement-percent') {
                  // Check if showing multiple periods side-by-side
                  if (displayPeriods.length > 1) {
                    const calc = (months: any[], field: string) => months.reduce((sum, m) => sum + (m[field] || 0), 0);
                    const periodsData = displayPeriods.map(p => {
                      const m = p.months;
                      const revenue = calc(m, 'revenue');
                      const cogsPayroll = calc(m, 'cogsPayroll');
                      const cogsOwnerPay = calc(m, 'cogsOwnerPay');
                      const cogsContractors = calc(m, 'cogsContractors');
                      const cogsMaterials = calc(m, 'cogsMaterials');
                      const cogsCommissions = calc(m, 'cogsCommissions');
                      const cogsOther = calc(m, 'cogsOther');
                      const opexPayroll = calc(m, 'opexPayroll');
                      const ownersBasePay = calc(m, 'ownersBasePay');
                      const ownersRetirement = calc(m, 'ownersRetirement');
                      const professionalServices = calc(m, 'professionalServices');
                      const rentLease = calc(m, 'rentLease');
                      const utilities = calc(m, 'utilities');
                      const equipment = calc(m, 'equipment');
                      const travel = calc(m, 'travel');
                      const insurance = calc(m, 'insurance');
                      const opexSalesMarketing = calc(m, 'opexSalesMarketing');
                      const contractorsDistribution = calc(m, 'contractorsDistribution');
                      const depreciationExpense = calc(m, 'depreciationExpense');
                      const opexOther = calc(m, 'opexOther');
                      const interestExpense = calc(m, 'interestExpense');
                      const nonOperatingIncome = calc(m, 'nonOperatingIncome');
                      const extraordinaryItems = calc(m, 'extraordinaryItems');
                      const cogs = cogsPayroll + cogsOwnerPay + cogsContractors + cogsMaterials + cogsCommissions + cogsOther;
                      const totalOpex = opexPayroll + ownersBasePay + ownersRetirement + professionalServices + rentLease + utilities + equipment + travel + insurance + opexSalesMarketing + contractorsDistribution + depreciationExpense + opexOther;
                      const grossProfit = revenue - cogs;
                      const operatingIncome = grossProfit - totalOpex;
                      const netIncome = operatingIncome - interestExpense + nonOperatingIncome + extraordinaryItems;
                      return { label: p.label, revenue, cogsPayroll, cogsOwnerPay, cogsContractors, cogsMaterials, cogsCommissions, cogsOther, cogs, grossProfit, opexPayroll, ownersBasePay, ownersRetirement, professionalServices, rentLease, utilities, equipment, travel, insurance, opexSalesMarketing, contractorsDistribution, depreciationExpense, opexOther, totalOpex, operatingIncome, interestExpense, nonOperatingIncome, extraordinaryItems, netIncome };
                    });
                    const RowWithPercent = ({ label, values, indent = 0, bold = false }: any) => (
                      <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 90px 60px)`, gap: '4px', padding: '4px 0', fontSize: bold ? '14px' : '13px', fontWeight: bold ? '600' : 'normal' }}>
                        <div style={{ color: bold ? '#475569' : '#64748b', paddingLeft: `${indent}px` }}>{label}</div>
                        {values.map((v: number, i: number) => {
                          const pct = periodsData[i].revenue > 0 ? (v / periodsData[i].revenue) * 100 : 0;
                          return (
                            <div key={i} style={{ display: 'contents' }}>
                              <div style={{ textAlign: 'right', color: bold ? '#475569' : '#64748b' }}>${(v / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                              <div style={{ textAlign: 'right', color: '#64748b', fontSize: '12px' }}>{pct.toFixed(1)}%</div>
                            </div>
                          );
                        })}
                      </div>
                    );
                    return (
                      <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', overflowX: 'auto' }}>
                        <div style={{ marginBottom: '24px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                          <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Comparative Common Size Income Statement</h2>
                          <div style={{ fontSize: '14px', color: '#64748b' }}>{periodLabel} - {statementDisplay === 'monthly' ? 'Monthly' : statementDisplay === 'quarterly' ? 'Quarterly' : 'Annual'}</div>
                        </div>
                        <div style={{ minWidth: `${200 + (periodsData.length * 150)}px` }}>
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 90px 60px)`, gap: '4px', padding: '12px 0', borderBottom: '2px solid #1e293b', fontWeight: '600', color: '#1e293b' }}>
                          <div>Line Item</div>
                          {periodsData.map((p, i) => (
                            <div key={i} style={{ display: 'contents' }}>
                              <div style={{ textAlign: 'right' }}>{p.label}</div>
                              <div style={{ textAlign: 'right', fontSize: '12px' }}>% of Rev</div>
                            </div>
                          ))}
                          </div>
                          <RowWithPercent label="Revenue" values={periodsData.map(p => p.revenue)} bold />
                          <div style={{ margin: '8px 0 4px', fontSize: '14px', fontWeight: '600', color: '#475569' }}>Cost of Goods Sold</div>
                          {periodsData.some(p => p.cogsPayroll > 0) && <RowWithPercent label="COGS - Payroll" values={periodsData.map(p => p.cogsPayroll)} indent={20} />}
                          {periodsData.some(p => p.cogsOwnerPay > 0) && <RowWithPercent label="COGS - Owner Pay" values={periodsData.map(p => p.cogsOwnerPay)} indent={20} />}
                          {periodsData.some(p => p.cogsContractors > 0) && <RowWithPercent label="COGS - Contractors" values={periodsData.map(p => p.cogsContractors)} indent={20} />}
                          {periodsData.some(p => p.cogsMaterials > 0) && <RowWithPercent label="COGS - Materials" values={periodsData.map(p => p.cogsMaterials)} indent={20} />}
                          {periodsData.some(p => p.cogsCommissions > 0) && <RowWithPercent label="COGS - Commissions" values={periodsData.map(p => p.cogsCommissions)} indent={20} />}
                          {periodsData.some(p => p.cogsOther > 0) && <RowWithPercent label="COGS - Other" values={periodsData.map(p => p.cogsOther)} indent={20} />}
                          <RowWithPercent label="Total COGS" values={periodsData.map(p => p.cogs)} bold />
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 90px 60px)`, gap: '4px', padding: '10px 8px', background: '#dbeafe', borderRadius: '4px', margin: '8px 0', fontWeight: '700', color: '#1e40af' }}>
                            <div>Gross Profit</div>
                            {periodsData.map((p, i) => {
                              const pct = p.revenue > 0 ? (p.grossProfit / p.revenue) * 100 : 0;
                              return (
                                <div key={i} style={{ display: 'contents' }}>
                                  <div style={{ textAlign: 'right' }}>${(p.grossProfit / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                                  <div style={{ textAlign: 'right', fontSize: '12px' }}>{pct.toFixed(1)}%</div>
                                </div>
                              );
                            })}
                          </div>
                          <div style={{ margin: '12px 0 4px', fontSize: '14px', fontWeight: '600', color: '#475569' }}>Operating Expenses</div>
                          {periodsData.some(p => p.opexPayroll > 0) && <RowWithPercent label="Payroll" values={periodsData.map(p => p.opexPayroll)} indent={20} />}
                          {periodsData.some(p => p.ownersBasePay > 0) && <RowWithPercent label="Owner's Base Pay" values={periodsData.map(p => p.ownersBasePay)} indent={20} />}
                          {periodsData.some(p => p.ownersRetirement > 0) && <RowWithPercent label="Owner's Retirement" values={periodsData.map(p => p.ownersRetirement)} indent={20} />}
                          {periodsData.some(p => p.professionalServices > 0) && <RowWithPercent label="Professional Services" values={periodsData.map(p => p.professionalServices)} indent={20} />}
                          {periodsData.some(p => p.rentLease > 0) && <RowWithPercent label="Rent/Lease" values={periodsData.map(p => p.rentLease)} indent={20} />}
                          {periodsData.some(p => p.utilities > 0) && <RowWithPercent label="Utilities" values={periodsData.map(p => p.utilities)} indent={20} />}
                          {periodsData.some(p => p.equipment > 0) && <RowWithPercent label="Equipment" values={periodsData.map(p => p.equipment)} indent={20} />}
                          {periodsData.some(p => p.travel > 0) && <RowWithPercent label="Travel" values={periodsData.map(p => p.travel)} indent={20} />}
                          {periodsData.some(p => p.insurance > 0) && <RowWithPercent label="Insurance" values={periodsData.map(p => p.insurance)} indent={20} />}
                          {periodsData.some(p => p.opexSalesMarketing > 0) && <RowWithPercent label="Sales & Marketing" values={periodsData.map(p => p.opexSalesMarketing)} indent={20} />}
                          {periodsData.some(p => p.contractorsDistribution > 0) && <RowWithPercent label="Contractors - Distribution" values={periodsData.map(p => p.contractorsDistribution)} indent={20} />}
                          {periodsData.some(p => p.depreciationExpense > 0) && <RowWithPercent label="Depreciation & Amortization" values={periodsData.map(p => p.depreciationExpense)} indent={20} />}
                          {periodsData.some(p => p.opexOther > 0) && <RowWithPercent label="Other Operating Expenses" values={periodsData.map(p => p.opexOther)} indent={20} />}
                          <RowWithPercent label="Total Operating Expenses" values={periodsData.map(p => p.totalOpex)} bold />
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 90px 60px)`, gap: '4px', padding: '10px 8px', background: '#dbeafe', borderRadius: '4px', margin: '8px 0', fontWeight: '700', color: '#1e40af' }}>
                            <div>Operating Income</div>
                            {periodsData.map((p, i) => {
                              const pct = p.revenue > 0 ? (p.operatingIncome / p.revenue) * 100 : 0;
                              return (
                                <div key={i} style={{ display: 'contents' }}>
                                  <div style={{ textAlign: 'right' }}>${(p.operatingIncome / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                                  <div style={{ textAlign: 'right', fontSize: '12px' }}>{pct.toFixed(1)}%</div>
                                </div>
                              );
                            })}
                          </div>
                          {periodsData.some(p => p.interestExpense > 0 || p.nonOperatingIncome > 0 || p.extraordinaryItems !== 0) && (
                            <>
                              <div style={{ margin: '12px 0 4px', fontSize: '14px', fontWeight: '600', color: '#475569' }}>Other Income/(Expense)</div>
                              {periodsData.some(p => p.interestExpense > 0) && <RowWithPercent label="Interest Expense" values={periodsData.map(p => -p.interestExpense)} indent={20} />}
                              {periodsData.some(p => p.nonOperatingIncome > 0) && <RowWithPercent label="Non-Operating Income" values={periodsData.map(p => p.nonOperatingIncome)} indent={20} />}
                              {periodsData.some(p => p.extraordinaryItems !== 0) && <RowWithPercent label="Extraordinary Items" values={periodsData.map(p => p.extraordinaryItems)} indent={20} />}
                            </>
                          )}
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 90px 60px)`, gap: '4px', padding: '12px 8px', background: '#dcfce7', borderRadius: '4px', margin: '12px 0 0', fontWeight: '700', fontSize: '15px' }}>
                            <div style={{ color: '#166534' }}>Net Income</div>
                            {periodsData.map((p, i) => {
                              const pct = p.revenue > 0 ? (p.netIncome / p.revenue) * 100 : 0;
                              return (
                                <div key={i} style={{ display: 'contents' }}>
                                  <div style={{ textAlign: 'right', color: p.netIncome >= 0 ? '#166534' : '#991b1b' }}>
                                    {p.netIncome >= 0 ? '$' : '($'}{(Math.abs(p.netIncome) / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K{p.netIncome < 0 ? ')' : ''}
                                  </div>
                                  <div style={{ textAlign: 'right', fontSize: '12px', color: p.netIncome >= 0 ? '#166534' : '#991b1b' }}>{pct.toFixed(1)}%</div>
                                </div>
                              );
                            })}
                          </div>
                        </div>
                      </div>
                    );
                  }
                  
                  const revenue = periodMonths.reduce((sum, m) => sum + (m.revenue || 0), 0);
                  
                  const cogsPayroll = periodMonths.reduce((sum, m) => sum + (m.cogsPayroll || 0), 0);
                  const cogsOwnerPay = periodMonths.reduce((sum, m) => sum + (m.cogsOwnerPay || 0), 0);
                  const cogsContractors = periodMonths.reduce((sum, m) => sum + (m.cogsContractors || 0), 0);
                  const cogsMaterials = periodMonths.reduce((sum, m) => sum + (m.cogsMaterials || 0), 0);
                  const cogsCommissions = periodMonths.reduce((sum, m) => sum + (m.cogsCommissions || 0), 0);
                  const cogsOther = periodMonths.reduce((sum, m) => sum + (m.cogsOther || 0), 0);
                  const cogs = cogsPayroll + cogsOwnerPay + cogsContractors + cogsMaterials + cogsCommissions + cogsOther;
                  
                  const grossProfit = revenue - cogs;
                  
                  const opexPayroll = periodMonths.reduce((sum, m) => sum + (m.opexPayroll || 0), 0);
                  const ownersBasePay = periodMonths.reduce((sum, m) => sum + (m.ownersBasePay || 0), 0);
                  const ownersRetirement = periodMonths.reduce((sum, m) => sum + (m.ownersRetirement || 0), 0);
                  const professionalServices = periodMonths.reduce((sum, m) => sum + (m.professionalServices || 0), 0);
                  const rentLease = periodMonths.reduce((sum, m) => sum + (m.rentLease || 0), 0);
                  const utilities = periodMonths.reduce((sum, m) => sum + (m.utilities || 0), 0);
                  const equipment = periodMonths.reduce((sum, m) => sum + (m.equipment || 0), 0);
                  const travel = periodMonths.reduce((sum, m) => sum + (m.travel || 0), 0);
                  const insurance = periodMonths.reduce((sum, m) => sum + (m.insurance || 0), 0);
                  const opexSalesMarketing = periodMonths.reduce((sum, m) => sum + (m.opexSalesMarketing || 0), 0);
                  const contractorsDistribution = periodMonths.reduce((sum, m) => sum + (m.contractorsDistribution || 0), 0);
                  const depreciationExpense = periodMonths.reduce((sum, m) => sum + (m.depreciationExpense || 0), 0);
                  const opexOther = periodMonths.reduce((sum, m) => sum + (m.opexOther || 0), 0);
                  
                  const totalOpex = opexPayroll + ownersBasePay + ownersRetirement + professionalServices + 
                                   rentLease + utilities + equipment + travel + insurance + 
                                   opexSalesMarketing + contractorsDistribution + depreciationExpense + opexOther;
                  
                  const operatingIncome = grossProfit - totalOpex;
                  
                  const interestExpense = periodMonths.reduce((sum, m) => sum + (m.interestExpense || 0), 0);
                  const nonOperatingIncome = periodMonths.reduce((sum, m) => sum + (m.nonOperatingIncome || 0), 0);
                  const extraordinaryItems = periodMonths.reduce((sum, m) => sum + (m.extraordinaryItems || 0), 0);
                  
                  const netIncome = operatingIncome - interestExpense + nonOperatingIncome + extraordinaryItems;
                  
                  const calcPercent = (value: number) => revenue > 0 ? ((value / revenue) * 100).toFixed(1) + '%' : '0.0%';
                  
                  return (
                    <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                        <div style={{ marginBottom: '32px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                          <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Common Size Income Statement</h2>
                          <div style={{ fontSize: '14px', color: '#64748b' }}>For the Period: {periodLabel}</div>
                        </div>

                        {/* Header Row */}
                        <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '12px 0', borderBottom: '2px solid #1e293b', marginBottom: '16px', fontWeight: '600', color: '#1e293b' }}>
                          <div>Line Item</div>
                          <div style={{ textAlign: 'right' }}>Amount</div>
                          <div style={{ textAlign: 'right' }}>% of Revenue</div>
                        </div>

                        {/* Revenue */}
                        <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '8px 0', borderBottom: '1px solid #e2e8f0', fontWeight: '600' }}>
                          <div style={{ color: '#1e293b' }}>Revenue</div>
                          <div style={{ textAlign: 'right', color: '#1e293b' }}>${revenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                          <div style={{ textAlign: 'right', color: '#1e293b' }}>100.0%</div>
                        </div>

                        {/* COGS */}
                        <div style={{ marginTop: '16px' }}>
                          <div style={{ fontWeight: '600', color: '#475569', marginBottom: '8px', fontSize: '14px' }}>Cost of Goods Sold</div>
                          {cogsPayroll > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>COGS - Payroll</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${cogsPayroll.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(cogsPayroll)}</div>
                            </div>
                          )}
                          {cogsOwnerPay > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>COGS - Owner Pay</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${cogsOwnerPay.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(cogsOwnerPay)}</div>
                            </div>
                          )}
                          {cogsContractors > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>COGS - Contractors</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${cogsContractors.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(cogsContractors)}</div>
                            </div>
                          )}
                          {cogsMaterials > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>COGS - Materials</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${cogsMaterials.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(cogsMaterials)}</div>
                            </div>
                          )}
                          {cogsCommissions > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>COGS - Commissions</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${cogsCommissions.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(cogsCommissions)}</div>
                            </div>
                          )}
                          {cogsOther > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>COGS - Other</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${cogsOther.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(cogsOther)}</div>
                            </div>
                          )}
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '8px 0', borderTop: '1px solid #cbd5e1', marginTop: '4px', fontWeight: '600' }}>
                            <div style={{ color: '#475569' }}>Total COGS</div>
                            <div style={{ textAlign: 'right', color: '#475569' }}>${cogs.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#475569' }}>{calcPercent(cogs)}</div>
                          </div>
                        </div>

                        {/* Gross Profit */}
                        <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '12px 8px', background: '#dbeafe', borderRadius: '6px', margin: '16px 0', fontWeight: '700', color: '#1e40af' }}>
                          <div>Gross Profit</div>
                          <div style={{ textAlign: 'right' }}>${grossProfit.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                          <div style={{ textAlign: 'right' }}>{calcPercent(grossProfit)}</div>
                        </div>

                        {/* Operating Expenses */}
                        <div style={{ marginTop: '16px' }}>
                          <div style={{ fontWeight: '600', color: '#475569', marginBottom: '8px', fontSize: '14px' }}>Operating Expenses</div>
                          {opexPayroll > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>Payroll</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${opexPayroll.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(opexPayroll)}</div>
                            </div>
                          )}
                          {ownersBasePay > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>Owner's Base Pay</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${ownersBasePay.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(ownersBasePay)}</div>
                            </div>
                          )}
                          {ownersRetirement > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>Owner's Retirement</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${ownersRetirement.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(ownersRetirement)}</div>
                            </div>
                          )}
                          {professionalServices > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>Professional Services</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${professionalServices.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(professionalServices)}</div>
                            </div>
                          )}
                          {rentLease > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>Rent/Lease</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${rentLease.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(rentLease)}</div>
                            </div>
                          )}
                          {utilities > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>Utilities</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${utilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(utilities)}</div>
                            </div>
                          )}
                          {equipment > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>Equipment</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${equipment.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(equipment)}</div>
                            </div>
                          )}
                          {travel > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>Travel</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${travel.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(travel)}</div>
                            </div>
                          )}
                          {insurance > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>Insurance</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${insurance.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(insurance)}</div>
                            </div>
                          )}
                          {opexSalesMarketing > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>Sales & Marketing</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${opexSalesMarketing.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(opexSalesMarketing)}</div>
                            </div>
                          )}
                          {contractorsDistribution > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>Contractors - Distribution</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${contractorsDistribution.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(contractorsDistribution)}</div>
                            </div>
                          )}
                          {depreciationExpense > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>Depreciation & Amortization</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${depreciationExpense.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(depreciationExpense)}</div>
                            </div>
                          )}
                          {opexOther > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>Other Operating Expenses</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${opexOther.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(opexOther)}</div>
                            </div>
                          )}
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '8px 0', borderTop: '1px solid #cbd5e1', marginTop: '4px', fontWeight: '600' }}>
                            <div style={{ color: '#475569' }}>Total Operating Expenses</div>
                            <div style={{ textAlign: 'right', color: '#475569' }}>${totalOpex.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#475569' }}>{calcPercent(totalOpex)}</div>
                          </div>
                        </div>

                        {/* Operating Income */}
                        <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '12px 8px', background: '#dbeafe', borderRadius: '6px', margin: '16px 0', fontWeight: '700', color: '#1e40af' }}>
                          <div>Operating Income</div>
                          <div style={{ textAlign: 'right' }}>${operatingIncome.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                          <div style={{ textAlign: 'right' }}>{calcPercent(operatingIncome)}</div>
                        </div>

                        {/* Other Income/Expense */}
                        {(interestExpense > 0 || nonOperatingIncome > 0 || extraordinaryItems !== 0) && (
                          <div style={{ marginTop: '16px' }}>
                            <div style={{ fontWeight: '600', color: '#475569', marginBottom: '8px', fontSize: '14px' }}>Other Income/(Expense)</div>
                            {interestExpense > 0 && (
                              <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                                <div style={{ color: '#64748b' }}>Interest Expense</div>
                                <div style={{ textAlign: 'right', color: '#64748b' }}>(${ interestExpense.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })})</div>
                                <div style={{ textAlign: 'right', color: '#64748b' }}>({calcPercent(interestExpense)})</div>
                              </div>
                            )}
                            {nonOperatingIncome > 0 && (
                              <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                                <div style={{ color: '#64748b' }}>Non-Operating Income</div>
                                <div style={{ textAlign: 'right', color: '#64748b' }}>${nonOperatingIncome.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                                <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(nonOperatingIncome)}</div>
                              </div>
                            )}
                            {extraordinaryItems !== 0 && (
                              <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                                <div style={{ color: '#64748b' }}>Extraordinary Items</div>
                                <div style={{ textAlign: 'right', color: '#64748b' }}>
                                  {extraordinaryItems >= 0 ? '$' : '($'}{Math.abs(extraordinaryItems).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}{extraordinaryItems < 0 ? ')' : ''}
                                </div>
                                <div style={{ textAlign: 'right', color: '#64748b' }}>
                                  {extraordinaryItems >= 0 ? calcPercent(extraordinaryItems) : `(${calcPercent(Math.abs(extraordinaryItems))})`}
                                </div>
                              </div>
                            )}
                          </div>
                        )}

                        {/* Net Income */}
                        <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '16px 8px', background: netIncome >= 0 ? '#dcfce7' : '#fee2e2', borderRadius: '6px', marginTop: '24px', fontWeight: '700', fontSize: '16px', color: netIncome >= 0 ? '#166534' : '#991b1b' }}>
                          <div>Net Income</div>
                          <div style={{ textAlign: 'right' }}>
                            {netIncome >= 0 ? '$' : '($'}{Math.abs(netIncome).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}{netIncome < 0 ? ')' : ''}
                          </div>
                          <div style={{ textAlign: 'right' }}>{calcPercent(netIncome)}</div>
                        </div>
                    </div>
                  );
                }
                
                // BALANCE SHEET - Latest point in time
                else if (statementType === 'balance-sheet') {
                  // Check if we're showing multiple periods side-by-side
                  if (displayPeriods.length > 1) {
                    // Multi-column comparative balance sheet
                    const calculateBalanceData = (months: any[]) => {
                      // For balance sheet, use the latest month's values (point-in-time)
                      const latest = months[months.length - 1];
                      const cash = latest.cash || 0;
                      const ar = latest.ar || 0;
                      const inventory = latest.inventory || 0;
                      const otherCA = latest.otherCA || 0;
                      const tca = cash + ar + inventory + otherCA;
                      
                      const fixedAssets = latest.fixedAssets || 0;
                      const intangibleAssets = latest.intangibleAssets || 0;
                      const otherNonCurrentAssets = latest.otherNonCurrentAssets || 0;
                      const nonCurrentAssets = fixedAssets + intangibleAssets + otherNonCurrentAssets;
                      const totalAssets = tca + nonCurrentAssets;
                      
                      const ap = latest.ap || 0;
                      const shortTermDebt = latest.shortTermDebt || 0;
                      const currentPortionLTD = latest.currentPortionLTD || 0;
                      const otherCurrentLiabilities = latest.otherCurrentLiabilities || 0;
                      const totalCurrentLiabilities = ap + shortTermDebt + currentPortionLTD + otherCurrentLiabilities;
                      
                      const ltd = latest.ltd || 0;
                      const otherLongTermLiabilities = latest.otherLongTermLiabilities || 0;
                      const totalLongTermLiabilities = ltd + otherLongTermLiabilities;
                      const totalLiabilities = totalCurrentLiabilities + totalLongTermLiabilities;
                      
                      const paidInCapital = latest.paidInCapital || 0;
                      const retainedEarnings = latest.retainedEarnings || 0;
                      const totalEquity = paidInCapital + retainedEarnings;
                      
                      return {
                        cash, ar, inventory, otherCA, tca,
                        fixedAssets, intangibleAssets, otherNonCurrentAssets, nonCurrentAssets, totalAssets,
                        ap, shortTermDebt, currentPortionLTD, otherCurrentLiabilities, totalCurrentLiabilities,
                        ltd, otherLongTermLiabilities, totalLongTermLiabilities, totalLiabilities,
                        paidInCapital, retainedEarnings, totalEquity
                      };
                    };
                    
                    const balanceData = displayPeriods.map(p => ({
                      label: p.label,
                      ...calculateBalanceData(p.months)
                    }));
                    
                    return (
                      <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', overflowX: 'auto' }}>
                        <div style={{ marginBottom: '32px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                          <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Comparative Balance Sheet</h2>
                          <div style={{ fontSize: '14px', color: '#64748b' }}>{periodLabel} - {statementDisplay === 'monthly' ? 'Monthly' : statementDisplay === 'quarterly' ? 'Quarterly' : 'Annual'}</div>
                        </div>
                        
                        {/* Table with multiple columns */}
                        <div style={{ minWidth: `${200 + (balanceData.length * 110)}px` }}>
                          {/* Header Row */}
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '12px 0', borderBottom: '2px solid #1e293b', fontWeight: '600', color: '#1e293b', position: 'sticky', top: 0, background: 'white' }}>
                            <div>Line Item</div>
                            {balanceData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right' }}>{p.label}</div>
                            ))}
                          </div>
                          
                          {/* ASSETS Section Header */}
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '12px 0 4px 0', fontSize: '15px', fontWeight: '700', marginTop: '8px' }}>
                            <div style={{ color: '#1e293b' }}>ASSETS</div>
                            {balanceData.map((p, i) => <div key={i}></div>)}
                          </div>
                          
                          {/* Current Assets Header */}
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '8px 0 4px 0', fontSize: '14px', fontWeight: '600' }}>
                            <div style={{ color: '#475569' }}>Current Assets</div>
                            {balanceData.map((p, i) => <div key={i}></div>)}
                          </div>
                          
                          {/* Current Assets Details */}
                          {balanceData.some(p => p.cash > 0) && (
                            <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                              <div style={{ color: '#64748b', paddingLeft: '20px' }}>Cash & Cash Equivalents</div>
                              {balanceData.map((p, i) => (
                                <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.cash / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                              ))}
                            </div>
                          )}
                          {balanceData.some(p => p.ar > 0) && (
                            <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                              <div style={{ color: '#64748b', paddingLeft: '20px' }}>Accounts Receivable</div>
                              {balanceData.map((p, i) => (
                                <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.ar / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                              ))}
                            </div>
                          )}
                          {balanceData.some(p => p.inventory > 0) && (
                            <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                              <div style={{ color: '#64748b', paddingLeft: '20px' }}>Inventory</div>
                              {balanceData.map((p, i) => (
                                <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.inventory / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                              ))}
                            </div>
                          )}
                          {balanceData.some(p => p.otherCA > 0) && (
                            <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                              <div style={{ color: '#64748b', paddingLeft: '20px' }}>Other Current Assets</div>
                              {balanceData.map((p, i) => (
                                <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.otherCA / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                              ))}
                            </div>
                          )}
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '6px 0', fontSize: '14px', fontWeight: '600', borderTop: '1px solid #cbd5e1', marginTop: '4px' }}>
                            <div style={{ color: '#475569' }}>Total Current Assets</div>
                            {balanceData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#475569' }}>${(p.tca / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                          
                          {/* Non-Current Assets Header */}
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '8px 0 4px 0', fontSize: '14px', fontWeight: '600', marginTop: '8px' }}>
                            <div style={{ color: '#475569' }}>Non-Current Assets</div>
                            {balanceData.map((p, i) => <div key={i}></div>)}
                          </div>
                          
                          {balanceData.some(p => p.fixedAssets > 0) && (
                            <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                              <div style={{ color: '#64748b', paddingLeft: '20px' }}>Property, Plant & Equipment</div>
                              {balanceData.map((p, i) => (
                                <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.fixedAssets / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                              ))}
                            </div>
                          )}
                          {balanceData.some(p => p.intangibleAssets > 0) && (
                            <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                              <div style={{ color: '#64748b', paddingLeft: '20px' }}>Intangible Assets</div>
                              {balanceData.map((p, i) => (
                                <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.intangibleAssets / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                              ))}
                            </div>
                          )}
                          {balanceData.some(p => p.otherNonCurrentAssets > 0) && (
                            <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                              <div style={{ color: '#64748b', paddingLeft: '20px' }}>Other Non-Current Assets</div>
                              {balanceData.map((p, i) => (
                                <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.otherNonCurrentAssets / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                              ))}
                            </div>
                          )}
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '6px 0', fontSize: '14px', fontWeight: '600', borderTop: '1px solid #cbd5e1', marginTop: '4px' }}>
                            <div style={{ color: '#475569' }}>Total Non-Current Assets</div>
                            {balanceData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#475569' }}>${(p.nonCurrentAssets / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                          
                          {/* TOTAL ASSETS */}
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '10px 8px', background: '#dbeafe', borderRadius: '4px', marginTop: '8px', fontWeight: '700' }}>
                            <div style={{ color: '#1e40af' }}>TOTAL ASSETS</div>
                            {balanceData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#1e40af' }}>${(p.totalAssets / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                          
                          {/* LIABILITIES Section Header */}
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '12px 0 4px 0', fontSize: '15px', fontWeight: '700', marginTop: '16px' }}>
                            <div style={{ color: '#1e293b' }}>LIABILITIES</div>
                            {balanceData.map((p, i) => <div key={i}></div>)}
                          </div>
                          
                          {/* Current Liabilities Header */}
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '8px 0 4px 0', fontSize: '14px', fontWeight: '600' }}>
                            <div style={{ color: '#475569' }}>Current Liabilities</div>
                            {balanceData.map((p, i) => <div key={i}></div>)}
                          </div>
                          
                          {balanceData.some(p => p.ap > 0) && (
                            <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                              <div style={{ color: '#64748b', paddingLeft: '20px' }}>Accounts Payable</div>
                              {balanceData.map((p, i) => (
                                <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.ap / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                              ))}
                            </div>
                          )}
                          {balanceData.some(p => p.shortTermDebt > 0) && (
                            <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                              <div style={{ color: '#64748b', paddingLeft: '20px' }}>Short-Term Debt</div>
                              {balanceData.map((p, i) => (
                                <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.shortTermDebt / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                              ))}
                            </div>
                          )}
                          {balanceData.some(p => p.currentPortionLTD > 0) && (
                            <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                              <div style={{ color: '#64748b', paddingLeft: '20px' }}>Current Portion of LT Debt</div>
                              {balanceData.map((p, i) => (
                                <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.currentPortionLTD / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                              ))}
                            </div>
                          )}
                          {balanceData.some(p => p.otherCurrentLiabilities > 0) && (
                            <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                              <div style={{ color: '#64748b', paddingLeft: '20px' }}>Other Current Liabilities</div>
                              {balanceData.map((p, i) => (
                                <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.otherCurrentLiabilities / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                              ))}
                            </div>
                          )}
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '6px 0', fontSize: '14px', fontWeight: '600', borderTop: '1px solid #cbd5e1', marginTop: '4px' }}>
                            <div style={{ color: '#475569' }}>Total Current Liabilities</div>
                            {balanceData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#475569' }}>${(p.totalCurrentLiabilities / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                          
                          {/* Long-Term Liabilities Header */}
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '8px 0 4px 0', fontSize: '14px', fontWeight: '600', marginTop: '8px' }}>
                            <div style={{ color: '#475569' }}>Long-Term Liabilities</div>
                            {balanceData.map((p, i) => <div key={i}></div>)}
                          </div>
                          
                          {balanceData.some(p => p.ltd > 0) && (
                            <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                              <div style={{ color: '#64748b', paddingLeft: '20px' }}>Long-Term Debt</div>
                              {balanceData.map((p, i) => (
                                <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.ltd / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                              ))}
                            </div>
                          )}
                          {balanceData.some(p => p.otherLongTermLiabilities > 0) && (
                            <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                              <div style={{ color: '#64748b', paddingLeft: '20px' }}>Other Long-Term Liabilities</div>
                              {balanceData.map((p, i) => (
                                <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.otherLongTermLiabilities / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                              ))}
                            </div>
                          )}
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '6px 0', fontSize: '14px', fontWeight: '600', borderTop: '1px solid #cbd5e1', marginTop: '4px' }}>
                            <div style={{ color: '#475569' }}>Total Long-Term Liabilities</div>
                            {balanceData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#475569' }}>${(p.totalLongTermLiabilities / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                          
                          {/* TOTAL LIABILITIES */}
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '10px 8px', background: '#fef3c7', borderRadius: '4px', marginTop: '8px', fontWeight: '700' }}>
                            <div style={{ color: '#92400e' }}>TOTAL LIABILITIES</div>
                            {balanceData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#92400e' }}>${(p.totalLiabilities / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                          
                          {/* EQUITY Section Header */}
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '12px 0 4px 0', fontSize: '15px', fontWeight: '700', marginTop: '16px' }}>
                            <div style={{ color: '#1e293b' }}>EQUITY</div>
                            {balanceData.map((p, i) => <div key={i}></div>)}
                          </div>
                          
                          {balanceData.some(p => p.paidInCapital > 0) && (
                            <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                              <div style={{ color: '#64748b', paddingLeft: '20px' }}>Paid-in Capital</div>
                              {balanceData.map((p, i) => (
                                <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.paidInCapital / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                              ))}
                            </div>
                          )}
                          {balanceData.some(p => p.retainedEarnings !== 0) && (
                            <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                              <div style={{ color: '#64748b', paddingLeft: '20px' }}>Retained Earnings</div>
                              {balanceData.map((p, i) => (
                                <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>
                                  {p.retainedEarnings >= 0 ? '$' : '($'}{(Math.abs(p.retainedEarnings) / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K{p.retainedEarnings < 0 ? ')' : ''}
                                </div>
                              ))}
                            </div>
                          )}
                          
                          {/* TOTAL EQUITY */}
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '10px 8px', background: '#dcfce7', borderRadius: '4px', marginTop: '8px', fontWeight: '700' }}>
                            <div style={{ color: '#166534' }}>TOTAL EQUITY</div>
                            {balanceData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: p.totalEquity >= 0 ? '#166534' : '#991b1b' }}>
                                {p.totalEquity >= 0 ? '$' : '($'}{(Math.abs(p.totalEquity) / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K{p.totalEquity < 0 ? ')' : ''}
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    );
                  }
                  
                  // Single period balance sheet (original logic)
                  const cash = latestMonth.cash || 0;
                  const ar = latestMonth.ar || 0;
                  const inventory = latestMonth.inventory || 0;
                  const otherCA = latestMonth.otherCA || 0;
                  const tca = cash + ar + inventory + otherCA;
                  
                  const fixedAssets = latestMonth.fixedAssets || 0;
                  const intangibleAssets = latestMonth.intangibleAssets || 0;
                  const otherNonCurrentAssets = latestMonth.otherNonCurrentAssets || 0;
                  const nonCurrentAssets = fixedAssets + intangibleAssets + otherNonCurrentAssets;
                  
                  const totalAssets = tca + nonCurrentAssets;
                  
                  const ap = latestMonth.ap || 0;
                  const shortTermDebt = latestMonth.shortTermDebt || 0;
                  const currentPortionLTD = latestMonth.currentPortionLTD || 0;
                  const otherCurrentLiabilities = latestMonth.otherCurrentLiabilities || 0;
                  const totalCurrentLiabilities = ap + shortTermDebt + currentPortionLTD + otherCurrentLiabilities;
                  
                  const ltd = latestMonth.ltd || 0;
                  const otherLongTermLiabilities = latestMonth.otherLongTermLiabilities || 0;
                  const totalLongTermLiabilities = ltd + otherLongTermLiabilities;
                  
                  const totalLiabilities = totalCurrentLiabilities + totalLongTermLiabilities;
                  
                  const paidInCapital = latestMonth.paidInCapital || 0;
                  const retainedEarnings = latestMonth.retainedEarnings || 0;
                  const totalEquity = paidInCapital + retainedEarnings;
                  
                  const totalLAndE = totalLiabilities + totalEquity;
                  
                  const latestDate = new Date(latestMonth.date || latestMonth.month);
                  const asOfDate = latestDate.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });
                  
                  return (
                    <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                      <div style={{ marginBottom: '32px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                        <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Balance Sheet</h2>
                        <div style={{ fontSize: '14px', color: '#64748b' }}>As of {asOfDate} (Period: {periodLabel})</div>
                      </div>

                      {/* ASSETS */}
                      <div style={{ marginBottom: '32px' }}>
                        <div style={{ fontWeight: '700', fontSize: '18px', color: '#1e293b', marginBottom: '12px' }}>ASSETS</div>
                        
                        {/* Current Assets */}
                        <div style={{ marginBottom: '16px' }}>
                          <div style={{ fontWeight: '600', color: '#475569', marginBottom: '8px' }}>Current Assets</div>
                          {cash > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#64748b' }}>Cash & Cash Equivalents</span>
                              <span style={{ color: '#64748b' }}>${cash.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {ar > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#64748b' }}>Accounts Receivable</span>
                              <span style={{ color: '#64748b' }}>${ar.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {inventory > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#64748b' }}>Inventory</span>
                              <span style={{ color: '#64748b' }}>${inventory.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {otherCA > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#64748b' }}>Other Current Assets</span>
                              <span style={{ color: '#64748b' }}>${otherCA.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0 8px 10px', borderTop: '1px solid #cbd5e1', marginTop: '4px', fontWeight: '600' }}>
                            <span style={{ color: '#475569' }}>Total Current Assets</span>
                            <span style={{ color: '#475569' }}>${tca.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        </div>

                        {/* Non-Current Assets */}
                        <div style={{ marginBottom: '16px' }}>
                          <div style={{ fontWeight: '600', color: '#475569', marginBottom: '8px' }}>Non-Current Assets</div>
                          {fixedAssets > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#64748b' }}>Property, Plant & Equipment</span>
                              <span style={{ color: '#64748b' }}>${fixedAssets.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {intangibleAssets > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#64748b' }}>Intangible Assets</span>
                              <span style={{ color: '#64748b' }}>${intangibleAssets.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {otherNonCurrentAssets > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#64748b' }}>Other Non-Current Assets</span>
                              <span style={{ color: '#64748b' }}>${otherNonCurrentAssets.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0 8px 10px', borderTop: '1px solid #cbd5e1', marginTop: '4px', fontWeight: '600' }}>
                            <span style={{ color: '#475569' }}>Total Non-Current Assets</span>
                            <span style={{ color: '#475569' }}>${nonCurrentAssets.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        </div>

                        {/* TOTAL ASSETS */}
                        <div style={{ background: '#dbeafe', padding: '12px', borderRadius: '8px' }}>
                          <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                            <span style={{ fontWeight: '700', fontSize: '16px', color: '#1e40af' }}>TOTAL ASSETS</span>
                            <span style={{ fontWeight: '700', fontSize: '16px', color: '#1e40af' }}>
                              ${totalAssets.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                            </span>
                          </div>
                        </div>
                      </div>

                      {/* LIABILITIES */}
                      <div style={{ marginBottom: '32px' }}>
                        <div style={{ fontWeight: '700', fontSize: '18px', color: '#1e293b', marginBottom: '12px' }}>LIABILITIES</div>
                        
                        {/* Current Liabilities */}
                        <div style={{ marginBottom: '16px' }}>
                          <div style={{ fontWeight: '600', color: '#475569', marginBottom: '8px' }}>Current Liabilities</div>
                          {ap > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#64748b' }}>Accounts Payable</span>
                              <span style={{ color: '#64748b' }}>${ap.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {shortTermDebt > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#64748b' }}>Short-Term Debt</span>
                              <span style={{ color: '#64748b' }}>${shortTermDebt.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {currentPortionLTD > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#64748b' }}>Current Portion of LT Debt</span>
                              <span style={{ color: '#64748b' }}>${currentPortionLTD.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {otherCurrentLiabilities > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#64748b' }}>Other Current Liabilities</span>
                              <span style={{ color: '#64748b' }}>${otherCurrentLiabilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0 8px 10px', borderTop: '1px solid #cbd5e1', marginTop: '4px', fontWeight: '600' }}>
                            <span style={{ color: '#475569' }}>Total Current Liabilities</span>
                            <span style={{ color: '#475569' }}>${totalCurrentLiabilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        </div>

                        {/* Long-Term Liabilities */}
                        <div style={{ marginBottom: '16px' }}>
                          <div style={{ fontWeight: '600', color: '#475569', marginBottom: '8px' }}>Long-Term Liabilities</div>
                          {ltd > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#64748b' }}>Long-Term Debt</span>
                              <span style={{ color: '#64748b' }}>${ltd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          {otherLongTermLiabilities > 0 && (
                            <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                              <span style={{ color: '#64748b' }}>Other Long-Term Liabilities</span>
                              <span style={{ color: '#64748b' }}>${otherLongTermLiabilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                            </div>
                          )}
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0 8px 10px', borderTop: '1px solid #cbd5e1', marginTop: '4px', fontWeight: '600' }}>
                            <span style={{ color: '#475569' }}>Total Long-Term Liabilities</span>
                            <span style={{ color: '#475569' }}>${totalLongTermLiabilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        </div>

                        {/* TOTAL LIABILITIES */}
                        <div style={{ background: '#fef3c7', padding: '12px', borderRadius: '8px' }}>
                          <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                            <span style={{ fontWeight: '700', fontSize: '16px', color: '#92400e' }}>TOTAL LIABILITIES</span>
                            <span style={{ fontWeight: '700', fontSize: '16px', color: '#92400e' }}>
                              ${totalLiabilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                            </span>
                          </div>
                        </div>
                      </div>

                      {/* EQUITY */}
                      <div style={{ marginBottom: '32px' }}>
                        <div style={{ fontWeight: '700', fontSize: '18px', color: '#1e293b', marginBottom: '12px' }}>EQUITY</div>
                        {paidInCapital > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#64748b' }}>Paid-in Capital</span>
                            <span style={{ color: '#64748b' }}>${paidInCapital.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {retainedEarnings !== 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#64748b' }}>Retained Earnings</span>
                            <span style={{ color: '#64748b' }}>
                              {retainedEarnings >= 0 ? '$' : '($'}{Math.abs(retainedEarnings).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}{retainedEarnings < 0 ? ')' : ''}
                            </span>
                          </div>
                        )}

                        {/* TOTAL EQUITY */}
                        <div style={{ background: '#dcfce7', padding: '12px', borderRadius: '8px', marginTop: '8px' }}>
                          <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                            <span style={{ fontWeight: '700', fontSize: '16px', color: '#166534' }}>TOTAL EQUITY</span>
                            <span style={{ fontWeight: '700', fontSize: '16px', color: '#166534' }}>
                              {totalEquity >= 0 ? '$' : '($'}{Math.abs(totalEquity).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}{totalEquity < 0 ? ')' : ''}
                            </span>
                          </div>
                        </div>
                      </div>

                      {/* TOTAL LIABILITIES & EQUITY */}
                      <div style={{ background: '#f1f5f9', padding: '16px', borderRadius: '8px', marginTop: '32px' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                          <span style={{ fontWeight: '700', fontSize: '18px', color: '#1e293b' }}>TOTAL LIABILITIES & EQUITY</span>
                          <span style={{ fontWeight: '700', fontSize: '18px', color: '#1e293b' }}>
                            ${totalLAndE.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                          </span>
                        </div>
                        {Math.abs(totalAssets - totalLAndE) > 0.01 && (
                          <div style={{ fontSize: '12px', color: '#ef4444', marginTop: '8px', textAlign: 'right' }}>
                            ⚠️ Balance check: Assets - (Liabilities + Equity) = ${(totalAssets - totalLAndE).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                          </div>
                        )}
                      </div>
                    </div>
                  );
                }
              }
              
              else {
                return (
                  <div style={{ background: 'white', borderRadius: '12px', padding: '48px 32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', minHeight: '400px', textAlign: 'center' }}>
                    <div style={{ fontSize: '18px', fontWeight: '600', color: '#64748b', marginBottom: '12px' }}>
                      📊 Financial Statement Viewer
                    </div>
                    <p style={{ fontSize: '14px', color: '#94a3b8', maxWidth: '600px', margin: '0 auto' }}>
                      {monthly.length === 0 
                        ? 'No financial data available. Please import financial data or sync from QuickBooks.'
                        : 'Select options above to view financial statements.'}
                    </p>
                  </div>
                );
              }
            })()}

            {/* Hidden: Old P&L and Balance Sheet containers - will be removed in future update */}
            <div style={{ display: 'none' }}>
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '24px' }}>
              {/* Left: QuickBooks Raw Data */}
              <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
              {/* Profit & Loss Report */}
              <div style={{ marginBottom: '48px' }}>
                <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '20px', paddingBottom: '12px', borderBottom: '3px solid #667eea' }}>Profit & Loss</h2>
                {plRows.length > 0 ? (
                  <div>
                    {plRows.map((row, idx) => (
                      <div 
                        key={idx} 
                        style={{ 
                          display: 'flex', 
                          justifyContent: 'space-between', 
                          padding: row.isHeader ? '12px 8px 8px' : (row.isTotal ? '10px 8px' : '6px 8px'),
                          paddingLeft: `${8 + (row.level * 20)}px`,
                          borderBottom: row.isTotal ? '2px solid #e2e8f0' : (row.isHeader ? '1px solid #e2e8f0' : 'none'),
                          background: row.isHeader ? '#f8fafc' : (row.isTotal ? '#f1f5f9' : 'transparent'),
                          fontWeight: row.isHeader || row.isTotal ? '600' : '400',
                          fontSize: row.isHeader ? '15px' : (row.isTotal ? '14px' : '13px'),
                          color: row.isHeader ? '#1e293b' : (row.isTotal ? '#0f172a' : '#475569')
                        }}
                      >
                        <span>{row.name}</span>
                        {!row.isHeader && <span style={{ fontFamily: 'monospace', whiteSpace: 'nowrap' }}>{row.value}</span>}
                      </div>
                    ))}
                  </div>
                ) : (
                  <div style={{ padding: '32px', textAlign: 'center', color: '#64748b' }}>No Profit & Loss data available</div>
                )}
              </div>

              {/* Balance Sheet Report */}
              <div>
                <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '20px', paddingBottom: '12px', borderBottom: '3px solid #667eea' }}>Balance Sheet</h2>
                {bsRows.length > 0 ? (
                  <div>
                    {bsRows.map((row, idx) => (
                      <div 
                        key={idx} 
                        style={{ 
                          display: 'flex', 
                          justifyContent: 'space-between', 
                          padding: row.isHeader ? '12px 8px 8px' : (row.isTotal ? '10px 8px' : '6px 8px'),
                          paddingLeft: `${8 + (row.level * 20)}px`,
                          borderBottom: row.isTotal ? '2px solid #e2e8f0' : (row.isHeader ? '1px solid #e2e8f0' : 'none'),
                          background: row.isHeader ? '#f8fafc' : (row.isTotal ? '#f1f5f9' : 'transparent'),
                          fontWeight: row.isHeader || row.isTotal ? '600' : '400',
                          fontSize: row.isHeader ? '15px' : (row.isTotal ? '14px' : '13px'),
                          color: row.isHeader ? '#1e293b' : (row.isTotal ? '#0f172a' : '#475569')
                        }}
                      >
                        <span>{row.name}</span>
                        {!row.isHeader && <span style={{ fontFamily: 'monospace', whiteSpace: 'nowrap' }}>{row.value}</span>}
                      </div>
                    ))}
                  </div>
                ) : (
                  <div style={{ padding: '32px', textAlign: 'center', color: '#64748b' }}>No Balance Sheet data available</div>
                )}
              </div>
              </div>

              {/* Right: Your Minimal Viable Financial Statement Structure */}
              <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                {/* Income Statement Structure */}
                <div style={{ marginBottom: '48px' }}>
                  <div style={{ marginBottom: '20px' }}>
                    <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '8px', paddingBottom: '12px', borderBottom: '3px solid #10b981' }}>Income Statement Fields</h2>
                    {qbRawData?.profitAndLoss?.Header && (() => {
                      const columns = qbRawData.profitAndLoss.Columns?.Column || [];
                      const hasMultipleMonths = columns.length > 2;
                      const lastMonthColumn = hasMultipleMonths && columns.length >= 2 ? columns[columns.length - 2] : null;
                      const monthLabel = lastMonthColumn?.ColTitle || qbRawData.profitAndLoss.Header.EndPeriod;
                      
                      return (
                        <div style={{ fontSize: '13px', marginTop: '8px' }}>
                          <div style={{ color: '#64748b' }}>
                            <strong>Report Period:</strong> {qbRawData.profitAndLoss.Header.StartPeriod || 'N/A'} to {qbRawData.profitAndLoss.Header.EndPeriod || 'N/A'}
                          </div>
                          <div style={{ color: '#10b981', fontWeight: '600', marginTop: '4px', padding: '8px', background: '#f0fdf4', borderRadius: '6px', border: '1px solid #86efac' }}>
                            📅 Displaying: {hasMultipleMonths ? `Monthly data for ${monthLabel}` : `Period total for ${monthLabel}`}
                          </div>
                          {!hasMultipleMonths && (
                            <div style={{ color: '#f59e0b', fontWeight: '500', fontSize: '12px', marginTop: '4px', padding: '6px', background: '#fffbeb', borderRadius: '6px', border: '1px solid #fcd34d' }}>
                              ⚠️ Note: This appears to be cumulative for the entire period, not monthly breakdowns
                            </div>
                          )}
                        </div>
                      );
                    })()}
                  </div>
                  
                  {aiMappings.length > 0 ? (
                    <div style={{ fontSize: '13px' }}>
                      {/* Group mappings by category */}
                      {(() => {
                        // Deduplicate mappings by QB account name (keep first occurrence)
                        const uniqueMappings = aiMappings.filter((m, index, self) =>
                          index === self.findIndex((t) => t.qbAccount === m.qbAccount)
                        );
                        
                        const revenueMappings = uniqueMappings.filter(m => ['Revenue', 'Income'].some(c => m.qbAccountClassification?.includes(c)));
                        const cogsMappings = uniqueMappings.filter(m => ['Cost of Goods Sold', 'COGS'].some(c => m.qbAccountClassification?.includes(c)));
                        const expenseMappings = uniqueMappings.filter(m => m.qbAccountClassification?.includes('Expense'));
                        
                        // Helper to get amount - extract from the appropriate column
                        const getAmount = (qbAccountName: string) => {
                          if (!qbRawData) return 0;
                          const extractRows = (reportData: any) => {
                            const result: any[] = [];
                            if (!reportData || !reportData.Rows || !reportData.Rows.Row) return result;
                            
                            const processRow = (row: any) => {
                              if (row.type === 'Data' && row.ColData) {
                                const name = row.ColData[0]?.value || '';
                                if (name) {
                                  // Try to find a numeric value from the columns
                                  // Start from the end and work backwards to find the first valid number
                                  let value = 0;
                                  for (let i = row.ColData.length - 1; i >= 1; i--) {
                                    const colValue = row.ColData[i]?.value;
                                    if (colValue !== undefined && colValue !== '' && !isNaN(parseFloat(colValue))) {
                                      value = parseFloat(colValue);
                                      break;
                                    }
                                  }
                                  result.push({ name, value });
                                }
                              }
                              if (row.Rows && row.Rows.Row) {
                                const subRows = Array.isArray(row.Rows.Row) ? row.Rows.Row : [row.Rows.Row];
                                subRows.forEach((r: any) => processRow(r));
                              }
                            };
                            const rows = Array.isArray(reportData.Rows.Row) ? reportData.Rows.Row : [reportData.Rows.Row];
                            rows.forEach((r: any) => processRow(r));
                            return result;
                          };
                          const plRows = extractRows(qbRawData.profitAndLoss);
                          const accountRow = plRows.find((row: any) => row.name === qbAccountName);
                          return accountRow ? accountRow.value : 0;
                        };
                        
                        // Calculate totals
                        const totalRevenue = revenueMappings.reduce((sum, m) => sum + getAmount(m.qbAccount), 0);
                        const totalCOGS = cogsMappings.reduce((sum, m) => sum + getAmount(m.qbAccount), 0);
                        const totalExpenses = expenseMappings.reduce((sum, m) => sum + getAmount(m.qbAccount), 0);
                        const grossProfit = totalRevenue - totalCOGS;
                        const netIncome = grossProfit - totalExpenses;
                        
                        return (
                          <>
                            {/* REVENUE SECTION */}
                            {revenueMappings.length > 0 && (
                              <>
                                <div style={{ padding: '8px', background: '#f8fafc', fontWeight: '600', borderBottom: '1px solid #e2e8f0' }}>REVENUE</div>
                                {revenueMappings.map((m, i) => {
                                  const amount = getAmount(m.qbAccount);
                                  return (
                                    <div key={i} style={{ padding: '6px 16px 6px 32px', borderBottom: '1px solid #f1f5f9', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                      <div>
                                        <div style={{ color: '#475569', fontSize: '13px' }}>{m.qbAccount}</div>
                                        <div style={{ color: '#94a3b8', fontSize: '11px' }}>→ {m.targetField}</div>
                                      </div>
                                      <span style={{ color: '#0f172a', fontFamily: 'monospace', fontWeight: '600' }}>
                                        ${amount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                      </span>
                                    </div>
                                  );
                                })}
                              </>
                            )}
                            
                            {/* COGS SECTION */}
                            {cogsMappings.length > 0 && (
                              <>
                                <div style={{ padding: '8px', background: '#f8fafc', fontWeight: '600', borderBottom: '1px solid #e2e8f0', marginTop: '12px' }}>COST OF GOODS SOLD</div>
                                {cogsMappings.map((m, i) => {
                                  const amount = getAmount(m.qbAccount);
                                  return (
                                    <div key={i} style={{ padding: '6px 16px 6px 32px', borderBottom: '1px solid #f1f5f9', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                      <div>
                                        <div style={{ color: '#475569', fontSize: '13px' }}>{m.qbAccount}</div>
                                        <div style={{ color: '#94a3b8', fontSize: '11px' }}>→ {m.targetField}</div>
                                      </div>
                                      <span style={{ color: '#0f172a', fontFamily: 'monospace', fontWeight: '600' }}>
                                        ${amount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                      </span>
                                    </div>
                                  );
                                })}
                                <div style={{ padding: '10px 16px', background: '#fee2e2', borderBottom: '2px solid #ef4444', display: 'flex', justifyContent: 'space-between', fontWeight: '700' }}>
                                  <span style={{ color: '#991b1b' }}>Total COGS</span>
                                  <span style={{ color: '#991b1b', fontFamily: 'monospace' }}>
                                    ${totalCOGS.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                  </span>
                                </div>
                                <div style={{ padding: '10px 16px', background: '#dbeafe', borderBottom: '3px solid #3b82f6', display: 'flex', justifyContent: 'space-between', fontWeight: '700', marginTop: '4px' }}>
                                  <span style={{ color: '#1e40af' }}>GROSS PROFIT</span>
                                  <span style={{ color: '#1e40af', fontFamily: 'monospace' }}>
                                    ${grossProfit.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                  </span>
                                </div>
                              </>
                            )}
                            
                            {/* EXPENSES SECTION */}
                            {expenseMappings.length > 0 && (
                              <>
                                <div style={{ padding: '8px', background: '#f8fafc', fontWeight: '600', borderBottom: '1px solid #e2e8f0', marginTop: '12px' }}>OPERATING EXPENSES</div>
                                {expenseMappings.map((m, i) => {
                                  const amount = getAmount(m.qbAccount);
                                  return (
                                    <div key={i} style={{ padding: '6px 16px 6px 32px', borderBottom: '1px solid #f1f5f9', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                      <div>
                                        <div style={{ color: '#475569', fontSize: '13px' }}>{m.qbAccount}</div>
                                        <div style={{ color: '#94a3b8', fontSize: '11px' }}>→ {m.targetField}</div>
                                      </div>
                                      <span style={{ color: '#0f172a', fontFamily: 'monospace', fontWeight: '600' }}>
                                        ${amount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                      </span>
                                    </div>
                                  );
                                })}
                                <div style={{ padding: '10px 16px', background: '#fef3c7', borderBottom: '2px solid #f59e0b', display: 'flex', justifyContent: 'space-between', fontWeight: '700' }}>
                                  <span style={{ color: '#92400e' }}>Total Operating Expenses</span>
                                  <span style={{ color: '#92400e', fontFamily: 'monospace' }}>
                                    ${totalExpenses.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                  </span>
                                </div>
                                <div style={{ padding: '12px 16px', background: '#dcfce7', borderBottom: '4px solid #10b981', display: 'flex', justifyContent: 'space-between', fontWeight: '700', marginTop: '4px' }}>
                                  <span style={{ color: '#166534', fontSize: '16px' }}>NET INCOME</span>
                                  <span style={{ color: '#166534', fontFamily: 'monospace', fontSize: '16px' }}>
                                    ${netIncome.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                  </span>
                                </div>
                              </>
                            )}
                          </>
                        );
                      })()}
                    </div>
                  ) : (
                    <div style={{ padding: '20px', textAlign: 'center', color: '#94a3b8', fontSize: '14px' }}>
                      No mappings saved yet. Generate and save mappings above to see them here.
                    </div>
                  )}
                </div>

                {/* Balance Sheet Structure */}
                <div>
                  <div style={{ marginBottom: '20px' }}>
                    <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '8px', paddingBottom: '12px', borderBottom: '3px solid #10b981' }}>Balance Sheet Fields</h2>
                    {qbRawData?.balanceSheet?.Header && (
                      <div style={{ fontSize: '13px', marginTop: '8px' }}>
                        <div style={{ color: '#64748b' }}>
                          As of: {qbRawData.balanceSheet.Header.Time || qbRawData.balanceSheet.Header.EndPeriod || 'N/A'}
                        </div>
                        <div style={{ color: '#3b82f6', fontWeight: '500', fontSize: '12px', marginTop: '4px' }}>
                          📊 Balance Sheet shows point-in-time snapshot as of the date above
                        </div>
                      </div>
                    )}
                  </div>
                  
                  {aiMappings.length > 0 ? (
                    <div style={{ fontSize: '13px' }}>
                      {/* Group mappings by category */}
                      {(() => {
                        // Deduplicate mappings by QB account name (keep first occurrence)
                        const uniqueMappings = aiMappings.filter((m, index, self) =>
                          index === self.findIndex((t) => t.qbAccount === m.qbAccount)
                        );
                        
                        const assetMappings = uniqueMappings.filter(m => m.qbAccountClassification?.includes('Asset'));
                        const currentAssetMappings = assetMappings.filter(m => m.qbAccountClassification?.includes('Current'));
                        const fixedAssetMappings = assetMappings.filter(m => m.qbAccountClassification?.includes('Fixed') || m.qbAccountClassification?.includes('Property'));
                        const otherAssetMappings = assetMappings.filter(m => !m.qbAccountClassification?.includes('Current') && !m.qbAccountClassification?.includes('Fixed') && !m.qbAccountClassification?.includes('Property'));
                        
                        const liabilityMappings = uniqueMappings.filter(m => m.qbAccountClassification?.includes('Liability'));
                        const currentLiabMappings = liabilityMappings.filter(m => m.qbAccountClassification?.includes('Current'));
                        const longTermLiabMappings = liabilityMappings.filter(m => m.qbAccountClassification?.includes('Long') || !m.qbAccountClassification?.includes('Current'));
                        
                        const equityMappings = uniqueMappings.filter(m => m.qbAccountClassification?.includes('Equity'));
                        
                        // Helper to get amount from balance sheet - extract from the appropriate column
                        const getBSAmount = (qbAccountName: string) => {
                          if (!qbRawData) return 0;
                          const extractRows = (reportData: any) => {
                            const result: any[] = [];
                            if (!reportData || !reportData.Rows || !reportData.Rows.Row) return result;
                            
                            const processRow = (row: any) => {
                              if (row.type === 'Data' && row.ColData) {
                                const name = row.ColData[0]?.value || '';
                                if (name) {
                                  // Try to find a numeric value from the columns
                                  // Start from the end and work backwards to find the first valid number
                                  let value = 0;
                                  for (let i = row.ColData.length - 1; i >= 1; i--) {
                                    const colValue = row.ColData[i]?.value;
                                    if (colValue !== undefined && colValue !== '' && !isNaN(parseFloat(colValue))) {
                                      value = parseFloat(colValue);
                                      break;
                                    }
                                  }
                                  result.push({ name, value });
                                }
                              }
                              if (row.Rows && row.Rows.Row) {
                                const subRows = Array.isArray(row.Rows.Row) ? row.Rows.Row : [row.Rows.Row];
                                subRows.forEach((r: any) => processRow(r));
                              }
                            };
                            const rows = Array.isArray(reportData.Rows.Row) ? reportData.Rows.Row : [reportData.Rows.Row];
                            rows.forEach((r: any) => processRow(r));
                            return result;
                          };
                          const bsRows = extractRows(qbRawData.balanceSheet);
                          const accountRow = bsRows.find((row: any) => row.name === qbAccountName);
                          return accountRow ? accountRow.value : 0;
                        };
                        
                        // Calculate totals
                        const totalCurrentAssets = currentAssetMappings.reduce((sum, m) => sum + getBSAmount(m.qbAccount), 0);
                        const totalFixedAssets = fixedAssetMappings.reduce((sum, m) => sum + getBSAmount(m.qbAccount), 0);
                        const totalOtherAssets = otherAssetMappings.reduce((sum, m) => sum + getBSAmount(m.qbAccount), 0);
                        const totalAssets = totalCurrentAssets + totalFixedAssets + totalOtherAssets;
                        
                        const totalCurrentLiab = currentLiabMappings.reduce((sum, m) => sum + getBSAmount(m.qbAccount), 0);
                        const totalLongTermLiab = longTermLiabMappings.reduce((sum, m) => sum + getBSAmount(m.qbAccount), 0);
                        const totalLiabilities = totalCurrentLiab + totalLongTermLiab;
                        
                        const totalEquity = equityMappings.reduce((sum, m) => sum + getBSAmount(m.qbAccount), 0);
                        const totalLiabAndEquity = totalLiabilities + totalEquity;
                        
                        return (
                          <>
                            {/* ASSETS SECTION */}
                            <div style={{ padding: '8px', background: '#1e40af', fontWeight: '700', borderBottom: '2px solid #1e3a8a', color: 'white' }}>ASSETS</div>
                            
                            {currentAssetMappings.length > 0 && (
                              <>
                                <div style={{ padding: '6px 16px', background: '#eff6ff', fontWeight: '600', borderBottom: '1px solid #dbeafe', color: '#1e40af' }}>Current Assets</div>
                                {currentAssetMappings.map((m, i) => {
                                  const amount = getBSAmount(m.qbAccount);
                                  return (
                                    <div key={i} style={{ padding: '6px 16px 6px 32px', borderBottom: '1px solid #f1f5f9', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                      <div>
                                        <div style={{ color: '#475569', fontSize: '13px' }}>{m.qbAccount}</div>
                                        <div style={{ color: '#94a3b8', fontSize: '11px' }}>→ {m.targetField}</div>
                                      </div>
                                      <span style={{ color: '#0f172a', fontFamily: 'monospace', fontWeight: '600' }}>
                                        ${amount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                      </span>
                                    </div>
                                  );
                                })}
                              </>
                            )}
                            
                            {fixedAssetMappings.length > 0 && (
                              <>
                                <div style={{ padding: '6px 16px', background: '#eff6ff', fontWeight: '600', borderBottom: '1px solid #dbeafe', color: '#1e40af', marginTop: '8px' }}>Fixed Assets</div>
                                {fixedAssetMappings.map((m, i) => {
                                  const amount = getBSAmount(m.qbAccount);
                                  return (
                                    <div key={i} style={{ padding: '6px 16px 6px 32px', borderBottom: '1px solid #f1f5f9', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                      <div>
                                        <div style={{ color: '#475569', fontSize: '13px' }}>{m.qbAccount}</div>
                                        <div style={{ color: '#94a3b8', fontSize: '11px' }}>→ {m.targetField}</div>
                                      </div>
                                      <span style={{ color: '#0f172a', fontFamily: 'monospace', fontWeight: '600' }}>
                                        ${amount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                      </span>
                                    </div>
                                  );
                                })}
                              </>
                            )}
                            
                            {otherAssetMappings.length > 0 && (
                              <>
                                <div style={{ padding: '6px 16px', background: '#eff6ff', fontWeight: '600', borderBottom: '1px solid #dbeafe', color: '#1e40af', marginTop: '8px' }}>Other Assets</div>
                                {otherAssetMappings.map((m, i) => {
                                  const amount = getBSAmount(m.qbAccount);
                                  return (
                                    <div key={i} style={{ padding: '6px 16px 6px 32px', borderBottom: '1px solid #f1f5f9', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                      <div>
                                        <div style={{ color: '#475569', fontSize: '13px' }}>{m.qbAccount}</div>
                                        <div style={{ color: '#94a3b8', fontSize: '11px' }}>→ {m.targetField}</div>
                                      </div>
                                      <span style={{ color: '#0f172a', fontFamily: 'monospace', fontWeight: '600' }}>
                                        ${amount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                      </span>
                                    </div>
                                  );
                                })}
                              </>
                            )}
                            
                            {/* LIABILITIES SECTION */}
                            <div style={{ padding: '8px', background: '#991b1b', fontWeight: '700', borderBottom: '2px solid #7f1d1d', color: 'white', marginTop: '16px' }}>LIABILITIES</div>
                            
                            {currentLiabMappings.length > 0 && (
                              <>
                                <div style={{ padding: '6px 16px', background: '#fef2f2', fontWeight: '600', borderBottom: '1px solid #fee2e2', color: '#991b1b' }}>Current Liabilities</div>
                                {currentLiabMappings.map((m, i) => {
                                  const amount = getBSAmount(m.qbAccount);
                                  return (
                                    <div key={i} style={{ padding: '6px 16px 6px 32px', borderBottom: '1px solid #f1f5f9', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                      <div>
                                        <div style={{ color: '#475569', fontSize: '13px' }}>{m.qbAccount}</div>
                                        <div style={{ color: '#94a3b8', fontSize: '11px' }}>→ {m.targetField}</div>
                                      </div>
                                      <span style={{ color: '#0f172a', fontFamily: 'monospace', fontWeight: '600' }}>
                                        ${amount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                      </span>
                                    </div>
                                  );
                                })}
                              </>
                            )}
                            
                            {longTermLiabMappings.length > 0 && (
                              <>
                                <div style={{ padding: '6px 16px', background: '#fef2f2', fontWeight: '600', borderBottom: '1px solid #fee2e2', color: '#991b1b', marginTop: '8px' }}>Long-Term Liabilities</div>
                                {longTermLiabMappings.map((m, i) => {
                                  const amount = getBSAmount(m.qbAccount);
                                  return (
                                    <div key={i} style={{ padding: '6px 16px 6px 32px', borderBottom: '1px solid #f1f5f9', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                      <div>
                                        <div style={{ color: '#475569', fontSize: '13px' }}>{m.qbAccount}</div>
                                        <div style={{ color: '#94a3b8', fontSize: '11px' }}>→ {m.targetField}</div>
                                      </div>
                                      <span style={{ color: '#0f172a', fontFamily: 'monospace', fontWeight: '600' }}>
                                        ${amount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                      </span>
                                    </div>
                                  );
                                })}
                              </>
                            )}
                            
                            {/* EQUITY SECTION */}
                            {equityMappings.length > 0 && (
                              <>
                                <div style={{ padding: '8px', background: '#166534', fontWeight: '700', borderBottom: '2px solid #14532d', color: 'white', marginTop: '16px' }}>EQUITY</div>
                                {equityMappings.map((m, i) => {
                                  const amount = getBSAmount(m.qbAccount);
                                  return (
                                    <div key={i} style={{ padding: '6px 16px 6px 32px', borderBottom: '1px solid #f1f5f9', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                      <div>
                                        <div style={{ color: '#475569', fontSize: '13px' }}>{m.qbAccount}</div>
                                        <div style={{ color: '#94a3b8', fontSize: '11px' }}>→ {m.targetField}</div>
                                      </div>
                                      <span style={{ color: '#0f172a', fontFamily: 'monospace', fontWeight: '600' }}>
                                        ${amount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                                      </span>
                                    </div>
                                  );
                                })}
                              </>
                            )}
                            
                            {/* TOTAL LIABILITIES & EQUITY */}
                            <div style={{ padding: '12px 16px', background: '#8b5cf6', borderBottom: '4px solid #6b21a8', display: 'flex', justifyContent: 'space-between', fontWeight: '700', marginTop: '8px' }}>
                              <span style={{ color: 'white', fontSize: '16px' }}>TOTAL LIABILITIES & EQUITY</span>
                              <span style={{ color: 'white', fontFamily: 'monospace', fontSize: '16px' }}>
                                ${totalLiabAndEquity.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                              </span>
                            </div>
                            
                            {/* Balance Check */}
                            {Math.abs(totalAssets - totalLiabAndEquity) > 0.01 && (
                              <div style={{ padding: '10px 16px', background: '#fef2f2', border: '2px solid #ef4444', marginTop: '8px', borderRadius: '6px' }}>
                                <span style={{ color: '#991b1b', fontWeight: '600' }}>⚠️ Balance Check: Assets and Liabilities+Equity do not match!</span>
                              </div>
                            )}
                          </>
                        );
                      })()}
                    </div>
                  ) : (
                    <div style={{ padding: '20px', textAlign: 'center', color: '#94a3b8', fontSize: '14px' }}>
                      No mappings saved yet. Generate and save mappings above to see them here.
                    </div>
                  )}
                </div>
              </div>
            </div>
            </div>
            {/* End hidden section */}
            </>
            )}

            {/* Line of Business Reporting Tab */}
            {financialStatementsTab === 'line-of-business' && (
              <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                <div style={{ marginBottom: '24px' }}>
                  <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '16px' }}>Line of Business Reporting</h2>
                  <p style={{ fontSize: '14px', color: '#64748b', marginBottom: '24px' }}>
                    View financial performance by line of business. Select a specific business line or view all lines side by side.
                  </p>
                  
                  {/* Line of Business Selector */}
                  <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '16px', marginBottom: '24px' }}>
                    <div>
                      <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>
                        Line of Business
                      </label>
                      <select 
                        value={selectedLineOfBusiness}
                        onChange={(e) => setSelectedLineOfBusiness(e.target.value)}
                        style={{ 
                          width: '100%', 
                          padding: '10px 12px', 
                          border: '1px solid #cbd5e1', 
                          borderRadius: '6px', 
                          fontSize: '14px',
                          color: '#1e293b',
                          background: 'white',
                          cursor: 'pointer'
                        }}
                      >
                        <option value="all">All Lines of Business (Side by Side)</option>
                        {qbRawData?.profitAndLoss?.Columns?.Column && Array.isArray(qbRawData.profitAndLoss.Columns.Column) 
                          ? qbRawData.profitAndLoss.Columns.Column
                              .filter((col: any) => col.ColType !== 'Total')
                              .map((col: any, idx: number) => (
                                <option key={idx} value={col.ColTitle || `Column ${idx + 1}`}>
                                  {col.ColTitle || `Column ${idx + 1}`}
                                </option>
                              ))
                          : null
                        }
                      </select>
                    </div>

                    <div>
                      <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>
                        Period
                      </label>
                      <select 
                        value={statementPeriod}
                        onChange={(e) => setStatementPeriod(e.target.value as any)}
                        style={{ 
                          width: '100%', 
                          padding: '10px 12px', 
                          border: '1px solid #cbd5e1', 
                          borderRadius: '6px', 
                          fontSize: '14px',
                          color: '#1e293b',
                          background: 'white',
                          cursor: 'pointer'
                        }}
                      >
                        <option value="current-month">Current Month</option>
                        <option value="current-quarter">Current Quarter</option>
                        <option value="last-12-months">Last 12 months</option>
                        <option value="ytd">YTD</option>
                        <option value="last-year">Last Year</option>
                        <option value="last-3-years">Last 3 Years</option>
                      </select>
                    </div>

                    <div>
                      <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>
                        Display As
                      </label>
                      <select 
                        value={statementDisplay}
                        onChange={(e) => setStatementDisplay(e.target.value as 'monthly' | 'quarterly' | 'annual')}
                        style={{ 
                          width: '100%', 
                          padding: '10px 12px', 
                          border: '1px solid #cbd5e1', 
                          borderRadius: '6px', 
                          fontSize: '14px',
                          color: '#1e293b',
                          background: 'white',
                          cursor: 'pointer'
                        }}
                      >
                        <option value="monthly">Monthly</option>
                        <option value="quarterly">Quarterly</option>
                        <option value="annual">Annual</option>
                      </select>
                    </div>
                  </div>
                </div>

                {/* Coming Soon Message */}
                <div style={{ background: '#f8fafc', border: '2px dashed #cbd5e1', borderRadius: '8px', padding: '48px 24px', textAlign: 'center' }}>
                  <div style={{ fontSize: '48px', marginBottom: '16px' }}>📊</div>
                  <div style={{ fontSize: '18px', fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>
                    Line of Business Reporting
                  </div>
                  <p style={{ fontSize: '14px', color: '#64748b', maxWidth: '500px', margin: '0 auto' }}>
                    This feature will display Income Statement data broken down by line of business from your QuickBooks class tracking. 
                    You'll be able to compare performance across different business lines side by side for the selected period.
                  </p>
                </div>
              </div>
            )}
          </div>
        );
      })()}

      {/* Financial Statements View - Works with CSV or QB data via monthly array */}
      {currentView === 'financial-statements' && selectedCompanyId && !qbRawData && monthly.length > 0 && (
        <div style={{ maxWidth: '1800px', margin: '0 auto', padding: '32px' }}>
          <style>{`
            @media print {
              @page {
                size: letter;
                margin: 0.1in 0.15in 0.1in 0.15in;
              }
              
              /* Hide navigation and UI elements */
              .no-print,
              header,
              nav,
              aside,
              [role="navigation"],
              button {
                display: none !important;
              }
              
              /* Remove background colors and shadows */
              * {
                box-shadow: none !important;
              }
              
              /* Force very tight column spacing */
              [style*="display: grid"] {
                gap: 2px !important;
                column-gap: 2px !important;
              }
              
              /* Reduce padding to bring content closer */
              [style*="display: grid"] > * {
                padding-left: 2px !important;
                padding-right: 2px !important;
              }
              
              /* Reduce font sizes slightly for better fit */
              div[style*="fontSize: '14px'"],
              div[style*="fontSize: '13px'"] {
                font-size: 11px !important;
              }
            }
          `}</style>
          
          <div className="no-print" style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px' }}>
            <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', margin: 0 }}>Financial Statements</h1>
            {companyName && <div style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b' }}>{companyName}</div>}
          </div>
          <p className="no-print" style={{ fontSize: '14px', color: '#64748b', marginBottom: '24px' }}>
            Based on imported financial data
          </p>

          {/* Tab Navigation */}
          <div className="no-print" style={{ display: 'flex', gap: '8px', marginBottom: '24px', borderBottom: '2px solid #e2e8f0' }}>
            <button
              onClick={() => setFinancialStatementsTab('aggregated')}
              style={{
                padding: '12px 24px',
                background: financialStatementsTab === 'aggregated' ? '#667eea' : 'transparent',
                color: financialStatementsTab === 'aggregated' ? 'white' : '#64748b',
                border: 'none',
                borderBottom: financialStatementsTab === 'aggregated' ? '3px solid #667eea' : '3px solid transparent',
                fontSize: '16px',
                fontWeight: '600',
                cursor: 'pointer',
                borderRadius: '8px 8px 0 0',
                transition: 'all 0.2s'
              }}
            >
              Aggregated Financials
            </button>
            <button
              onClick={() => setFinancialStatementsTab('line-of-business')}
              style={{
                padding: '12px 24px',
                background: financialStatementsTab === 'line-of-business' ? '#667eea' : 'transparent',
                color: financialStatementsTab === 'line-of-business' ? 'white' : '#64748b',
                border: 'none',
                borderBottom: financialStatementsTab === 'line-of-business' ? '3px solid #667eea' : '3px solid transparent',
                fontSize: '16px',
                fontWeight: '600',
                cursor: 'pointer',
                borderRadius: '8px 8px 0 0',
                transition: 'all 0.2s'
              }}
            >
              Line of Business Reporting
            </button>
          </div>

          {/* Aggregated Financials Tab */}
          {financialStatementsTab === 'aggregated' && (
          <>
          {/* Statement Controls */}
          <div className="no-print" style={{ marginBottom: '32px', padding: '24px', background: 'white', borderRadius: '12px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr 1fr', gap: '16px' }}>
              {/* Type of Statement */}
              <div>
                <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>
                  Type of Statement
                </label>
                <select 
                  value={statementType}
                  onChange={(e) => setStatementType(e.target.value as any)}
                  style={{ 
                    width: '100%', 
                    padding: '10px 12px', 
                    border: '1px solid #cbd5e1', 
                    borderRadius: '6px', 
                    fontSize: '14px',
                    color: '#1e293b',
                    background: 'white',
                    cursor: 'pointer'
                  }}
                >
                  <option value="income-statement">Income Statement</option>
                  <option value="income-statement-percent">Income Stmt as % of Revenue</option>
                  <option value="balance-sheet">Balance Sheet</option>
                </select>
              </div>

              {/* Period */}
              <div>
                <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>
                  Period
                </label>
                <select 
                  value={statementPeriod}
                  onChange={(e) => setStatementPeriod(e.target.value as any)}
                  style={{ 
                    width: '100%', 
                    padding: '10px 12px', 
                    border: '1px solid #cbd5e1', 
                    borderRadius: '6px', 
                    fontSize: '14px',
                    color: '#1e293b',
                    background: 'white',
                    cursor: 'pointer'
                  }}
                >
                  <option value="current-month">Current Month</option>
                  <option value="current-quarter">Current Quarter</option>
                  <option value="last-12-months">Last 12 months</option>
                  <option value="ytd">YTD</option>
                  <option value="last-year">Last Year</option>
                  <option value="last-3-years">Last 3 Years</option>
                </select>
              </div>

              {/* Display As */}
              <div>
                <label style={{ display: 'block', fontSize: '13px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>
                  Display As
                </label>
                <select 
                  value={statementDisplay}
                  onChange={(e) => setStatementDisplay(e.target.value as 'monthly' | 'quarterly' | 'annual')}
                  style={{ 
                    width: '100%', 
                    padding: '10px 12px', 
                    border: '1px solid #cbd5e1', 
                    borderRadius: '6px', 
                    fontSize: '14px',
                    color: '#1e293b',
                    background: 'white',
                    cursor: 'pointer'
                  }}
                >
                  <option value="monthly">Monthly</option>
                  <option value="quarterly">Quarterly</option>
                  <option value="annual">Annual</option>
                </select>
              </div>
              
              {/* Print Button */}
              <div style={{ display: 'flex', alignItems: 'flex-end' }}>
                <button
                  onClick={() => window.print()}
                  style={{
                    width: '100%',
                    padding: '10px 12px',
                    background: '#10b981',
                    color: 'white',
                    border: 'none',
                    borderRadius: '6px',
                    fontSize: '14px',
                    fontWeight: '600',
                    cursor: 'pointer',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    gap: '8px'
                  }}
                >
                  🖨️ Print
                </button>
              </div>
            </div>
          </div>

          {/* Statement Content Area */}
          {(() => {
            console.log('📊 Financial Statement Render Check (CSV/Monthly Data):', {
              statementType,
              statementPeriod,
              monthlyLength: monthly?.length || 0,
              monthlyFirst: monthly?.[0],
              condition: statementType === 'income-statement' && statementPeriod === 'current-month'
            });
            
            if (statementType === 'income-statement' && statementPeriod === 'current-month') {
              const currentMonth = monthly[monthly.length - 1];
              const monthDate = new Date(currentMonth.date || currentMonth.month);
              const monthName = monthDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
              
              // Revenue
              const revenue = currentMonth.revenue || 0;
              
              // Cost of Goods Sold
              const cogsPayroll = currentMonth.cogsPayroll || 0;
              const cogsOwnerPay = currentMonth.cogsOwnerPay || 0;
              const cogsContractors = currentMonth.cogsContractors || 0;
              const cogsMaterials = currentMonth.cogsMaterials || 0;
              const cogsCommissions = currentMonth.cogsCommissions || 0;
              const cogsOther = currentMonth.cogsOther || 0;
              const cogs = cogsPayroll + cogsOwnerPay + cogsContractors + cogsMaterials + cogsCommissions + cogsOther;
              
              const grossProfit = revenue - cogs;
              const grossMargin = revenue > 0 ? (grossProfit / revenue) * 100 : 0;
              
              // Operating Expenses
              const opexPayroll = currentMonth.opexPayroll || 0;
              const ownersBasePay = currentMonth.ownersBasePay || 0;
              const ownersRetirement = currentMonth.ownersRetirement || 0;
              const professionalServices = currentMonth.professionalServices || 0;
              const rentLease = currentMonth.rentLease || 0;
              const utilities = currentMonth.utilities || 0;
              const equipment = currentMonth.equipment || 0;
              const travel = currentMonth.travel || 0;
              const insurance = currentMonth.insurance || 0;
              const opexSalesMarketing = currentMonth.opexSalesMarketing || 0;
              const contractorsDistribution = currentMonth.contractorsDistribution || 0;
              const depreciationExpense = currentMonth.depreciationExpense || 0;
              const opexOther = currentMonth.opexOther || 0;
              
              const totalOpex = opexPayroll + ownersBasePay + ownersRetirement + professionalServices + 
                               rentLease + utilities + equipment + travel + insurance + 
                               opexSalesMarketing + contractorsDistribution + depreciationExpense + opexOther;
              
              const operatingIncome = grossProfit - totalOpex;
              const operatingMargin = revenue > 0 ? (operatingIncome / revenue) * 100 : 0;
              
              // Other Income/Expense
              const interestExpense = currentMonth.interestExpense || 0;
              const nonOperatingIncome = currentMonth.nonOperatingIncome || 0;
              const extraordinaryItems = currentMonth.extraordinaryItems || 0;
              
              const netIncome = operatingIncome - interestExpense + nonOperatingIncome + extraordinaryItems;
              const netMargin = revenue > 0 ? (netIncome / revenue) * 100 : 0;
              
              return (
                <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <div style={{ marginBottom: '32px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                    <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Income Statement</h2>
                    <div style={{ fontSize: '14px', color: '#64748b' }}>For the Month Ended {monthName}</div>
                  </div>

                  {/* Revenue Section */}
                  <div style={{ marginBottom: '24px' }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0', borderBottom: '1px solid #e2e8f0' }}>
                      <span style={{ fontWeight: '600', color: '#1e293b' }}>Revenue</span>
                      <span style={{ fontWeight: '600', color: '#1e293b' }}>${revenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                    </div>
                  </div>

                  {/* COGS Section */}
                  <div style={{ marginBottom: '24px' }}>
                    <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>Cost of Goods Sold</div>
                    {cogsPayroll > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>COGS - Payroll</span>
                        <span style={{ color: '#475569' }}>${cogsPayroll.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {cogsOwnerPay > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>COGS - Owner Pay</span>
                        <span style={{ color: '#475569' }}>${cogsOwnerPay.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {cogsContractors > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>COGS - Contractors</span>
                        <span style={{ color: '#475569' }}>${cogsContractors.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {cogsMaterials > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>COGS - Materials</span>
                        <span style={{ color: '#475569' }}>${cogsMaterials.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {cogsCommissions > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>COGS - Commissions</span>
                        <span style={{ color: '#475569' }}>${cogsCommissions.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {cogsOther > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>COGS - Other</span>
                        <span style={{ color: '#475569' }}>${cogsOther.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0', borderTop: '1px solid #e2e8f0', marginTop: '4px' }}>
                      <span style={{ fontWeight: '600', color: '#1e293b' }}>Total COGS</span>
                      <span style={{ fontWeight: '600', color: '#1e293b' }}>${cogs.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                    </div>
                  </div>

                  {/* Gross Profit */}
                  <div style={{ marginBottom: '24px', background: '#dbeafe', padding: '12px', borderRadius: '8px' }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                      <span style={{ fontWeight: '700', color: '#1e40af' }}>Gross Profit</span>
                      <span style={{ fontWeight: '700', color: '#1e40af' }}>${grossProfit.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                    </div>
                    <div style={{ fontSize: '13px', color: '#1e40af', textAlign: 'right' }}>
                      {grossMargin.toFixed(1)}% margin
                    </div>
                  </div>

                  {/* Operating Expenses */}
                  <div style={{ marginBottom: '24px' }}>
                    <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>Operating Expenses</div>
                    {opexPayroll > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>Payroll</span>
                        <span style={{ color: '#475569' }}>${opexPayroll.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {ownersBasePay > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>Owner's Base Pay</span>
                        <span style={{ color: '#475569' }}>${ownersBasePay.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {ownersRetirement > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>Owner's Retirement</span>
                        <span style={{ color: '#475569' }}>${ownersRetirement.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {professionalServices > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>Professional Services</span>
                        <span style={{ color: '#475569' }}>${professionalServices.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {rentLease > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>Rent/Lease</span>
                        <span style={{ color: '#475569' }}>${rentLease.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {utilities > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>Utilities</span>
                        <span style={{ color: '#475569' }}>${utilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {equipment > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>Equipment</span>
                        <span style={{ color: '#475569' }}>${equipment.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {travel > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>Travel</span>
                        <span style={{ color: '#475569' }}>${travel.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {insurance > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>Insurance</span>
                        <span style={{ color: '#475569' }}>${insurance.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {opexSalesMarketing > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>Sales & Marketing</span>
                        <span style={{ color: '#475569' }}>${opexSalesMarketing.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {contractorsDistribution > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>Contractors Distribution</span>
                        <span style={{ color: '#475569' }}>${contractorsDistribution.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {depreciationExpense > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>Depreciation & Amortization</span>
                        <span style={{ color: '#475569' }}>${depreciationExpense.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {opexOther > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>Other Operating Expenses</span>
                        <span style={{ color: '#475569' }}>${opexOther.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0', borderTop: '1px solid #e2e8f0', marginTop: '4px' }}>
                      <span style={{ fontWeight: '600', color: '#1e293b' }}>Total Operating Expenses</span>
                      <span style={{ fontWeight: '600', color: '#1e293b' }}>${totalOpex.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                    </div>
                  </div>

                  {/* Operating Income */}
                  <div style={{ marginBottom: '24px', background: '#f0fdf4', padding: '12px', borderRadius: '8px' }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                      <span style={{ fontWeight: '700', color: '#166534' }}>Operating Income</span>
                      <span style={{ fontWeight: '700', color: '#166534' }}>${operatingIncome.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                    </div>
                    <div style={{ fontSize: '13px', color: '#166534', textAlign: 'right' }}>
                      {operatingMargin.toFixed(1)}% margin
                    </div>
                  </div>

                  {/* Other Income/Expense */}
                  {(interestExpense > 0 || nonOperatingIncome > 0 || extraordinaryItems !== 0) && (
                    <div style={{ marginBottom: '24px' }}>
                      <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>Other Income/(Expense)</div>
                      {nonOperatingIncome > 0 && (
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                          <span style={{ color: '#475569' }}>Non-Operating Income</span>
                          <span style={{ color: '#10b981' }}>${nonOperatingIncome.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      )}
                      {interestExpense > 0 && (
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                          <span style={{ color: '#475569' }}>Interest Expense</span>
                          <span style={{ color: '#ef4444' }}>($  {interestExpense.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })})</span>
                        </div>
                      )}
                      {extraordinaryItems !== 0 && (
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                          <span style={{ color: '#475569' }}>Extraordinary Items</span>
                          <span style={{ color: extraordinaryItems >= 0 ? '#10b981' : '#ef4444' }}>
                            {extraordinaryItems >= 0 ? '$' : '($'}{Math.abs(extraordinaryItems).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}{extraordinaryItems < 0 ? ')' : ''}
                          </span>
                        </div>
                      )}
                    </div>
                  )}

                  {/* Net Income */}
                  <div style={{ background: netIncome >= 0 ? '#dcfce7' : '#fee2e2', padding: '16px', borderRadius: '8px', marginTop: '32px' }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                      <span style={{ fontWeight: '700', fontSize: '18px', color: netIncome >= 0 ? '#166534' : '#991b1b' }}>Net Income</span>
                      <span style={{ fontWeight: '700', fontSize: '18px', color: netIncome >= 0 ? '#166534' : '#991b1b' }}>
                        ${netIncome.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                      </span>
                    </div>
                    <div style={{ fontSize: '14px', color: netIncome >= 0 ? '#166534' : '#991b1b', textAlign: 'right' }}>
                      {netMargin.toFixed(1)}% net margin
                    </div>
                  </div>
                </div>
              );
            } else if (statementType === 'income-statement-percent' && statementPeriod === 'current-month') {
              // Copy the entire common size logic from QB version
              const currentMonth = monthly[monthly.length - 1];
              const monthDate = new Date(currentMonth.date || currentMonth.month);
              const monthName = monthDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
              
              // Revenue
              const revenue = currentMonth.revenue || 0;
              
              // Cost of Goods Sold
              const cogsPayroll = currentMonth.cogsPayroll || 0;
              const cogsOwnerPay = currentMonth.cogsOwnerPay || 0;
              const cogsContractors = currentMonth.cogsContractors || 0;
              const cogsMaterials = currentMonth.cogsMaterials || 0;
              const cogsCommissions = currentMonth.cogsCommissions || 0;
              const cogsOther = currentMonth.cogsOther || 0;
              const cogs = cogsPayroll + cogsOwnerPay + cogsContractors + cogsMaterials + cogsCommissions + cogsOther;
              
              const grossProfit = revenue - cogs;
              const grossMargin = revenue > 0 ? (grossProfit / revenue) * 100 : 0;
              
              // Operating Expenses
              const opexPayroll = currentMonth.opexPayroll || 0;
              const ownersBasePay = currentMonth.ownersBasePay || 0;
              const ownersRetirement = currentMonth.ownersRetirement || 0;
              const professionalServices = currentMonth.professionalServices || 0;
              const rentLease = currentMonth.rentLease || 0;
              const utilities = currentMonth.utilities || 0;
              const equipment = currentMonth.equipment || 0;
              const travel = currentMonth.travel || 0;
              const insurance = currentMonth.insurance || 0;
              const opexSalesMarketing = currentMonth.opexSalesMarketing || 0;
              const contractorsDistribution = currentMonth.contractorsDistribution || 0;
              const depreciationExpense = currentMonth.depreciationExpense || 0;
              const opexOther = currentMonth.opexOther || 0;
              
              const totalOpex = opexPayroll + ownersBasePay + ownersRetirement + professionalServices + 
                               rentLease + utilities + equipment + travel + insurance + 
                               opexSalesMarketing + contractorsDistribution + depreciationExpense + opexOther;
              
              const operatingIncome = grossProfit - totalOpex;
              const operatingMargin = revenue > 0 ? (operatingIncome / revenue) * 100 : 0;
              
              // Other Income/Expense
              const interestExpense = currentMonth.interestExpense || 0;
              const nonOperatingIncome = currentMonth.nonOperatingIncome || 0;
              const extraordinaryItems = currentMonth.extraordinaryItems || 0;
              
              const netIncome = operatingIncome - interestExpense + nonOperatingIncome + extraordinaryItems;
              const netMargin = revenue > 0 ? (netIncome / revenue) * 100 : 0;
              
              // Helper function to calculate percentage
              const pct = (amount: number) => revenue > 0 ? (amount / revenue) * 100 : 0;
              
              return (
                <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <div style={{ marginBottom: '32px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                    <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Income Statement - Common Size Analysis</h2>
                    <div style={{ fontSize: '14px', color: '#64748b' }}>For the Month Ended {monthName} • All items shown as % of Revenue</div>
                  </div>

                  {/* Column Headers */}
                  <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '8px 0', borderBottom: '2px solid #cbd5e1', marginBottom: '12px', fontWeight: '600', fontSize: '13px', color: '#475569' }}>
                    <div>Line Item</div>
                    <div style={{ textAlign: 'right' }}>Amount</div>
                    <div style={{ textAlign: 'right' }}>% of Revenue</div>
                  </div>

                  {/* Revenue Section */}
                  <div style={{ marginBottom: '24px' }}>
                    <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '8px 0', borderBottom: '1px solid #e2e8f0', background: '#f8fafc' }}>
                      <span style={{ fontWeight: '600', color: '#1e293b' }}>Revenue</span>
                      <span style={{ fontWeight: '600', color: '#1e293b', textAlign: 'right' }}>${revenue.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                      <span style={{ fontWeight: '600', color: '#1e293b', textAlign: 'right' }}>100.0%</span>
                    </div>
                  </div>

                  {/* COGS Section */}
                  <div style={{ marginBottom: '24px' }}>
                    <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px', fontSize: '15px' }}>Cost of Goods Sold</div>
                    {cogsPayroll > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>COGS - Payroll</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${cogsPayroll.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(cogsPayroll).toFixed(1)}%</span>
                      </div>
                    )}
                    {cogsOwnerPay > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>COGS - Owner Pay</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${cogsOwnerPay.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(cogsOwnerPay).toFixed(1)}%</span>
                      </div>
                    )}
                    {cogsContractors > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>COGS - Contractors</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${cogsContractors.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(cogsContractors).toFixed(1)}%</span>
                      </div>
                    )}
                    {cogsMaterials > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>COGS - Materials</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${cogsMaterials.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(cogsMaterials).toFixed(1)}%</span>
                      </div>
                    )}
                    {cogsCommissions > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>COGS - Commissions</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${cogsCommissions.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(cogsCommissions).toFixed(1)}%</span>
                      </div>
                    )}
                    {cogsOther > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>COGS - Other</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${cogsOther.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(cogsOther).toFixed(1)}%</span>
                      </div>
                    )}
                    <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '8px 0', borderTop: '1px solid #e2e8f0', marginTop: '4px' }}>
                      <span style={{ fontWeight: '600', color: '#1e293b', paddingLeft: '20px' }}>Total COGS</span>
                      <span style={{ fontWeight: '600', color: '#1e293b', textAlign: 'right' }}>${cogs.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                      <span style={{ fontWeight: '600', color: '#1e293b', textAlign: 'right' }}>{pct(cogs).toFixed(1)}%</span>
                    </div>
                  </div>

                  {/* Gross Profit */}
                  <div style={{ marginBottom: '24px', background: '#dbeafe', padding: '12px', borderRadius: '8px' }}>
                    <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr' }}>
                      <span style={{ fontWeight: '700', color: '#1e40af' }}>Gross Profit</span>
                      <span style={{ fontWeight: '700', color: '#1e40af', textAlign: 'right' }}>${grossProfit.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                      <span style={{ fontWeight: '700', color: '#1e40af', textAlign: 'right' }}>{grossMargin.toFixed(1)}%</span>
                    </div>
                  </div>

                  {/* Operating Expenses */}
                  <div style={{ marginBottom: '24px' }}>
                    <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px', fontSize: '15px' }}>Operating Expenses</div>
                    {opexPayroll > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>Payroll</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${opexPayroll.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(opexPayroll).toFixed(1)}%</span>
                      </div>
                    )}
                    {ownersBasePay > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>Owner's Base Pay</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${ownersBasePay.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(ownersBasePay).toFixed(1)}%</span>
                      </div>
                    )}
                    {ownersRetirement > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>Owner's Retirement</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${ownersRetirement.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(ownersRetirement).toFixed(1)}%</span>
                      </div>
                    )}
                    {professionalServices > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>Professional Services</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${professionalServices.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(professionalServices).toFixed(1)}%</span>
                      </div>
                    )}
                    {rentLease > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>Rent/Lease</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${rentLease.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(rentLease).toFixed(1)}%</span>
                      </div>
                    )}
                    {utilities > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>Utilities</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${utilities.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(utilities).toFixed(1)}%</span>
                      </div>
                    )}
                    {equipment > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>Equipment</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${equipment.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(equipment).toFixed(1)}%</span>
                      </div>
                    )}
                    {travel > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>Travel</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${travel.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(travel).toFixed(1)}%</span>
                      </div>
                    )}
                    {insurance > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>Insurance</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${insurance.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(insurance).toFixed(1)}%</span>
                      </div>
                    )}
                    {opexSalesMarketing > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>Sales & Marketing</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${opexSalesMarketing.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(opexSalesMarketing).toFixed(1)}%</span>
                      </div>
                    )}
                    {contractorsDistribution > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>Contractors Distribution</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${contractorsDistribution.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(contractorsDistribution).toFixed(1)}%</span>
                      </div>
                    )}
                    {depreciationExpense > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>Depreciation & Amortization</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${depreciationExpense.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(depreciationExpense).toFixed(1)}%</span>
                      </div>
                    )}
                    {opexOther > 0 && (
                      <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569', paddingLeft: '20px' }}>Other Operating Expenses</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>${opexOther.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                        <span style={{ color: '#475569', textAlign: 'right' }}>{pct(opexOther).toFixed(1)}%</span>
                      </div>
                    )}
                    <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '8px 0', borderTop: '1px solid #e2e8f0', marginTop: '4px' }}>
                      <span style={{ fontWeight: '600', color: '#1e293b', paddingLeft: '20px' }}>Total Operating Expenses</span>
                      <span style={{ fontWeight: '600', color: '#1e293b', textAlign: 'right' }}>${totalOpex.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                      <span style={{ fontWeight: '600', color: '#1e293b', textAlign: 'right' }}>{pct(totalOpex).toFixed(1)}%</span>
                    </div>
                  </div>

                  {/* Operating Income */}
                  <div style={{ marginBottom: '24px', background: '#f0fdf4', padding: '12px', borderRadius: '8px' }}>
                    <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr' }}>
                      <span style={{ fontWeight: '700', color: '#166534' }}>Operating Income</span>
                      <span style={{ fontWeight: '700', color: '#166534', textAlign: 'right' }}>${operatingIncome.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                      <span style={{ fontWeight: '700', color: '#166534', textAlign: 'right' }}>{operatingMargin.toFixed(1)}%</span>
                    </div>
                  </div>

                  {/* Other Income/Expense */}
                  {(interestExpense > 0 || nonOperatingIncome > 0 || extraordinaryItems !== 0) && (
                    <div style={{ marginBottom: '24px' }}>
                      <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px', fontSize: '15px' }}>Other Income/(Expense)</div>
                      {nonOperatingIncome > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>Non-Operating Income</span>
                          <span style={{ color: '#10b981', textAlign: 'right' }}>${nonOperatingIncome.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}</span>
                          <span style={{ color: '#10b981', textAlign: 'right' }}>{pct(nonOperatingIncome).toFixed(1)}%</span>
                        </div>
                      )}
                      {interestExpense > 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>Interest Expense</span>
                          <span style={{ color: '#ef4444', textAlign: 'right' }}>($  {interestExpense.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })})</span>
                          <span style={{ color: '#ef4444', textAlign: 'right' }}>({pct(interestExpense).toFixed(1)}%)</span>
                        </div>
                      )}
                      {extraordinaryItems !== 0 && (
                        <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', padding: '6px 0', fontSize: '14px' }}>
                          <span style={{ color: '#475569', paddingLeft: '20px' }}>Extraordinary Items</span>
                          <span style={{ color: extraordinaryItems >= 0 ? '#10b981' : '#ef4444', textAlign: 'right' }}>
                            {extraordinaryItems >= 0 ? '$' : '($'}{Math.abs(extraordinaryItems).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}{extraordinaryItems < 0 ? ')' : ''}
                          </span>
                          <span style={{ color: extraordinaryItems >= 0 ? '#10b981' : '#ef4444', textAlign: 'right' }}>
                            {extraordinaryItems >= 0 ? '' : '('}{pct(Math.abs(extraordinaryItems)).toFixed(1)}%{extraordinaryItems < 0 ? ')' : ''}
                          </span>
                        </div>
                      )}
                    </div>
                  )}

                  {/* Net Income */}
                  <div style={{ background: netIncome >= 0 ? '#dcfce7' : '#fee2e2', padding: '16px', borderRadius: '8px', marginTop: '32px' }}>
                    <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr' }}>
                      <span style={{ fontWeight: '700', fontSize: '18px', color: netIncome >= 0 ? '#166534' : '#991b1b' }}>Net Income</span>
                      <span style={{ fontWeight: '700', fontSize: '18px', color: netIncome >= 0 ? '#166534' : '#991b1b', textAlign: 'right' }}>
                        ${netIncome.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}
                      </span>
                      <span style={{ fontWeight: '700', fontSize: '18px', color: netIncome >= 0 ? '#166534' : '#991b1b', textAlign: 'right' }}>
                        {netMargin.toFixed(1)}%
                      </span>
                    </div>
                  </div>
                </div>
              );
            } else if (statementType === 'balance-sheet' && statementPeriod === 'current-month') {
              const currentMonth = monthly[monthly.length - 1];
              const monthDate = new Date(currentMonth.date || currentMonth.month);
              const monthName = monthDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });
              
              // Assets
              const cash = currentMonth.cash || 0;
              const ar = currentMonth.ar || 0;
              const inventory = currentMonth.inventory || 0;
              const otherCA = currentMonth.otherCA || 0;
              const tca = cash + ar + inventory + otherCA;
              
              const fixedAssets = currentMonth.fixedAssets || 0;
              const otherAssets = currentMonth.otherAssets || 0;
              const totalAssets = tca + fixedAssets + otherAssets;
              
              // Liabilities
              const ap = currentMonth.ap || 0;
              const otherCL = currentMonth.otherCL || 0;
              const tcl = ap + otherCL;
              
              const ltd = currentMonth.ltd || 0;
              const totalLiabilities = tcl + ltd;
              
              // Equity
              const totalEquity = currentMonth.totalEquity || 0;
              
              // Total L&E
              const totalLAndE = totalLiabilities + totalEquity;
              
              return (
                <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <div style={{ marginBottom: '32px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                    <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Balance Sheet</h2>
                    <div style={{ fontSize: '14px', color: '#64748b' }}>As of {monthName}</div>
                  </div>

                  {/* ASSETS */}
                  <div style={{ marginBottom: '32px' }}>
                    <div style={{ fontSize: '18px', fontWeight: '700', color: '#1e293b', marginBottom: '16px', paddingBottom: '8px', borderBottom: '2px solid #667eea' }}>ASSETS</div>
                    
                    {/* Current Assets */}
                    <div style={{ marginBottom: '20px' }}>
                      <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px', fontSize: '15px' }}>Current Assets</div>
                      {cash > 0 && (
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                          <span style={{ color: '#475569' }}>Cash</span>
                          <span style={{ color: '#475569' }}>${cash.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      )}
                      {ar > 0 && (
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                          <span style={{ color: '#475569' }}>Accounts Receivable</span>
                          <span style={{ color: '#475569' }}>${ar.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      )}
                      {inventory > 0 && (
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                          <span style={{ color: '#475569' }}>Inventory</span>
                          <span style={{ color: '#475569' }}>${inventory.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      )}
                      {otherCA > 0 && (
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                          <span style={{ color: '#475569' }}>Other Current Assets</span>
                          <span style={{ color: '#475569' }}>${otherCA.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      )}
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0 8px 20px', borderTop: '1px solid #e2e8f0', marginTop: '4px' }}>
                        <span style={{ fontWeight: '600', color: '#1e293b' }}>Total Current Assets</span>
                        <span style={{ fontWeight: '600', color: '#1e293b' }}>${tca.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    </div>

                    {/* Non-Current Assets */}
                    {fixedAssets > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>Fixed Assets</span>
                        <span style={{ color: '#475569' }}>${fixedAssets.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    {otherAssets > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>Other Assets</span>
                        <span style={{ color: '#475569' }}>${otherAssets.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    
                    <div style={{ display: 'flex', justifyContent: 'space-between', padding: '12px 0', borderTop: '2px solid #667eea', marginTop: '8px', background: '#f8fafc' }}>
                      <span style={{ fontWeight: '700', fontSize: '16px', color: '#1e293b' }}>TOTAL ASSETS</span>
                      <span style={{ fontWeight: '700', fontSize: '16px', color: '#1e293b' }}>${totalAssets.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                    </div>
                  </div>

                  {/* LIABILITIES */}
                  <div style={{ marginBottom: '32px' }}>
                    <div style={{ fontSize: '18px', fontWeight: '700', color: '#1e293b', marginBottom: '16px', paddingBottom: '8px', borderBottom: '2px solid #f59e0b' }}>LIABILITIES</div>
                    
                    {/* Current Liabilities */}
                    <div style={{ marginBottom: '20px' }}>
                      <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px', fontSize: '15px' }}>Current Liabilities</div>
                      {ap > 0 && (
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                          <span style={{ color: '#475569' }}>Accounts Payable</span>
                          <span style={{ color: '#475569' }}>${ap.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      )}
                      {otherCL > 0 && (
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                          <span style={{ color: '#475569' }}>Other Current Liabilities</span>
                          <span style={{ color: '#475569' }}>${otherCL.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      )}
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0 8px 20px', borderTop: '1px solid #e2e8f0', marginTop: '4px' }}>
                        <span style={{ fontWeight: '600', color: '#1e293b' }}>Total Current Liabilities</span>
                        <span style={{ fontWeight: '600', color: '#1e293b' }}>${tcl.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    </div>

                    {/* Long-term Debt */}
                    {ltd > 0 && (
                      <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0', fontSize: '14px' }}>
                        <span style={{ color: '#475569' }}>Long-term Debt</span>
                        <span style={{ color: '#475569' }}>${ltd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                      </div>
                    )}
                    
                    <div style={{ display: 'flex', justifyContent: 'space-between', padding: '12px 0', borderTop: '2px solid #f59e0b', marginTop: '8px', background: '#fef3c7' }}>
                      <span style={{ fontWeight: '700', fontSize: '16px', color: '#1e293b' }}>TOTAL LIABILITIES</span>
                      <span style={{ fontWeight: '700', fontSize: '16px', color: '#1e293b' }}>${totalLiabilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                    </div>
                  </div>

                  {/* EQUITY */}
                  <div style={{ marginBottom: '24px' }}>
                    <div style={{ fontSize: '18px', fontWeight: '700', color: '#1e293b', marginBottom: '16px', paddingBottom: '8px', borderBottom: '2px solid #10b981' }}>EQUITY</div>
                    
                    <div style={{ display: 'flex', justifyContent: 'space-between', padding: '12px 0', borderTop: '2px solid #10b981', background: '#d1fae5' }}>
                      <span style={{ fontWeight: '700', fontSize: '16px', color: '#1e293b' }}>TOTAL EQUITY</span>
                      <span style={{ fontWeight: '700', fontSize: '16px', color: '#1e293b' }}>${totalEquity.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                    </div>
                  </div>

                  {/* TOTAL LIABILITIES & EQUITY */}
                  <div style={{ background: '#f1f5f9', padding: '16px', borderRadius: '8px', marginTop: '32px' }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                      <span style={{ fontWeight: '700', fontSize: '18px', color: '#1e293b' }}>TOTAL LIABILITIES & EQUITY</span>
                      <span style={{ fontWeight: '700', fontSize: '18px', color: '#1e293b' }}>
                        ${totalLAndE.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                      </span>
                    </div>
                    {Math.abs(totalAssets - totalLAndE) > 0.01 && (
                      <div style={{ fontSize: '12px', color: '#ef4444', marginTop: '8px', textAlign: 'right' }}>
                        ⚠️ Balance check: Assets - (Liabilities + Equity) = ${(totalAssets - totalLAndE).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                      </div>
                    )}
                  </div>
                </div>
              );
            }
            
            // Multi-period logic (Current Quarter, Last 12 Months, YTD, Last Year, Last 3 Years)
            else if (monthly.length > 0 && statementPeriod !== 'current-month') {
              // Helper function to get months for the selected period
              const getMonthsForPeriod = () => {
                const now = new Date();
                const currentYear = now.getFullYear();
                const currentMonth = now.getMonth(); // 0-11
                
                switch (statementPeriod) {
                  case 'current-quarter':
                    // Last 3 months
                    return monthly.slice(-3);
                  
                  case 'last-12-months':
                    // Last 12 months
                    return monthly.slice(-12);
                  
                  case 'ytd':
                    // Year to date - from January of current year to now
                    return monthly.filter(m => {
                      const mDate = new Date(m.date || m.month);
                      return mDate.getFullYear() === currentYear;
                    });
                  
                  case 'last-year':
                    // Full previous year
                    return monthly.filter(m => {
                      const mDate = new Date(m.date || m.month);
                      return mDate.getFullYear() === currentYear - 1;
                    });
                  
                  case 'last-3-years':
                    // Last 36 months
                    return monthly.slice(-36);
                  
                  default:
                    return [];
                }
              };
              
              const periodMonths = getMonthsForPeriod();
              
              if (periodMonths.length === 0) {
                return (
                  <div style={{ background: 'white', borderRadius: '12px', padding: '48px 32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', minHeight: '400px', textAlign: 'center' }}>
                    <div style={{ fontSize: '18px', fontWeight: '600', color: '#64748b', marginBottom: '12px' }}>
                      📊 No Data Available
                    </div>
                    <p style={{ fontSize: '14px', color: '#94a3b8' }}>
                      No financial data available for the selected period.
                    </p>
                  </div>
                );
              }
              
              // Get period label
              const getPeriodLabel = () => {
                const firstMonth = periodMonths[0];
                const lastMonth = periodMonths[periodMonths.length - 1];
                const firstDate = new Date(firstMonth.date || firstMonth.month);
                const lastDate = new Date(lastMonth.date || lastMonth.month);
                
                switch (statementPeriod) {
                  case 'current-quarter':
                    return `Current Quarter (${firstDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })} - ${lastDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })})`;
                  case 'last-12-months':
                    return `Last 12 Months (${firstDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })} - ${lastDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })})`;
                  case 'ytd':
                    return `Year to Date ${lastDate.getFullYear()} (Jan - ${lastDate.toLocaleDateString('en-US', { month: 'short' })})`;
                  case 'last-year':
                    return `Fiscal Year ${firstDate.getFullYear()}`;
                  case 'last-3-years':
                    return `Last 3 Years (${firstDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })} - ${lastDate.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })})`;
                  default:
                    return '';
                }
              };
              
              const periodLabel = getPeriodLabel();
              const latestMonth = periodMonths[periodMonths.length - 1];
              
              // Helper function to group months by display period
              const groupMonthsByDisplay = () => {
                if (statementDisplay === 'monthly') {
                  // Each month is its own period
                  return periodMonths.map(m => ({
                    label: new Date(m.date || m.month).toLocaleDateString('en-US', { month: 'short', year: 'numeric' }),
                    months: [m]
                  }));
                } else if (statementDisplay === 'quarterly') {
                  // Group by quarter
                  const quarters: { [key: string]: any[] } = {};
                  periodMonths.forEach(m => {
                    const date = new Date(m.date || m.month);
                    const year = date.getFullYear();
                    const quarter = Math.floor(date.getMonth() / 3) + 1;
                    const key = `${year}-Q${quarter}`;
                    if (!quarters[key]) quarters[key] = [];
                    quarters[key].push(m);
                  });
                  return Object.entries(quarters).map(([key, months]) => ({
                    label: key,
                    months
                  }));
                } else {
                  // Annual - group by year
                  const years: { [key: string]: any[] } = {};
                  periodMonths.forEach(m => {
                    const year = new Date(m.date || m.month).getFullYear().toString();
                    if (!years[year]) years[year] = [];
                    years[year].push(m);
                  });
                  return Object.entries(years).map(([year, months]) => ({
                    label: year,
                    months
                  }));
                }
              };
              
              const displayPeriods = groupMonthsByDisplay();
              
              // INCOME STATEMENT - Aggregate across period
              if (statementType === 'income-statement') {
                // Check if we're showing multiple periods side-by-side
                if (displayPeriods.length > 1) {
                // Multi-column comparative income statement
                const calculatePeriodData = (months: any[]) => {
                  const revenue = months.reduce((sum, m) => sum + (m.revenue || 0), 0);
                  
                  // COGS detailed
                  const cogsPayroll = months.reduce((sum, m) => sum + (m.cogsPayroll || 0), 0);
                  const cogsOwnerPay = months.reduce((sum, m) => sum + (m.cogsOwnerPay || 0), 0);
                  const cogsContractors = months.reduce((sum, m) => sum + (m.cogsContractors || 0), 0);
                  const cogsMaterials = months.reduce((sum, m) => sum + (m.cogsMaterials || 0), 0);
                  const cogsCommissions = months.reduce((sum, m) => sum + (m.cogsCommissions || 0), 0);
                  const cogsOther = months.reduce((sum, m) => sum + (m.cogsOther || 0), 0);
                  const cogs = cogsPayroll + cogsOwnerPay + cogsContractors + cogsMaterials + cogsCommissions + cogsOther;
                  const grossProfit = revenue - cogs;
                  
                  // Operating Expenses detailed
                  const opexPayroll = months.reduce((sum, m) => sum + (m.opexPayroll || 0), 0);
                  const ownersBasePay = months.reduce((sum, m) => sum + (m.ownersBasePay || 0), 0);
                  const ownersRetirement = months.reduce((sum, m) => sum + (m.ownersRetirement || 0), 0);
                  const professionalServices = months.reduce((sum, m) => sum + (m.professionalServices || 0), 0);
                  const rentLease = months.reduce((sum, m) => sum + (m.rentLease || 0), 0);
                  const utilities = months.reduce((sum, m) => sum + (m.utilities || 0), 0);
                  const equipment = months.reduce((sum, m) => sum + (m.equipment || 0), 0);
                  const travel = months.reduce((sum, m) => sum + (m.travel || 0), 0);
                  const insurance = months.reduce((sum, m) => sum + (m.insurance || 0), 0);
                  const opexSalesMarketing = months.reduce((sum, m) => sum + (m.opexSalesMarketing || 0), 0);
                  const contractorsDistribution = months.reduce((sum, m) => sum + (m.contractorsDistribution || 0), 0);
                  const depreciationExpense = months.reduce((sum, m) => sum + (m.depreciationExpense || 0), 0);
                  const opexOther = months.reduce((sum, m) => sum + (m.opexOther || 0), 0);
                  const totalOpex = opexPayroll + ownersBasePay + ownersRetirement + professionalServices + 
                                   rentLease + utilities + equipment + travel + insurance + 
                                   opexSalesMarketing + contractorsDistribution + depreciationExpense + opexOther;
                  const operatingIncome = grossProfit - totalOpex;
                  
                  // Other Income/Expense
                  const interestExpense = months.reduce((sum, m) => sum + (m.interestExpense || 0), 0);
                  const nonOperatingIncome = months.reduce((sum, m) => sum + (m.nonOperatingIncome || 0), 0);
                  const extraordinaryItems = months.reduce((sum, m) => sum + (m.extraordinaryItems || 0), 0);
                  const netIncome = operatingIncome - interestExpense + nonOperatingIncome + extraordinaryItems;
                  
                  return { 
                    revenue, 
                    cogsPayroll, cogsOwnerPay, cogsContractors, cogsMaterials, cogsCommissions, cogsOther, cogs, 
                    grossProfit, 
                    opexPayroll, ownersBasePay, ownersRetirement, professionalServices, rentLease, utilities, 
                    equipment, travel, insurance, opexSalesMarketing, contractorsDistribution, depreciationExpense, opexOther, totalOpex,
                    operatingIncome, 
                    interestExpense, nonOperatingIncome, extraordinaryItems, 
                    netIncome 
                  };
                };
                  
                  const periodsData = displayPeriods.map(p => ({
                    label: p.label,
                    ...calculatePeriodData(p.months)
                  }));
                  
                  return (
                    <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', overflowX: 'auto' }}>
                      <div style={{ marginBottom: '32px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                        <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Comparative Income Statement</h2>
                        <div style={{ fontSize: '14px', color: '#64748b' }}>{periodLabel} - {statementDisplay === 'monthly' ? 'Monthly' : statementDisplay === 'quarterly' ? 'Quarterly' : 'Annual'}</div>
                      </div>
                      
                      {/* Table with multiple columns */}
                      <div style={{ minWidth: `${200 + (periodsData.length * 110)}px` }}>
                        {/* Header Row */}
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '12px 0', borderBottom: '2px solid #1e293b', fontWeight: '600', color: '#1e293b', position: 'sticky', top: 0, background: 'white' }}>
                          <div>Line Item</div>
                          {periodsData.map((p, i) => (
                            <div key={i} style={{ textAlign: 'right' }}>{p.label}</div>
                          ))}
                        </div>
                        
                        {/* Revenue */}
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '8px 0', borderBottom: '1px solid #e2e8f0', fontWeight: '600' }}>
                          <div style={{ color: '#1e293b' }}>Revenue</div>
                          {periodsData.map((p, i) => (
                            <div key={i} style={{ textAlign: 'right', color: '#1e293b' }}>${(p.revenue / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                          ))}
                        </div>
                        
                        {/* COGS Section Header */}
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '12px 0 4px 0', fontSize: '14px', fontWeight: '600', marginTop: '8px' }}>
                          <div style={{ color: '#475569' }}>Cost of Goods Sold</div>
                          {periodsData.map((p, i) => <div key={i}></div>)}
                        </div>
                        
                        {/* COGS Details */}
                        {periodsData.some(p => p.cogsPayroll > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>COGS - Payroll</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.cogsPayroll / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.cogsOwnerPay > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>COGS - Owner Pay</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.cogsOwnerPay / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.cogsContractors > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>COGS - Contractors</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.cogsContractors / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.cogsMaterials > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>COGS - Materials</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.cogsMaterials / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.cogsCommissions > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>COGS - Commissions</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.cogsCommissions / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.cogsOther > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>COGS - Other</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.cogsOther / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '6px 0', fontSize: '14px', fontWeight: '600', borderTop: '1px solid #cbd5e1', marginTop: '4px' }}>
                          <div style={{ color: '#475569' }}>Total COGS</div>
                          {periodsData.map((p, i) => (
                            <div key={i} style={{ textAlign: 'right', color: '#475569' }}>${(p.cogs / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                          ))}
                        </div>
                        
                        {/* Gross Profit */}
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '10px 8px', background: '#dbeafe', borderRadius: '4px', marginTop: '8px', fontWeight: '700' }}>
                          <div style={{ color: '#1e40af' }}>Gross Profit</div>
                          {periodsData.map((p, i) => (
                            <div key={i} style={{ textAlign: 'right', color: '#1e40af' }}>${(p.grossProfit / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                          ))}
                        </div>
                        
                        {/* Operating Expenses Section Header */}
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '12px 0 4px 0', fontSize: '14px', fontWeight: '600', marginTop: '12px' }}>
                          <div style={{ color: '#475569' }}>Operating Expenses</div>
                          {periodsData.map((p, i) => <div key={i}></div>)}
                        </div>
                        
                        {/* Operating Expenses Details */}
                        {periodsData.some(p => p.opexPayroll > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>Payroll</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.opexPayroll / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.ownersBasePay > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>Owner's Base Pay</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.ownersBasePay / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.ownersRetirement > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>Owner's Retirement</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.ownersRetirement / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.professionalServices > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>Professional Services</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.professionalServices / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.rentLease > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>Rent/Lease</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.rentLease / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.utilities > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>Utilities</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.utilities / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.equipment > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>Equipment</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.equipment / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.travel > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>Travel</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.travel / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.insurance > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>Insurance</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.insurance / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.opexSalesMarketing > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>Sales & Marketing</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.opexSalesMarketing / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.contractorsDistribution > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>Contractors - Distribution</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.contractorsDistribution / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.depreciationExpense > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>Depreciation & Amortization</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.depreciationExpense / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        {periodsData.some(p => p.opexOther > 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>Other Operating Expenses</div>
                            {periodsData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.opexOther / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            ))}
                          </div>
                        )}
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '6px 0', fontSize: '14px', fontWeight: '600', borderTop: '1px solid #cbd5e1', marginTop: '4px' }}>
                          <div style={{ color: '#475569' }}>Total Operating Expenses</div>
                          {periodsData.map((p, i) => (
                            <div key={i} style={{ textAlign: 'right', color: '#475569' }}>${(p.totalOpex / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                          ))}
                        </div>
                        
                        {/* Operating Income */}
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '10px 8px', background: '#dbeafe', borderRadius: '4px', marginTop: '8px', fontWeight: '700' }}>
                          <div style={{ color: '#1e40af' }}>Operating Income</div>
                          {periodsData.map((p, i) => (
                            <div key={i} style={{ textAlign: 'right', color: '#1e40af' }}>${(p.operatingIncome / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                          ))}
                        </div>
                        
                        {/* Other Income/Expense Section */}
                        {periodsData.some(p => p.interestExpense > 0 || p.nonOperatingIncome > 0 || p.extraordinaryItems !== 0) && (
                          <>
                            <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '12px 0 4px 0', fontSize: '14px', fontWeight: '600', marginTop: '12px' }}>
                              <div style={{ color: '#475569' }}>Other Income/(Expense)</div>
                              {periodsData.map((p, i) => <div key={i}></div>)}
                            </div>
                            {periodsData.some(p => p.interestExpense > 0) && (
                              <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                                <div style={{ color: '#64748b', paddingLeft: '20px' }}>Interest Expense</div>
                                {periodsData.map((p, i) => (
                                  <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>(${ (p.interestExpense / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K)</div>
                                ))}
                              </div>
                            )}
                            {periodsData.some(p => p.nonOperatingIncome > 0) && (
                              <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                                <div style={{ color: '#64748b', paddingLeft: '20px' }}>Non-Operating Income</div>
                                {periodsData.map((p, i) => (
                                  <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>${(p.nonOperatingIncome / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                                ))}
                              </div>
                            )}
                            {periodsData.some(p => p.extraordinaryItems !== 0) && (
                              <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                                <div style={{ color: '#64748b', paddingLeft: '20px' }}>Extraordinary Items</div>
                                {periodsData.map((p, i) => (
                                  <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>
                                    {p.extraordinaryItems >= 0 ? '$' : '($'}{(Math.abs(p.extraordinaryItems) / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K{p.extraordinaryItems < 0 ? ')' : ''}
                                  </div>
                                ))}
                              </div>
                            )}
                          </>
                        )}
                        
                        {/* Net Income */}
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 110px)`, gap: '4px', padding: '12px 8px', background: '#dcfce7', borderRadius: '4px', marginTop: '12px', fontWeight: '700', fontSize: '15px' }}>
                          <div style={{ color: '#166534' }}>Net Income</div>
                          {periodsData.map((p, i) => (
                            <div key={i} style={{ textAlign: 'right', color: p.netIncome >= 0 ? '#166534' : '#991b1b' }}>
                              {p.netIncome >= 0 ? '$' : '($'}{(Math.abs(p.netIncome) / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K{p.netIncome < 0 ? ')' : ''}
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  );
                }
                
                // Single period aggregation (original logic)
                const revenue = periodMonths.reduce((sum, m) => sum + (m.revenue || 0), 0);
                
                const cogsPayroll = periodMonths.reduce((sum, m) => sum + (m.cogsPayroll || 0), 0);
                const cogsOwnerPay = periodMonths.reduce((sum, m) => sum + (m.cogsOwnerPay || 0), 0);
                const cogsContractors = periodMonths.reduce((sum, m) => sum + (m.cogsContractors || 0), 0);
                const cogsMaterials = periodMonths.reduce((sum, m) => sum + (m.cogsMaterials || 0), 0);
                const cogsCommissions = periodMonths.reduce((sum, m) => sum + (m.cogsCommissions || 0), 0);
                const cogsOther = periodMonths.reduce((sum, m) => sum + (m.cogsOther || 0), 0);
                const cogs = cogsPayroll + cogsOwnerPay + cogsContractors + cogsMaterials + cogsCommissions + cogsOther;
                
                const grossProfit = revenue - cogs;
                const grossMargin = revenue > 0 ? (grossProfit / revenue) * 100 : 0;
                
                const opexPayroll = periodMonths.reduce((sum, m) => sum + (m.opexPayroll || 0), 0);
                const ownersBasePay = periodMonths.reduce((sum, m) => sum + (m.ownersBasePay || 0), 0);
                const ownersRetirement = periodMonths.reduce((sum, m) => sum + (m.ownersRetirement || 0), 0);
                const professionalServices = periodMonths.reduce((sum, m) => sum + (m.professionalServices || 0), 0);
                const rentLease = periodMonths.reduce((sum, m) => sum + (m.rentLease || 0), 0);
                const utilities = periodMonths.reduce((sum, m) => sum + (m.utilities || 0), 0);
                const equipment = periodMonths.reduce((sum, m) => sum + (m.equipment || 0), 0);
                const travel = periodMonths.reduce((sum, m) => sum + (m.travel || 0), 0);
                const insurance = periodMonths.reduce((sum, m) => sum + (m.insurance || 0), 0);
                const opexSalesMarketing = periodMonths.reduce((sum, m) => sum + (m.opexSalesMarketing || 0), 0);
                const contractorsDistribution = periodMonths.reduce((sum, m) => sum + (m.contractorsDistribution || 0), 0);
                const depreciationExpense = periodMonths.reduce((sum, m) => sum + (m.depreciationExpense || 0), 0);
                const opexOther = periodMonths.reduce((sum, m) => sum + (m.opexOther || 0), 0);
                
                const totalOpex = opexPayroll + ownersBasePay + ownersRetirement + professionalServices + 
                                 rentLease + utilities + equipment + travel + insurance + 
                                 opexSalesMarketing + contractorsDistribution + depreciationExpense + opexOther;
                
                const operatingIncome = grossProfit - totalOpex;
                const operatingMargin = revenue > 0 ? (operatingIncome / revenue) * 100 : 0;
                
                const interestExpense = periodMonths.reduce((sum, m) => sum + (m.interestExpense || 0), 0);
                const nonOperatingIncome = periodMonths.reduce((sum, m) => sum + (m.nonOperatingIncome || 0), 0);
                const extraordinaryItems = periodMonths.reduce((sum, m) => sum + (m.extraordinaryItems || 0), 0);
                
                const netIncome = operatingIncome - interestExpense + nonOperatingIncome + extraordinaryItems;
                const netMargin = revenue > 0 ? (netIncome / revenue) * 100 : 0;
                
                return (
                  <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                      <div style={{ marginBottom: '32px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                        <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Income Statement</h2>
                        <div style={{ fontSize: '14px', color: '#64748b' }}>For the Period: {periodLabel}</div>
                      </div>

                      {/* Revenue Section */}
                      <div style={{ marginBottom: '24px' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0', borderBottom: '1px solid #e2e8f0' }}>
                          <span style={{ fontWeight: '600', color: '#1e293b' }}>Revenue</span>
                          <span style={{ fontWeight: '600', color: '#1e293b' }}>${revenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      </div>

                      {/* COGS Section */}
                      <div style={{ marginBottom: '24px' }}>
                        <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>Cost of Goods Sold</div>
                        {cogsPayroll > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>COGS - Payroll</span>
                            <span style={{ color: '#475569' }}>${cogsPayroll.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {cogsOwnerPay > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>COGS - Owner Pay</span>
                            <span style={{ color: '#475569' }}>${cogsOwnerPay.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {cogsContractors > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>COGS - Contractors</span>
                            <span style={{ color: '#475569' }}>${cogsContractors.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {cogsMaterials > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>COGS - Materials</span>
                            <span style={{ color: '#475569' }}>${cogsMaterials.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {cogsCommissions > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>COGS - Commissions</span>
                            <span style={{ color: '#475569' }}>${cogsCommissions.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {cogsOther > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>COGS - Other</span>
                            <span style={{ color: '#475569' }}>${cogsOther.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0', borderTop: '1px solid #e2e8f0', marginTop: '4px' }}>
                          <span style={{ fontWeight: '600', color: '#1e293b' }}>Total COGS</span>
                          <span style={{ fontWeight: '600', color: '#1e293b' }}>${cogs.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      </div>

                      {/* Gross Profit */}
                      <div style={{ marginBottom: '24px', background: '#dbeafe', padding: '12px', borderRadius: '8px' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                          <span style={{ fontWeight: '700', color: '#1e40af' }}>Gross Profit</span>
                          <span style={{ fontWeight: '700', color: '#1e40af' }}>${grossProfit.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                        <div style={{ fontSize: '13px', color: '#1e40af', textAlign: 'right' }}>
                          {grossMargin.toFixed(1)}% margin
                        </div>
                      </div>

                      {/* Operating Expenses */}
                      <div style={{ marginBottom: '24px' }}>
                        <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>Operating Expenses</div>
                        {opexPayroll > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Payroll</span>
                            <span style={{ color: '#475569' }}>${opexPayroll.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {ownersBasePay > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Owner's Base Pay</span>
                            <span style={{ color: '#475569' }}>${ownersBasePay.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {ownersRetirement > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Owner's Retirement</span>
                            <span style={{ color: '#475569' }}>${ownersRetirement.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {professionalServices > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Professional Services</span>
                            <span style={{ color: '#475569' }}>${professionalServices.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {rentLease > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Rent/Lease</span>
                            <span style={{ color: '#475569' }}>${rentLease.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {utilities > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Utilities</span>
                            <span style={{ color: '#475569' }}>${utilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {equipment > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Equipment</span>
                            <span style={{ color: '#475569' }}>${equipment.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {travel > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Travel</span>
                            <span style={{ color: '#475569' }}>${travel.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {insurance > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Insurance</span>
                            <span style={{ color: '#475569' }}>${insurance.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {opexSalesMarketing > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Sales & Marketing</span>
                            <span style={{ color: '#475569' }}>${opexSalesMarketing.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {contractorsDistribution > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Contractors - Distribution</span>
                            <span style={{ color: '#475569' }}>${contractorsDistribution.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {depreciationExpense > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Depreciation & Amortization</span>
                            <span style={{ color: '#475569' }}>${depreciationExpense.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {opexOther > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Other Operating Expenses</span>
                            <span style={{ color: '#475569' }}>${opexOther.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0', borderTop: '1px solid #e2e8f0', marginTop: '4px' }}>
                          <span style={{ fontWeight: '600', color: '#1e293b' }}>Total Operating Expenses</span>
                          <span style={{ fontWeight: '600', color: '#1e293b' }}>${totalOpex.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      </div>

                      {/* Operating Income */}
                      <div style={{ marginBottom: '24px', background: '#dbeafe', padding: '12px', borderRadius: '8px' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                          <span style={{ fontWeight: '700', color: '#1e40af' }}>Operating Income</span>
                          <span style={{ fontWeight: '700', color: '#1e40af' }}>${operatingIncome.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                        <div style={{ fontSize: '13px', color: '#1e40af', textAlign: 'right' }}>
                          {operatingMargin.toFixed(1)}% operating margin
                        </div>
                      </div>

                      {/* Other Income/Expense */}
                      <div style={{ marginBottom: '24px' }}>
                        <div style={{ fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>Other Income/(Expense)</div>
                        {interestExpense > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Interest Expense</span>
                            <span style={{ color: '#475569' }}>(${ interestExpense.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })})</span>
                          </div>
                        )}
                        {nonOperatingIncome > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Non-Operating Income</span>
                            <span style={{ color: '#475569' }}>${nonOperatingIncome.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {extraordinaryItems !== 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '6px 0 6px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#475569' }}>Extraordinary Items</span>
                            <span style={{ color: '#475569' }}>{extraordinaryItems >= 0 ? '$' : '($'}{Math.abs(extraordinaryItems).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}{extraordinaryItems < 0 ? ')' : ''}</span>
                          </div>
                        )}
                      </div>

                      {/* Net Income */}
                      <div style={{ background: netIncome >= 0 ? '#dcfce7' : '#fee2e2', padding: '16px', borderRadius: '8px', marginTop: '24px' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                          <span style={{ fontWeight: '700', fontSize: '18px', color: netIncome >= 0 ? '#166534' : '#991b1b' }}>Net Income</span>
                          <span style={{ fontWeight: '700', fontSize: '18px', color: netIncome >= 0 ? '#166534' : '#991b1b' }}>
                            {netIncome >= 0 ? '$' : '($'}{Math.abs(netIncome).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}{netIncome < 0 ? ')' : ''}
                          </span>
                        </div>
                        <div style={{ fontSize: '14px', color: netIncome >= 0 ? '#166534' : '#991b1b', textAlign: 'right' }}>
                          {netMargin.toFixed(1)}% net margin
                        </div>
                      </div>
                  </div>
                );
              }
              
              // COMMON SIZE INCOME STATEMENT - Aggregate with percentages
              else if (statementType === 'income-statement-percent') {
                // Check if showing multiple periods side-by-side
                if (displayPeriods.length > 1) {
                  const calc = (months: any[], field: string) => months.reduce((sum, m) => sum + (m[field] || 0), 0);
                  const periodsData = displayPeriods.map(p => {
                    const m = p.months;
                    const revenue = calc(m, 'revenue');
                    const cogsPayroll = calc(m, 'cogsPayroll');
                    const cogsOwnerPay = calc(m, 'cogsOwnerPay');
                    const cogsContractors = calc(m, 'cogsContractors');
                    const cogsMaterials = calc(m, 'cogsMaterials');
                    const cogsCommissions = calc(m, 'cogsCommissions');
                    const cogsOther = calc(m, 'cogsOther');
                    const opexPayroll = calc(m, 'opexPayroll');
                    const ownersBasePay = calc(m, 'ownersBasePay');
                    const ownersRetirement = calc(m, 'ownersRetirement');
                    const professionalServices = calc(m, 'professionalServices');
                    const rentLease = calc(m, 'rentLease');
                    const utilities = calc(m, 'utilities');
                    const equipment = calc(m, 'equipment');
                    const travel = calc(m, 'travel');
                    const insurance = calc(m, 'insurance');
                    const opexSalesMarketing = calc(m, 'opexSalesMarketing');
                    const contractorsDistribution = calc(m, 'contractorsDistribution');
                    const depreciationExpense = calc(m, 'depreciationExpense');
                    const opexOther = calc(m, 'opexOther');
                    const interestExpense = calc(m, 'interestExpense');
                    const nonOperatingIncome = calc(m, 'nonOperatingIncome');
                    const extraordinaryItems = calc(m, 'extraordinaryItems');
                    const cogs = cogsPayroll + cogsOwnerPay + cogsContractors + cogsMaterials + cogsCommissions + cogsOther;
                    const totalOpex = opexPayroll + ownersBasePay + ownersRetirement + professionalServices + rentLease + utilities + equipment + travel + insurance + opexSalesMarketing + contractorsDistribution + depreciationExpense + opexOther;
                    const grossProfit = revenue - cogs;
                    const operatingIncome = grossProfit - totalOpex;
                    const netIncome = operatingIncome - interestExpense + nonOperatingIncome + extraordinaryItems;
                    return { label: p.label, revenue, cogsPayroll, cogsOwnerPay, cogsContractors, cogsMaterials, cogsCommissions, cogsOther, cogs, grossProfit, opexPayroll, ownersBasePay, ownersRetirement, professionalServices, rentLease, utilities, equipment, travel, insurance, opexSalesMarketing, contractorsDistribution, depreciationExpense, opexOther, totalOpex, operatingIncome, interestExpense, nonOperatingIncome, extraordinaryItems, netIncome };
                  });
                  const RowWithPercent = ({ label, values, indent = 0, bold = false }: any) => (
                    <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 90px 60px)`, gap: '4px', padding: '4px 0', fontSize: bold ? '14px' : '13px', fontWeight: bold ? '600' : 'normal' }}>
                      <div style={{ color: bold ? '#475569' : '#64748b', paddingLeft: `${indent}px` }}>{label}</div>
                      {values.map((v: number, i: number) => {
                        const pct = periodsData[i].revenue > 0 ? (v / periodsData[i].revenue) * 100 : 0;
                        return (
                          <div key={i} style={{ display: 'contents' }}>
                            <div style={{ textAlign: 'right', color: bold ? '#475569' : '#64748b' }}>${(v / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                            <div style={{ textAlign: 'right', color: '#64748b', fontSize: '12px' }}>{pct.toFixed(1)}%</div>
                          </div>
                        );
                      })}
                    </div>
                  );
                  return (
                    <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', overflowX: 'auto' }}>
                      <div style={{ marginBottom: '24px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                        <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Comparative Common Size Income Statement</h2>
                        <div style={{ fontSize: '14px', color: '#64748b' }}>{periodLabel} - {statementDisplay === 'monthly' ? 'Monthly' : statementDisplay === 'quarterly' ? 'Quarterly' : 'Annual'}</div>
                      </div>
                      <div style={{ minWidth: `${200 + (periodsData.length * 150)}px` }}>
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 90px 60px)`, gap: '4px', padding: '12px 0', borderBottom: '2px solid #1e293b', fontWeight: '600', color: '#1e293b' }}>
                          <div>Line Item</div>
                          {periodsData.map((p, i) => (
                            <div key={i} style={{ display: 'contents' }}>
                              <div style={{ textAlign: 'right' }}>{p.label}</div>
                              <div style={{ textAlign: 'right', fontSize: '12px' }}>% of Rev</div>
                            </div>
                          ))}
                        </div>
                        <RowWithPercent label="Revenue" values={periodsData.map(p => p.revenue)} bold />
                        <div style={{ margin: '8px 0 4px', fontSize: '14px', fontWeight: '600', color: '#475569' }}>Cost of Goods Sold</div>
                        {periodsData.some(p => p.cogsPayroll > 0) && <RowWithPercent label="COGS - Payroll" values={periodsData.map(p => p.cogsPayroll)} indent={20} />}
                        {periodsData.some(p => p.cogsOwnerPay > 0) && <RowWithPercent label="COGS - Owner Pay" values={periodsData.map(p => p.cogsOwnerPay)} indent={20} />}
                        {periodsData.some(p => p.cogsContractors > 0) && <RowWithPercent label="COGS - Contractors" values={periodsData.map(p => p.cogsContractors)} indent={20} />}
                        {periodsData.some(p => p.cogsMaterials > 0) && <RowWithPercent label="COGS - Materials" values={periodsData.map(p => p.cogsMaterials)} indent={20} />}
                        {periodsData.some(p => p.cogsCommissions > 0) && <RowWithPercent label="COGS - Commissions" values={periodsData.map(p => p.cogsCommissions)} indent={20} />}
                        {periodsData.some(p => p.cogsOther > 0) && <RowWithPercent label="COGS - Other" values={periodsData.map(p => p.cogsOther)} indent={20} />}
                        <RowWithPercent label="Total COGS" values={periodsData.map(p => p.cogs)} bold />
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 90px 60px)`, gap: '4px', padding: '10px 8px', background: '#dbeafe', borderRadius: '4px', margin: '8px 0', fontWeight: '700', color: '#1e40af' }}>
                          <div>Gross Profit</div>
                          {periodsData.map((p, i) => {
                            const pct = p.revenue > 0 ? (p.grossProfit / p.revenue) * 100 : 0;
                            return (
                              <div key={i} style={{ display: 'contents' }}>
                                <div style={{ textAlign: 'right' }}>${(p.grossProfit / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                                <div style={{ textAlign: 'right', fontSize: '12px' }}>{pct.toFixed(1)}%</div>
                              </div>
                            );
                          })}
                        </div>
                        <div style={{ margin: '12px 0 4px', fontSize: '14px', fontWeight: '600', color: '#475569' }}>Operating Expenses</div>
                        {periodsData.some(p => p.opexPayroll > 0) && <RowWithPercent label="Payroll" values={periodsData.map(p => p.opexPayroll)} indent={20} />}
                        {periodsData.some(p => p.ownersBasePay > 0) && <RowWithPercent label="Owner's Base Pay" values={periodsData.map(p => p.ownersBasePay)} indent={20} />}
                        {periodsData.some(p => p.ownersRetirement > 0) && <RowWithPercent label="Owner's Retirement" values={periodsData.map(p => p.ownersRetirement)} indent={20} />}
                        {periodsData.some(p => p.professionalServices > 0) && <RowWithPercent label="Professional Services" values={periodsData.map(p => p.professionalServices)} indent={20} />}
                        {periodsData.some(p => p.rentLease > 0) && <RowWithPercent label="Rent/Lease" values={periodsData.map(p => p.rentLease)} indent={20} />}
                        {periodsData.some(p => p.utilities > 0) && <RowWithPercent label="Utilities" values={periodsData.map(p => p.utilities)} indent={20} />}
                        {periodsData.some(p => p.equipment > 0) && <RowWithPercent label="Equipment" values={periodsData.map(p => p.equipment)} indent={20} />}
                        {periodsData.some(p => p.travel > 0) && <RowWithPercent label="Travel" values={periodsData.map(p => p.travel)} indent={20} />}
                        {periodsData.some(p => p.insurance > 0) && <RowWithPercent label="Insurance" values={periodsData.map(p => p.insurance)} indent={20} />}
                        {periodsData.some(p => p.opexSalesMarketing > 0) && <RowWithPercent label="Sales & Marketing" values={periodsData.map(p => p.opexSalesMarketing)} indent={20} />}
                        {periodsData.some(p => p.contractorsDistribution > 0) && <RowWithPercent label="Contractors - Distribution" values={periodsData.map(p => p.contractorsDistribution)} indent={20} />}
                        {periodsData.some(p => p.depreciationExpense > 0) && <RowWithPercent label="Depreciation & Amortization" values={periodsData.map(p => p.depreciationExpense)} indent={20} />}
                        {periodsData.some(p => p.opexOther > 0) && <RowWithPercent label="Other Operating Expenses" values={periodsData.map(p => p.opexOther)} indent={20} />}
                        <RowWithPercent label="Total Operating Expenses" values={periodsData.map(p => p.totalOpex)} bold />
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 90px 60px)`, gap: '4px', padding: '10px 8px', background: '#dbeafe', borderRadius: '4px', margin: '8px 0', fontWeight: '700', color: '#1e40af' }}>
                          <div>Operating Income</div>
                          {periodsData.map((p, i) => {
                            const pct = p.revenue > 0 ? (p.operatingIncome / p.revenue) * 100 : 0;
                            return (
                              <div key={i} style={{ display: 'contents' }}>
                                <div style={{ textAlign: 'right' }}>${(p.operatingIncome / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                                <div style={{ textAlign: 'right', fontSize: '12px' }}>{pct.toFixed(1)}%</div>
                              </div>
                            );
                          })}
                        </div>
                        {periodsData.some(p => p.interestExpense > 0 || p.nonOperatingIncome > 0 || p.extraordinaryItems !== 0) && (
                          <>
                            <div style={{ margin: '12px 0 4px', fontSize: '14px', fontWeight: '600', color: '#475569' }}>Other Income/(Expense)</div>
                            {periodsData.some(p => p.interestExpense > 0) && <RowWithPercent label="Interest Expense" values={periodsData.map(p => -p.interestExpense)} indent={20} />}
                            {periodsData.some(p => p.nonOperatingIncome > 0) && <RowWithPercent label="Non-Operating Income" values={periodsData.map(p => p.nonOperatingIncome)} indent={20} />}
                            {periodsData.some(p => p.extraordinaryItems !== 0) && <RowWithPercent label="Extraordinary Items" values={periodsData.map(p => p.extraordinaryItems)} indent={20} />}
                          </>
                        )}
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${periodsData.length}, 90px 60px)`, gap: '4px', padding: '12px 8px', background: '#dcfce7', borderRadius: '4px', margin: '12px 0 0', fontWeight: '700', fontSize: '15px' }}>
                          <div style={{ color: '#166534' }}>Net Income</div>
                          {periodsData.map((p, i) => {
                            const pct = p.revenue > 0 ? (p.netIncome / p.revenue) * 100 : 0;
                            return (
                              <div key={i} style={{ display: 'contents' }}>
                                <div style={{ textAlign: 'right', color: p.netIncome >= 0 ? '#166534' : '#991b1b' }}>
                                  {p.netIncome >= 0 ? '$' : '($'}{(Math.abs(p.netIncome) / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K{p.netIncome < 0 ? ')' : ''}
                                </div>
                                <div style={{ textAlign: 'right', fontSize: '12px', color: p.netIncome >= 0 ? '#166534' : '#991b1b' }}>{pct.toFixed(1)}%</div>
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    </div>
                  );
                }
                
                const revenue = periodMonths.reduce((sum, m) => sum + (m.revenue || 0), 0);
                
                const cogsPayroll = periodMonths.reduce((sum, m) => sum + (m.cogsPayroll || 0), 0);
                const cogsOwnerPay = periodMonths.reduce((sum, m) => sum + (m.cogsOwnerPay || 0), 0);
                const cogsContractors = periodMonths.reduce((sum, m) => sum + (m.cogsContractors || 0), 0);
                const cogsMaterials = periodMonths.reduce((sum, m) => sum + (m.cogsMaterials || 0), 0);
                const cogsCommissions = periodMonths.reduce((sum, m) => sum + (m.cogsCommissions || 0), 0);
                const cogsOther = periodMonths.reduce((sum, m) => sum + (m.cogsOther || 0), 0);
                const cogs = cogsPayroll + cogsOwnerPay + cogsContractors + cogsMaterials + cogsCommissions + cogsOther;
                
                const grossProfit = revenue - cogs;
                
                const opexPayroll = periodMonths.reduce((sum, m) => sum + (m.opexPayroll || 0), 0);
                const ownersBasePay = periodMonths.reduce((sum, m) => sum + (m.ownersBasePay || 0), 0);
                const ownersRetirement = periodMonths.reduce((sum, m) => sum + (m.ownersRetirement || 0), 0);
                const professionalServices = periodMonths.reduce((sum, m) => sum + (m.professionalServices || 0), 0);
                const rentLease = periodMonths.reduce((sum, m) => sum + (m.rentLease || 0), 0);
                const utilities = periodMonths.reduce((sum, m) => sum + (m.utilities || 0), 0);
                const equipment = periodMonths.reduce((sum, m) => sum + (m.equipment || 0), 0);
                const travel = periodMonths.reduce((sum, m) => sum + (m.travel || 0), 0);
                const insurance = periodMonths.reduce((sum, m) => sum + (m.insurance || 0), 0);
                const opexSalesMarketing = periodMonths.reduce((sum, m) => sum + (m.opexSalesMarketing || 0), 0);
                const contractorsDistribution = periodMonths.reduce((sum, m) => sum + (m.contractorsDistribution || 0), 0);
                const depreciationExpense = periodMonths.reduce((sum, m) => sum + (m.depreciationExpense || 0), 0);
                const opexOther = periodMonths.reduce((sum, m) => sum + (m.opexOther || 0), 0);
                
                const totalOpex = opexPayroll + ownersBasePay + ownersRetirement + professionalServices + 
                                 rentLease + utilities + equipment + travel + insurance + 
                                 opexSalesMarketing + contractorsDistribution + depreciationExpense + opexOther;
                
                const operatingIncome = grossProfit - totalOpex;
                
                const interestExpense = periodMonths.reduce((sum, m) => sum + (m.interestExpense || 0), 0);
                const nonOperatingIncome = periodMonths.reduce((sum, m) => sum + (m.nonOperatingIncome || 0), 0);
                const extraordinaryItems = periodMonths.reduce((sum, m) => sum + (m.extraordinaryItems || 0), 0);
                
                const netIncome = operatingIncome - interestExpense + nonOperatingIncome + extraordinaryItems;
                
                const calcPercent = (value: number) => revenue > 0 ? ((value / revenue) * 100).toFixed(1) + '%' : '0.0%';
                
                return (
                  <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                      <div style={{ marginBottom: '32px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                        <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Common Size Income Statement</h2>
                        <div style={{ fontSize: '14px', color: '#64748b' }}>For the Period: {periodLabel}</div>
                      </div>

                      {/* Header Row */}
                      <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '12px 0', borderBottom: '2px solid #1e293b', marginBottom: '16px', fontWeight: '600', color: '#1e293b' }}>
                        <div>Line Item</div>
                        <div style={{ textAlign: 'right' }}>Amount</div>
                        <div style={{ textAlign: 'right' }}>% of Revenue</div>
                      </div>

                      {/* Revenue */}
                      <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '8px 0', borderBottom: '1px solid #e2e8f0', fontWeight: '600' }}>
                        <div style={{ color: '#1e293b' }}>Revenue</div>
                        <div style={{ textAlign: 'right', color: '#1e293b' }}>${revenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                        <div style={{ textAlign: 'right', color: '#1e293b' }}>100.0%</div>
                      </div>

                      {/* COGS */}
                      <div style={{ marginTop: '16px' }}>
                        <div style={{ fontWeight: '600', color: '#475569', marginBottom: '8px', fontSize: '14px' }}>Cost of Goods Sold</div>
                        {cogsPayroll > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>COGS - Payroll</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${cogsPayroll.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(cogsPayroll)}</div>
                          </div>
                        )}
                        {cogsOwnerPay > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>COGS - Owner Pay</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${cogsOwnerPay.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(cogsOwnerPay)}</div>
                          </div>
                        )}
                        {cogsContractors > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>COGS - Contractors</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${cogsContractors.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(cogsContractors)}</div>
                          </div>
                        )}
                        {cogsMaterials > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>COGS - Materials</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${cogsMaterials.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(cogsMaterials)}</div>
                          </div>
                        )}
                        {cogsCommissions > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>COGS - Commissions</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${cogsCommissions.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(cogsCommissions)}</div>
                          </div>
                        )}
                        {cogsOther > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>COGS - Other</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${cogsOther.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(cogsOther)}</div>
                          </div>
                        )}
                        <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '8px 0', borderTop: '1px solid #cbd5e1', marginTop: '4px', fontWeight: '600' }}>
                          <div style={{ color: '#475569' }}>Total COGS</div>
                          <div style={{ textAlign: 'right', color: '#475569' }}>${cogs.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                          <div style={{ textAlign: 'right', color: '#475569' }}>{calcPercent(cogs)}</div>
                        </div>
                      </div>

                      {/* Gross Profit */}
                      <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '12px 8px', background: '#dbeafe', borderRadius: '6px', margin: '16px 0', fontWeight: '700', color: '#1e40af' }}>
                        <div>Gross Profit</div>
                        <div style={{ textAlign: 'right' }}>${grossProfit.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                        <div style={{ textAlign: 'right' }}>{calcPercent(grossProfit)}</div>
                      </div>

                      {/* Operating Expenses */}
                      <div style={{ marginTop: '16px' }}>
                        <div style={{ fontWeight: '600', color: '#475569', marginBottom: '8px', fontSize: '14px' }}>Operating Expenses</div>
                        {opexPayroll > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>Payroll</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${opexPayroll.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(opexPayroll)}</div>
                          </div>
                        )}
                        {ownersBasePay > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>Owner's Base Pay</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${ownersBasePay.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(ownersBasePay)}</div>
                          </div>
                        )}
                        {ownersRetirement > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>Owner's Retirement</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${ownersRetirement.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(ownersRetirement)}</div>
                          </div>
                        )}
                        {professionalServices > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>Professional Services</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${professionalServices.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(professionalServices)}</div>
                          </div>
                        )}
                        {rentLease > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>Rent/Lease</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${rentLease.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(rentLease)}</div>
                          </div>
                        )}
                        {utilities > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>Utilities</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${utilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(utilities)}</div>
                          </div>
                        )}
                        {equipment > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>Equipment</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${equipment.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(equipment)}</div>
                          </div>
                        )}
                        {travel > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>Travel</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${travel.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(travel)}</div>
                          </div>
                        )}
                        {insurance > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>Insurance</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${insurance.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(insurance)}</div>
                          </div>
                        )}
                        {opexSalesMarketing > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>Sales & Marketing</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${opexSalesMarketing.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(opexSalesMarketing)}</div>
                          </div>
                        )}
                        {contractorsDistribution > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>Contractors - Distribution</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${contractorsDistribution.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(contractorsDistribution)}</div>
                          </div>
                        )}
                        {depreciationExpense > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>Depreciation & Amortization</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${depreciationExpense.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(depreciationExpense)}</div>
                          </div>
                        )}
                        {opexOther > 0 && (
                          <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                            <div style={{ color: '#64748b' }}>Other Operating Expenses</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>${opexOther.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                            <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(opexOther)}</div>
                          </div>
                        )}
                        <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '8px 0', borderTop: '1px solid #cbd5e1', marginTop: '4px', fontWeight: '600' }}>
                          <div style={{ color: '#475569' }}>Total Operating Expenses</div>
                          <div style={{ textAlign: 'right', color: '#475569' }}>${totalOpex.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                          <div style={{ textAlign: 'right', color: '#475569' }}>{calcPercent(totalOpex)}</div>
                        </div>
                      </div>

                      {/* Operating Income */}
                      <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '12px 8px', background: '#dbeafe', borderRadius: '6px', margin: '16px 0', fontWeight: '700', color: '#1e40af' }}>
                        <div>Operating Income</div>
                        <div style={{ textAlign: 'right' }}>${operatingIncome.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                        <div style={{ textAlign: 'right' }}>{calcPercent(operatingIncome)}</div>
                      </div>

                      {/* Other Income/Expense */}
                      {(interestExpense > 0 || nonOperatingIncome > 0 || extraordinaryItems !== 0) && (
                        <div style={{ marginTop: '16px' }}>
                          <div style={{ fontWeight: '600', color: '#475569', marginBottom: '8px', fontSize: '14px' }}>Other Income/(Expense)</div>
                          {interestExpense > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>Interest Expense</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>(${ interestExpense.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })})</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>({calcPercent(interestExpense)})</div>
                            </div>
                          )}
                          {nonOperatingIncome > 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>Non-Operating Income</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>${nonOperatingIncome.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>{calcPercent(nonOperatingIncome)}</div>
                            </div>
                          )}
                          {extraordinaryItems !== 0 && (
                            <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '4px 0 4px 20px', fontSize: '13px' }}>
                              <div style={{ color: '#64748b' }}>Extraordinary Items</div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>
                                {extraordinaryItems >= 0 ? '$' : '($'}{Math.abs(extraordinaryItems).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}{extraordinaryItems < 0 ? ')' : ''}
                              </div>
                              <div style={{ textAlign: 'right', color: '#64748b' }}>
                                {extraordinaryItems >= 0 ? calcPercent(extraordinaryItems) : `(${calcPercent(Math.abs(extraordinaryItems))})`}
                              </div>
                            </div>
                          )}
                        </div>
                      )}

                      {/* Net Income */}
                      <div style={{ display: 'grid', gridTemplateColumns: '1fr 0.7fr 0.7fr', gap: '16px', padding: '16px 8px', background: netIncome >= 0 ? '#dcfce7' : '#fee2e2', borderRadius: '6px', marginTop: '24px', fontWeight: '700', fontSize: '16px', color: netIncome >= 0 ? '#166534' : '#991b1b' }}>
                        <div>Net Income</div>
                        <div style={{ textAlign: 'right' }}>
                          {netIncome >= 0 ? '$' : '($'}{Math.abs(netIncome).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}{netIncome < 0 ? ')' : ''}
                        </div>
                        <div style={{ textAlign: 'right' }}>{calcPercent(netIncome)}</div>
                      </div>
                  </div>
                );
              }
              
              // BALANCE SHEET - Latest point in time
              else if (statementType === 'balance-sheet') {
                // Check if showing multiple periods side-by-side
                if (displayPeriods.length > 1) {
                  const balanceData = displayPeriods.map(p => {
                    const latest = p.months[p.months.length - 1];
                    const cash = latest.cash || 0;
                    const ar = latest.ar || 0;
                    const inventory = latest.inventory || 0;
                    const otherCA = latest.otherCA || 0;
                    const tca = cash + ar + inventory + otherCA;
                    const fixedAssets = latest.fixedAssets || 0;
                    const intangibleAssets = latest.intangibleAssets || 0;
                    const otherNonCurrentAssets = latest.otherNonCurrentAssets || 0;
                    const nonCurrentAssets = fixedAssets + intangibleAssets + otherNonCurrentAssets;
                    const totalAssets = tca + nonCurrentAssets;
                    const ap = latest.ap || 0;
                    const shortTermDebt = latest.shortTermDebt || 0;
                    const currentPortionLTD = latest.currentPortionLTD || 0;
                    const otherCurrentLiabilities = latest.otherCurrentLiabilities || 0;
                    const totalCurrentLiabilities = ap + shortTermDebt + currentPortionLTD + otherCurrentLiabilities;
                    const ltd = latest.ltd || 0;
                    const otherLongTermLiabilities = latest.otherLongTermLiabilities || 0;
                    const totalLongTermLiabilities = ltd + otherLongTermLiabilities;
                    const totalLiabilities = totalCurrentLiabilities + totalLongTermLiabilities;
                    const paidInCapital = latest.paidInCapital || 0;
                    const retainedEarnings = latest.retainedEarnings || 0;
                    const totalEquity = paidInCapital + retainedEarnings;
                    return { label: p.label, cash, ar, inventory, otherCA, tca, fixedAssets, intangibleAssets, otherNonCurrentAssets, nonCurrentAssets, totalAssets, ap, shortTermDebt, currentPortionLTD, otherCurrentLiabilities, totalCurrentLiabilities, ltd, otherLongTermLiabilities, totalLongTermLiabilities, totalLiabilities, paidInCapital, retainedEarnings, totalEquity };
                  });
                  const Row = ({ label, values, indent = 0, bold = false }: any) => (
                    <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: bold ? '14px' : '13px', fontWeight: bold ? '600' : 'normal' }}>
                      <div style={{ color: bold ? '#475569' : '#64748b', paddingLeft: `${indent}px` }}>{label}</div>
                      {values.map((v: number, i: number) => (
                        <div key={i} style={{ textAlign: 'right', color: bold ? '#475569' : '#64748b' }}>${(v / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>
                      ))}
                    </div>
                  );
                  return (
                    <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', overflowX: 'auto' }}>
                      <div style={{ marginBottom: '24px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                        <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Comparative Balance Sheet</h2>
                        <div style={{ fontSize: '14px', color: '#64748b' }}>{periodLabel} - {statementDisplay === 'monthly' ? 'Monthly' : statementDisplay === 'quarterly' ? 'Quarterly' : 'Annual'}</div>
                      </div>
                      <div style={{ minWidth: `${200 + (balanceData.length * 110)}px` }}>
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '12px 0', borderBottom: '2px solid #1e293b', fontWeight: '600', color: '#1e293b' }}>
                          <div>Line Item</div>
                          {balanceData.map((p, i) => <div key={i} style={{ textAlign: 'right' }}>{p.label}</div>)}
                        </div>
                        <div style={{ margin: '8px 0 4px', fontSize: '15px', fontWeight: '700', color: '#1e293b' }}>ASSETS</div>
                        <div style={{ margin: '8px 0 4px', fontSize: '14px', fontWeight: '600', color: '#475569' }}>Current Assets</div>
                        {balanceData.some(p => p.cash > 0) && <Row label="Cash & Cash Equivalents" values={balanceData.map(p => p.cash)} indent={20} />}
                        {balanceData.some(p => p.ar > 0) && <Row label="Accounts Receivable" values={balanceData.map(p => p.ar)} indent={20} />}
                        {balanceData.some(p => p.inventory > 0) && <Row label="Inventory" values={balanceData.map(p => p.inventory)} indent={20} />}
                        {balanceData.some(p => p.otherCA > 0) && <Row label="Other Current Assets" values={balanceData.map(p => p.otherCA)} indent={20} />}
                        <Row label="Total Current Assets" values={balanceData.map(p => p.tca)} bold />
                        <div style={{ margin: '8px 0 4px', fontSize: '14px', fontWeight: '600', color: '#475569' }}>Non-Current Assets</div>
                        {balanceData.some(p => p.fixedAssets > 0) && <Row label="Property, Plant & Equipment" values={balanceData.map(p => p.fixedAssets)} indent={20} />}
                        {balanceData.some(p => p.intangibleAssets > 0) && <Row label="Intangible Assets" values={balanceData.map(p => p.intangibleAssets)} indent={20} />}
                        {balanceData.some(p => p.otherNonCurrentAssets > 0) && <Row label="Other Non-Current Assets" values={balanceData.map(p => p.otherNonCurrentAssets)} indent={20} />}
                        <Row label="Total Non-Current Assets" values={balanceData.map(p => p.nonCurrentAssets)} bold />
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '10px 8px', background: '#dbeafe', borderRadius: '4px', margin: '8px 0', fontWeight: '700', color: '#1e40af' }}>
                          <div>TOTAL ASSETS</div>
                          {balanceData.map((p, i) => <div key={i} style={{ textAlign: 'right' }}>${(p.totalAssets / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>)}
                        </div>
                        <div style={{ margin: '12px 0 4px', fontSize: '15px', fontWeight: '700', color: '#1e293b' }}>LIABILITIES</div>
                        <div style={{ margin: '8px 0 4px', fontSize: '14px', fontWeight: '600', color: '#475569' }}>Current Liabilities</div>
                        {balanceData.some(p => p.ap > 0) && <Row label="Accounts Payable" values={balanceData.map(p => p.ap)} indent={20} />}
                        {balanceData.some(p => p.shortTermDebt > 0) && <Row label="Short-Term Debt" values={balanceData.map(p => p.shortTermDebt)} indent={20} />}
                        {balanceData.some(p => p.currentPortionLTD > 0) && <Row label="Current Portion of LT Debt" values={balanceData.map(p => p.currentPortionLTD)} indent={20} />}
                        {balanceData.some(p => p.otherCurrentLiabilities > 0) && <Row label="Other Current Liabilities" values={balanceData.map(p => p.otherCurrentLiabilities)} indent={20} />}
                        <Row label="Total Current Liabilities" values={balanceData.map(p => p.totalCurrentLiabilities)} bold />
                        <div style={{ margin: '8px 0 4px', fontSize: '14px', fontWeight: '600', color: '#475569' }}>Long-Term Liabilities</div>
                        {balanceData.some(p => p.ltd > 0) && <Row label="Long-Term Debt" values={balanceData.map(p => p.ltd)} indent={20} />}
                        {balanceData.some(p => p.otherLongTermLiabilities > 0) && <Row label="Other Long-Term Liabilities" values={balanceData.map(p => p.otherLongTermLiabilities)} indent={20} />}
                        <Row label="Total Long-Term Liabilities" values={balanceData.map(p => p.totalLongTermLiabilities)} bold />
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '10px 8px', background: '#fef3c7', borderRadius: '4px', margin: '8px 0', fontWeight: '700', color: '#92400e' }}>
                          <div>TOTAL LIABILITIES</div>
                          {balanceData.map((p, i) => <div key={i} style={{ textAlign: 'right' }}>${(p.totalLiabilities / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K</div>)}
                        </div>
                        <div style={{ margin: '12px 0 4px', fontSize: '15px', fontWeight: '700', color: '#1e293b' }}>EQUITY</div>
                        {balanceData.some(p => p.paidInCapital > 0) && <Row label="Paid-in Capital" values={balanceData.map(p => p.paidInCapital)} indent={20} />}
                        {balanceData.some(p => p.retainedEarnings !== 0) && (
                          <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '4px 0', fontSize: '13px' }}>
                            <div style={{ color: '#64748b', paddingLeft: '20px' }}>Retained Earnings</div>
                            {balanceData.map((p, i) => (
                              <div key={i} style={{ textAlign: 'right', color: '#64748b' }}>
                                {p.retainedEarnings >= 0 ? '$' : '($'}{(Math.abs(p.retainedEarnings) / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K{p.retainedEarnings < 0 ? ')' : ''}
                              </div>
                            ))}
                          </div>
                        )}
                        <div style={{ display: 'grid', gridTemplateColumns: `180px repeat(${balanceData.length}, 110px)`, gap: '4px', padding: '12px 8px', background: '#dcfce7', borderRadius: '4px', margin: '12px 0 0', fontWeight: '700', fontSize: '15px' }}>
                          <div style={{ color: '#166534' }}>TOTAL EQUITY</div>
                          {balanceData.map((p, i) => (
                            <div key={i} style={{ textAlign: 'right', color: p.totalEquity >= 0 ? '#166534' : '#991b1b' }}>
                              {p.totalEquity >= 0 ? '$' : '($'}{(Math.abs(p.totalEquity) / 1000).toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}K{p.totalEquity < 0 ? ')' : ''}
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  );
                }
                
                // For balance sheet, use the latest month's values
                const cash = latestMonth.cash || 0;
                const ar = latestMonth.ar || 0;
                const inventory = latestMonth.inventory || 0;
                const otherCA = latestMonth.otherCA || 0;
                const tca = cash + ar + inventory + otherCA;
                
                const fixedAssets = latestMonth.fixedAssets || 0;
                const intangibleAssets = latestMonth.intangibleAssets || 0;
                const otherNonCurrentAssets = latestMonth.otherNonCurrentAssets || 0;
                const nonCurrentAssets = fixedAssets + intangibleAssets + otherNonCurrentAssets;
                
                const totalAssets = tca + nonCurrentAssets;
                
                const ap = latestMonth.ap || 0;
                const shortTermDebt = latestMonth.shortTermDebt || 0;
                const currentPortionLTD = latestMonth.currentPortionLTD || 0;
                const otherCurrentLiabilities = latestMonth.otherCurrentLiabilities || 0;
                const totalCurrentLiabilities = ap + shortTermDebt + currentPortionLTD + otherCurrentLiabilities;
                
                const ltd = latestMonth.ltd || 0;
                const otherLongTermLiabilities = latestMonth.otherLongTermLiabilities || 0;
                const totalLongTermLiabilities = ltd + otherLongTermLiabilities;
                
                const totalLiabilities = totalCurrentLiabilities + totalLongTermLiabilities;
                
                const paidInCapital = latestMonth.paidInCapital || 0;
                const retainedEarnings = latestMonth.retainedEarnings || 0;
                const totalEquity = paidInCapital + retainedEarnings;
                
                const totalLAndE = totalLiabilities + totalEquity;
                
                const latestDate = new Date(latestMonth.date || latestMonth.month);
                const asOfDate = latestDate.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });
                
                return (
                  <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                    <div style={{ marginBottom: '32px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                      <h2 style={{ fontSize: '24px', fontWeight: '700', color: '#1e293b', marginBottom: '4px' }}>Balance Sheet</h2>
                      <div style={{ fontSize: '14px', color: '#64748b' }}>As of {asOfDate} (Period: {periodLabel})</div>
                    </div>

                    {/* ASSETS */}
                    <div style={{ marginBottom: '32px' }}>
                      <div style={{ fontWeight: '700', fontSize: '18px', color: '#1e293b', marginBottom: '12px' }}>ASSETS</div>
                      
                      {/* Current Assets */}
                      <div style={{ marginBottom: '16px' }}>
                        <div style={{ fontWeight: '600', color: '#475569', marginBottom: '8px' }}>Current Assets</div>
                        {cash > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#64748b' }}>Cash & Cash Equivalents</span>
                            <span style={{ color: '#64748b' }}>${cash.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {ar > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#64748b' }}>Accounts Receivable</span>
                            <span style={{ color: '#64748b' }}>${ar.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {inventory > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#64748b' }}>Inventory</span>
                            <span style={{ color: '#64748b' }}>${inventory.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {otherCA > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#64748b' }}>Other Current Assets</span>
                            <span style={{ color: '#64748b' }}>${otherCA.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0 8px 10px', borderTop: '1px solid #cbd5e1', marginTop: '4px', fontWeight: '600' }}>
                          <span style={{ color: '#475569' }}>Total Current Assets</span>
                          <span style={{ color: '#475569' }}>${tca.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      </div>

                      {/* Non-Current Assets */}
                      <div style={{ marginBottom: '16px' }}>
                        <div style={{ fontWeight: '600', color: '#475569', marginBottom: '8px' }}>Non-Current Assets</div>
                        {fixedAssets > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#64748b' }}>Property, Plant & Equipment</span>
                            <span style={{ color: '#64748b' }}>${fixedAssets.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {intangibleAssets > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#64748b' }}>Intangible Assets</span>
                            <span style={{ color: '#64748b' }}>${intangibleAssets.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {otherNonCurrentAssets > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#64748b' }}>Other Non-Current Assets</span>
                            <span style={{ color: '#64748b' }}>${otherNonCurrentAssets.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0 8px 10px', borderTop: '1px solid #cbd5e1', marginTop: '4px', fontWeight: '600' }}>
                          <span style={{ color: '#475569' }}>Total Non-Current Assets</span>
                          <span style={{ color: '#475569' }}>${nonCurrentAssets.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      </div>

                      {/* TOTAL ASSETS */}
                      <div style={{ background: '#dbeafe', padding: '12px', borderRadius: '8px' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                          <span style={{ fontWeight: '700', fontSize: '16px', color: '#1e40af' }}>TOTAL ASSETS</span>
                          <span style={{ fontWeight: '700', fontSize: '16px', color: '#1e40af' }}>
                            ${totalAssets.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                          </span>
                        </div>
                      </div>
                    </div>

                    {/* LIABILITIES */}
                    <div style={{ marginBottom: '32px' }}>
                      <div style={{ fontWeight: '700', fontSize: '18px', color: '#1e293b', marginBottom: '12px' }}>LIABILITIES</div>
                      
                      {/* Current Liabilities */}
                      <div style={{ marginBottom: '16px' }}>
                        <div style={{ fontWeight: '600', color: '#475569', marginBottom: '8px' }}>Current Liabilities</div>
                        {ap > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#64748b' }}>Accounts Payable</span>
                            <span style={{ color: '#64748b' }}>${ap.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {shortTermDebt > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#64748b' }}>Short-Term Debt</span>
                            <span style={{ color: '#64748b' }}>${shortTermDebt.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {currentPortionLTD > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#64748b' }}>Current Portion of LT Debt</span>
                            <span style={{ color: '#64748b' }}>${currentPortionLTD.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {otherCurrentLiabilities > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#64748b' }}>Other Current Liabilities</span>
                            <span style={{ color: '#64748b' }}>${otherCurrentLiabilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0 8px 10px', borderTop: '1px solid #cbd5e1', marginTop: '4px', fontWeight: '600' }}>
                          <span style={{ color: '#475569' }}>Total Current Liabilities</span>
                          <span style={{ color: '#475569' }}>${totalCurrentLiabilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      </div>

                      {/* Long-Term Liabilities */}
                      <div style={{ marginBottom: '16px' }}>
                        <div style={{ fontWeight: '600', color: '#475569', marginBottom: '8px' }}>Long-Term Liabilities</div>
                        {ltd > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#64748b' }}>Long-Term Debt</span>
                            <span style={{ color: '#64748b' }}>${ltd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        {otherLongTermLiabilities > 0 && (
                          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                            <span style={{ color: '#64748b' }}>Other Long-Term Liabilities</span>
                            <span style={{ color: '#64748b' }}>${otherLongTermLiabilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                          </div>
                        )}
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '8px 0 8px 10px', borderTop: '1px solid #cbd5e1', marginTop: '4px', fontWeight: '600' }}>
                          <span style={{ color: '#475569' }}>Total Long-Term Liabilities</span>
                          <span style={{ color: '#475569' }}>${totalLongTermLiabilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      </div>

                      {/* TOTAL LIABILITIES */}
                      <div style={{ background: '#fef3c7', padding: '12px', borderRadius: '8px' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                          <span style={{ fontWeight: '700', fontSize: '16px', color: '#92400e' }}>TOTAL LIABILITIES</span>
                          <span style={{ fontWeight: '700', fontSize: '16px', color: '#92400e' }}>
                            ${totalLiabilities.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                          </span>
                        </div>
                      </div>
                    </div>

                    {/* EQUITY */}
                    <div style={{ marginBottom: '32px' }}>
                      <div style={{ fontWeight: '700', fontSize: '18px', color: '#1e293b', marginBottom: '12px' }}>EQUITY</div>
                      {paidInCapital > 0 && (
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                          <span style={{ color: '#64748b' }}>Paid-in Capital</span>
                          <span style={{ color: '#64748b' }}>${paidInCapital.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
                        </div>
                      )}
                      {retainedEarnings !== 0 && (
                        <div style={{ display: 'flex', justifyContent: 'space-between', padding: '4px 0 4px 20px', fontSize: '14px' }}>
                          <span style={{ color: '#64748b' }}>Retained Earnings</span>
                          <span style={{ color: '#64748b' }}>
                            {retainedEarnings >= 0 ? '$' : '($'}{Math.abs(retainedEarnings).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}{retainedEarnings < 0 ? ')' : ''}
                          </span>
                        </div>
                      )}

                      {/* TOTAL EQUITY */}
                      <div style={{ background: '#dcfce7', padding: '12px', borderRadius: '8px', marginTop: '8px' }}>
                        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                          <span style={{ fontWeight: '700', fontSize: '16px', color: '#166534' }}>TOTAL EQUITY</span>
                          <span style={{ fontWeight: '700', fontSize: '16px', color: '#166534' }}>
                            {totalEquity >= 0 ? '$' : '($'}{Math.abs(totalEquity).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}{totalEquity < 0 ? ')' : ''}
                          </span>
                        </div>
                      </div>
                    </div>

                    {/* TOTAL LIABILITIES & EQUITY */}
                    <div style={{ background: '#f1f5f9', padding: '16px', borderRadius: '8px', marginTop: '32px' }}>
                      <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '4px' }}>
                        <span style={{ fontWeight: '700', fontSize: '18px', color: '#1e293b' }}>TOTAL LIABILITIES & EQUITY</span>
                        <span style={{ fontWeight: '700', fontSize: '18px', color: '#1e293b' }}>
                          ${totalLAndE.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </span>
                      </div>
                      {Math.abs(totalAssets - totalLAndE) > 0.01 && (
                        <div style={{ fontSize: '12px', color: '#ef4444', marginTop: '8px', textAlign: 'right' }}>
                          ⚠️ Balance check: Assets - (Liabilities + Equity) = ${(totalAssets - totalLAndE).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
                        </div>
                      )}
                    </div>
                  </div>
                );
              }
            }
            
            else {
              return (
                <div style={{ background: 'white', borderRadius: '12px', padding: '48px 32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', minHeight: '400px', textAlign: 'center' }}>
                  <div style={{ fontSize: '18px', fontWeight: '600', color: '#64748b', marginBottom: '12px' }}>
                    📊 Financial Statement Viewer
                  </div>
                  <p style={{ fontSize: '14px', color: '#94a3b8', maxWidth: '600px', margin: '0 auto' }}>
                    Select options above to view financial statements.
                  </p>
                </div>
              );
            }
          })()}
          </>
          )}

          {/* Line of Business Reporting Tab */}
          {financialStatementsTab === 'line-of-business' && (
            <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
              <div style={{ marginBottom: '24px' }}>
                <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '16px' }}>Line of Business Reporting</h2>
                <p style={{ fontSize: '14px', color: '#64748b', marginBottom: '24px' }}>
                  Line of Business reporting is currently only available for QuickBooks data with class tracking enabled.
                </p>
              </div>

              <div style={{ background: '#f8fafc', border: '2px dashed #cbd5e1', borderRadius: '8px', padding: '48px 24px', textAlign: 'center' }}>
                <div style={{ fontSize: '48px', marginBottom: '16px' }}>📊</div>
                <div style={{ fontSize: '18px', fontWeight: '600', color: '#1e293b', marginBottom: '8px' }}>
                  QuickBooks Data Required
                </div>
                <p style={{ fontSize: '14px', color: '#64748b', maxWidth: '500px', margin: '0 auto' }}>
                  To use Line of Business reporting, please connect your QuickBooks account and ensure class tracking is enabled for your company.
                </p>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Financial Statements View - No Data Available */}
      {currentView === 'financial-statements' && selectedCompanyId && !qbRawData && monthly.length === 0 && (
        <div style={{ maxWidth: '1800px', margin: '0 auto', padding: '32px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px' }}>
            <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', margin: 0 }}>Financial Statements</h1>
            {companyName && <div style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b' }}>{companyName}</div>}
          </div>
          <div style={{ background: 'white', borderRadius: '12px', padding: '48px 32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', minHeight: '400px', textAlign: 'center', marginTop: '32px' }}>
            <div style={{ fontSize: '18px', fontWeight: '600', color: '#64748b', marginBottom: '12px' }}>
              📊 No Financial Data Available
            </div>
            <p style={{ fontSize: '14px', color: '#94a3b8', maxWidth: '600px', margin: '0 auto' }}>
              Please import financial data via CSV or sync from QuickBooks to view financial statements.
            </p>
          </div>
        </div>
      )}

      {/* Profile View */}
      {currentView === 'admin' && adminDashboardTab === 'profile' && selectedCompanyId && currentUser?.role === 'consultant' && (
        <div style={{ maxWidth: '1400px', margin: '0 auto', padding: '32px' }}>
          <style>{`
            @media print {
              @page {
                margin: 0.75in;
              }
              
              .page-break {
                page-break-after: always;
                break-after: page;
              }
              
              .print-page-header {
                display: flex !important;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 20px;
                padding-bottom: 12px;
                border-bottom: 2px solid #1e293b;
              }
              
              aside, header, .no-print {
                display: none !important;
              }
              
              body {
                background: white !important;
              }
              
              * {
                box-shadow: none !important;
                border-radius: 0 !important;
              }
            }
            
            .print-page-header {
              display: none;
            }
          `}</style>
          
          <div className="no-print" style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>
            <div style={{ flex: 1 }}>
              <div style={{ marginBottom: '8px' }}>
                <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', margin: 0 }}>Company Profile</h1>
              </div>
              <p style={{ fontSize: '14px', color: '#64748b', margin: 0 }}>
                This summary was constructed from the company's past three years of financial statements.
              </p>
            </div>
            <button
              onClick={() => window.print()}
              style={{ 
                padding: '12px 24px', 
                background: '#667eea', 
                color: 'white', 
                border: 'none', 
                borderRadius: '8px', 
                fontSize: '14px', 
                fontWeight: '600', 
                cursor: 'pointer',
                boxShadow: '0 2px 6px rgba(102, 126, 234, 0.3)'
              }}
            >
              🖨️ Print Profile
            </button>
          </div>

          {(() => {
            // Get or create profile for this company
            let profile = companyProfiles.find(p => p.companyId === selectedCompanyId);
            
            if (!profile) {
              profile = {
                companyId: selectedCompanyId,
                legalStructure: '',
                businessStatus: '',
                ownership: '',
                workforce: '',
                keyAdvisors: '',
                specialNotes: '',
                qoeNotes: '',
                disclosures: {
                  bankruptcies: 'None',
                  liens: 'None',
                  contracts: 'None',
                  lawsuits: 'None',
                  mostFavoredNation: 'None',
                  equityControl: 'None',
                  rightOfFirstRefusal: 'None',
                  shareholderProtections: 'None',
                  changeInControl: 'None',
                  regulatoryApprovals: 'None',
                  auditedFinancials: 'No'
                }
              };
            }

            const updateProfile = (updates: Partial<CompanyProfile>) => {
              const updatedProfiles = companyProfiles.filter(p => p.companyId !== selectedCompanyId);
              updatedProfiles.push({ ...profile!, ...updates });
              setCompanyProfiles(updatedProfiles);
            };

            // Get company data
            const ltmData = monthly.length >= 12 ? monthly.slice(-12) : monthly;
            const ltmRev = ltmData.reduce((sum, m) => sum + m.revenue, 0);
            const ltmAssets = ltmData.length > 0 ? ltmData[ltmData.length - 1].totalAssets : 0;
            
            // Get latest 3 years of data for financial statement overview
            const latest = monthly[monthly.length - 1];
            const oneYearAgo = monthly.length >= 13 ? monthly[monthly.length - 13] : null;
            const twoYearsAgo = monthly.length >= 25 ? monthly[monthly.length - 25] : null;

            // Get industry info
            const industry = INDUSTRY_SECTORS.find(i => i.id === company?.industrySector);
            
            // Calculate Last 12 months for ratio table
            // Get up to last 12 trend data points (or fewer if less data available)
            const last12Trends = trendData.slice(-12);
            // Get the corresponding months for these trend points
            // trendData starts at month index 12, so we need to match up the months
            const trendStartIndex = Math.max(0, monthly.length - trendData.length);
            const last12Months = monthly.slice(trendStartIndex + Math.max(0, trendData.length - 12));

            return (
              <>
                {/* Section 1: Business Profile */}
                <div className="page-break" style={{ background: 'white', borderRadius: '12px', padding: '32px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <div className="print-page-header">
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                      <div style={{ fontSize: '16px', fontWeight: '700', color: '#1e293b' }}>{company?.name}</div>
                      <div style={{ fontSize: '13px', color: '#64748b' }}>{new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</div>
                    </div>
                  </div>
                  <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '24px', borderBottom: '2px solid #e2e8f0', paddingBottom: '12px' }}>
                    Business Profile
                  </h2>
                  
                  <div style={{ display: 'grid', gridTemplateColumns: '200px 1fr', gap: '16px', marginBottom: '16px' }}>
                    <div style={{ fontWeight: '600', color: '#475569' }}>COMPANY NAME</div>
                    <div style={{ color: '#1e293b' }}>{company?.name || 'N/A'}</div>
                    
                    <div style={{ fontWeight: '600', color: '#475569' }}>LEGAL STRUCTURE</div>
                    <input 
                      type="text" 
                      value={profile.legalStructure} 
                      onChange={(e) => updateProfile({ legalStructure: e.target.value })}
                      placeholder="e.g., C Corp, S Corp, LLC"
                      style={{ padding: '8px 12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    />
                    
                    <div style={{ fontWeight: '600', color: '#475569' }}>BUSINESS STATUS</div>
                    <select
                      value={profile.businessStatus}
                      onChange={(e) => updateProfile({ businessStatus: e.target.value })}
                      style={{ padding: '8px 12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    >
                      <option value="">Select status</option>
                      <option value="ACTIVE">ACTIVE</option>
                      <option value="INACTIVE">INACTIVE</option>
                      <option value="PENDING">PENDING</option>
                    </select>
                    
                    <div style={{ fontWeight: '600', color: '#475569' }}>OWNERSHIP</div>
                    <input 
                      type="text" 
                      value={profile.ownership} 
                      onChange={(e) => updateProfile({ ownership: e.target.value })}
                      placeholder="Owner name(s)"
                      style={{ padding: '8px 12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    />
                    
                    <div style={{ fontWeight: '600', color: '#475569' }}>ADDRESS</div>
                    <div style={{ color: '#1e293b' }}>{company?.location || 'Not set'}</div>
                    
                    <div style={{ fontWeight: '600', color: '#475569' }}>INDUSTRY</div>
                    <div style={{ color: '#1e293b' }}>
                      {industry ? `${industry.id} - ${industry.name}` : 'Not set'}
                    </div>
                    
                    <div style={{ fontWeight: '600', color: '#475569' }}>WORKFORCE</div>
                    <input 
                      type="text" 
                      value={profile.workforce} 
                      onChange={(e) => updateProfile({ workforce: e.target.value })}
                      placeholder="e.g., 3 FT, 1 owner"
                      style={{ padding: '8px 12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    />
                    
                    <div style={{ fontWeight: '600', color: '#475569' }}>LTM REVENUE</div>
                    <div style={{ color: '#1e293b' }}>
                      {ltmRev < 500000 ? 'Under $500K' : `$${(ltmRev / 1000).toFixed(0)}K`}
                    </div>
                    
                    <div style={{ fontWeight: '600', color: '#475569' }}>TOTAL ASSETS</div>
                    <div style={{ color: '#1e293b' }}>
                      ${ltmAssets.toLocaleString()}
                    </div>
                    
                    <div style={{ fontWeight: '600', color: '#475569' }}>KEY ADVISORS</div>
                    <input 
                      type="text" 
                      value={profile.keyAdvisors} 
                      onChange={(e) => updateProfile({ keyAdvisors: e.target.value })}
                      placeholder="Advisor names"
                      style={{ padding: '8px 12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    />
                  </div>
                  
                  <div style={{ marginTop: '24px' }}>
                    <div style={{ fontWeight: '600', color: '#475569', marginBottom: '8px' }}>SPECIAL NOTES</div>
                    <textarea
                      value={profile.specialNotes}
                      onChange={(e) => updateProfile({ specialNotes: e.target.value })}
                      placeholder="Any special notes about sale, buyer requirements, financing, etc."
                      rows={4}
                      style={{ width: '100%', padding: '12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px', fontFamily: 'inherit', resize: 'vertical' }}
                    />
                  </div>
                  
                  <div style={{ marginTop: '16px' }}>
                    <div style={{ fontWeight: '600', color: '#475569', marginBottom: '8px' }}>Quality of Earnings (QoE)</div>
                    <textarea
                      value={profile.qoeNotes}
                      onChange={(e) => updateProfile({ qoeNotes: e.target.value })}
                      placeholder="Notes on revenue quality, recurring vs. non-recurring, cash vs. credit, etc."
                      rows={3}
                      style={{ width: '100%', padding: '12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px', fontFamily: 'inherit', resize: 'vertical' }}
                    />
                  </div>
                </div>

                {/* Section 2: Financial Statement Overview */}
                <div className="page-break" style={{ background: 'white', borderRadius: '12px', padding: '32px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <div className="print-page-header">
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                      <div style={{ fontSize: '16px', fontWeight: '700', color: '#1e293b' }}>{company?.name}</div>
                      <div style={{ fontSize: '13px', color: '#64748b' }}>{new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</div>
                    </div>
                  </div>
                  <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '24px', borderBottom: '2px solid #e2e8f0', paddingBottom: '12px' }}>
                    Financial Statement Overview
                  </h2>
                  
                  <h3 style={{ fontSize: '18px', fontWeight: '600', color: '#475569', marginBottom: '16px' }}>BALANCE SHEET</h3>
                  <div style={{ overflowX: 'auto' }}>
                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                      <thead>
                        <tr style={{ borderBottom: '2px solid #e2e8f0' }}>
                          <th style={{ textAlign: 'left', padding: '12px', fontSize: '14px', fontWeight: '600', color: '#64748b' }}></th>
                          <th style={{ textAlign: 'right', padding: '12px', fontSize: '14px', fontWeight: '600', color: '#64748b' }}>Current</th>
                          <th style={{ textAlign: 'right', padding: '12px', fontSize: '14px', fontWeight: '600', color: '#64748b' }}>Yr End 2024</th>
                          <th style={{ textAlign: 'right', padding: '12px', fontSize: '14px', fontWeight: '600', color: '#64748b' }}>Yr End 2023</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#475569' }}>Total Assets</td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            ${latest ? latest.totalAssets.toLocaleString() : 'N/A'}
                          </td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            ${oneYearAgo ? oneYearAgo.totalAssets.toLocaleString() : 'N/A'}
                          </td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            ${twoYearsAgo ? twoYearsAgo.totalAssets.toLocaleString() : 'N/A'}
                          </td>
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#475569' }}>Total Liabilities</td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            ${latest ? latest.totalLiab.toLocaleString() : 'N/A'}
                          </td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            ${oneYearAgo ? oneYearAgo.totalLiab.toLocaleString() : 'N/A'}
                          </td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            ${twoYearsAgo ? twoYearsAgo.totalLiab.toLocaleString() : 'N/A'}
                          </td>
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#475569' }}>Total Equity</td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            ${latest ? latest.totalEquity.toLocaleString() : 'N/A'}
                          </td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            ${oneYearAgo ? oneYearAgo.totalEquity.toLocaleString() : 'N/A'}
                          </td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            ${twoYearsAgo ? twoYearsAgo.totalEquity.toLocaleString() : 'N/A'}
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                  
                  <h3 style={{ fontSize: '18px', fontWeight: '600', color: '#475569', marginTop: '32px', marginBottom: '16px' }}>INCOME STATEMENT</h3>
                  <div style={{ overflowX: 'auto' }}>
                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                      <thead>
                        <tr style={{ borderBottom: '2px solid #e2e8f0' }}>
                          <th style={{ textAlign: 'left', padding: '12px', fontSize: '14px', fontWeight: '600', color: '#64748b' }}></th>
                          <th style={{ textAlign: 'right', padding: '12px', fontSize: '14px', fontWeight: '600', color: '#64748b' }}>LTM</th>
                          <th style={{ textAlign: 'right', padding: '12px', fontSize: '14px', fontWeight: '600', color: '#64748b' }}>2024</th>
                          <th style={{ textAlign: 'right', padding: '12px', fontSize: '14px', fontWeight: '600', color: '#64748b' }}>2023</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#475569' }}>Revenue</td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            ${ltmRev.toLocaleString()}
                          </td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            ${oneYearAgo ? monthly.slice(-24, -12).reduce((sum, m) => sum + m.revenue, 0).toLocaleString() : 'N/A'}
                          </td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            ${twoYearsAgo ? monthly.slice(-36, -24).reduce((sum, m) => sum + m.revenue, 0).toLocaleString() : 'N/A'}
                          </td>
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#475569' }}>Margin %</td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            {((ltmData.reduce((sum, m) => sum + (m.revenue - m.cogsTotal), 0) / ltmRev) * 100).toFixed(2)}%
                          </td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            {oneYearAgo ? ((monthly.slice(-24, -12).reduce((sum, m) => sum + (m.revenue - m.cogsTotal), 0) / monthly.slice(-24, -12).reduce((sum, m) => sum + m.revenue, 0)) * 100).toFixed(1) + '%' : 'N/A'}
                          </td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            {twoYearsAgo ? ((monthly.slice(-36, -24).reduce((sum, m) => sum + (m.revenue - m.cogsTotal), 0) / monthly.slice(-36, -24).reduce((sum, m) => sum + m.revenue, 0)) * 100).toFixed(1) + '%' : 'N/A'}
                          </td>
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#475569' }}>Total Expenses</td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            ${ltmData.reduce((sum, m) => sum + m.expense, 0).toLocaleString()}
                          </td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            ${oneYearAgo ? monthly.slice(-24, -12).reduce((sum, m) => sum + m.expense, 0).toLocaleString() : 'N/A'}
                          </td>
                          <td style={{ padding: '12px', fontSize: '14px', color: '#1e293b', textAlign: 'right' }}>
                            ${twoYearsAgo ? monthly.slice(-36, -24).reduce((sum, m) => sum + m.expense, 0).toLocaleString() : 'N/A'}
                          </td>
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '12px', fontSize: '14px', fontWeight: '600', color: '#475569' }}>Net Income</td>
                          <td style={{ padding: '12px', fontSize: '14px', fontWeight: '600', color: '#1e293b', textAlign: 'right' }}>
                            ${ltmData.reduce((sum, m) => sum + (m.revenue - m.expense), 0).toLocaleString()}
                          </td>
                          <td style={{ padding: '12px', fontSize: '14px', fontWeight: '600', color: '#1e293b', textAlign: 'right' }}>
                            ${oneYearAgo ? monthly.slice(-24, -12).reduce((sum, m) => sum + (m.revenue - m.expense), 0).toLocaleString() : 'N/A'}
                          </td>
                          <td style={{ padding: '12px', fontSize: '14px', fontWeight: '600', color: '#1e293b', textAlign: 'right' }}>
                            ${twoYearsAgo ? monthly.slice(-36, -24).reduce((sum, m) => sum + (m.revenue - m.expense), 0).toLocaleString() : 'N/A'}
                          </td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>

                {/* Section 3: Financial Ratios Overview */}
                <div className="page-break" style={{ background: 'white', borderRadius: '12px', padding: '32px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <div className="print-page-header">
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                      <div style={{ fontSize: '16px', fontWeight: '700', color: '#1e293b' }}>{company?.name}</div>
                      <div style={{ fontSize: '13px', color: '#64748b' }}>{new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</div>
                    </div>
                  </div>
                  <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '24px', borderBottom: '2px solid #e2e8f0', paddingBottom: '12px' }}>
                    Financial Ratios Overview
                  </h2>
                  
                  {/* Liquidity Ratios */}
                  <h3 style={{ fontSize: '16px', fontWeight: '600', color: '#475569', marginBottom: '12px' }}>Liquidity Ratios</h3>
                  <div style={{ overflowX: 'auto', marginBottom: '24px' }}>
                    <table style={{ width: '100%', fontSize: '12px', borderCollapse: 'collapse' }}>
                      <thead>
                        <tr style={{ borderBottom: '2px solid #e2e8f0' }}>
                          <th style={{ textAlign: 'left', padding: '8px', fontSize: '12px', fontWeight: '600', color: '#64748b', minWidth: '120px' }}>Ratio</th>
                          {last12Months.map((m, i) => (
                            <th key={i} style={{ textAlign: 'right', padding: '8px', fontSize: '11px', fontWeight: '600', color: '#64748b', minWidth: '60px' }}>
                              {m.month.substring(0, m.month.lastIndexOf('/'))}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px', fontSize: '12px', color: '#475569' }}>Current Ratio</td>
                          {last12Trends.map((data, i) => (
                            <td key={i} style={{ padding: '8px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              {data?.currentRatio !== undefined ? data.currentRatio.toFixed(1) : 'N/A'}
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px', fontSize: '12px', color: '#475569' }}>Quick Ratio</td>
                          {last12Trends.map((data, i) => (
                            <td key={i} style={{ padding: '8px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              {data?.quickRatio !== undefined ? data.quickRatio.toFixed(1) : 'N/A'}
                            </td>
                          ))}
                        </tr>
                      </tbody>
                    </table>
                  </div>
                  
                  {/* Activity Ratios */}
                  <h3 style={{ fontSize: '16px', fontWeight: '600', color: '#475569', marginBottom: '12px' }}>Activity Ratios</h3>
                  <div style={{ overflowX: 'auto', marginBottom: '24px' }}>
                    <table style={{ width: '100%', fontSize: '12px', borderCollapse: 'collapse' }}>
                      <thead>
                        <tr style={{ borderBottom: '2px solid #e2e8f0' }}>
                          <th style={{ textAlign: 'left', padding: '8px', fontSize: '12px', fontWeight: '600', color: '#64748b', minWidth: '120px' }}>Ratio</th>
                          {last12Months.map((m, i) => (
                            <th key={i} style={{ textAlign: 'right', padding: '8px', fontSize: '11px', fontWeight: '600', color: '#64748b', minWidth: '60px' }}>
                              {m.month.substring(0, m.month.lastIndexOf('/'))}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px', fontSize: '12px', color: '#475569' }}>Inventory Turnover</td>
                          {last12Trends.map((data, i) => (
                            <td key={i} style={{ padding: '8px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              {data?.invTurnover !== undefined ? data.invTurnover.toFixed(1) : 'N/A'}
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px', fontSize: '12px', color: '#475569' }}>Receivables Turnover</td>
                          {last12Trends.map((data, i) => (
                            <td key={i} style={{ padding: '8px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              {data?.arTurnover !== undefined ? data.arTurnover.toFixed(1) : 'N/A'}
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px', fontSize: '12px', color: '#475569' }}>Sales/Working Capital</td>
                          {last12Trends.map((data, i) => (
                            <td key={i} style={{ padding: '8px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              {data?.salesWC !== undefined ? data.salesWC.toFixed(1) : 'N/A'}
                            </td>
                          ))}
                        </tr>
                      </tbody>
                    </table>
                  </div>
                  
                  {/* Coverage Ratios */}
                  <h3 style={{ fontSize: '16px', fontWeight: '600', color: '#475569', marginBottom: '12px' }}>Coverage Ratios</h3>
                  <div style={{ overflowX: 'auto', marginBottom: '24px' }}>
                    <table style={{ width: '100%', fontSize: '12px', borderCollapse: 'collapse' }}>
                      <thead>
                        <tr style={{ borderBottom: '2px solid #e2e8f0' }}>
                          <th style={{ textAlign: 'left', padding: '8px', fontSize: '12px', fontWeight: '600', color: '#64748b', minWidth: '120px' }}>Ratio</th>
                          {last12Months.map((m, i) => (
                            <th key={i} style={{ textAlign: 'right', padding: '8px', fontSize: '11px', fontWeight: '600', color: '#64748b', minWidth: '60px' }}>
                              {m.month.substring(0, m.month.lastIndexOf('/'))}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px', fontSize: '12px', color: '#475569' }}>Interest Coverage</td>
                          {last12Trends.map((data, i) => (
                            <td key={i} style={{ padding: '8px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              {data?.interestCov !== undefined ? data.interestCov.toFixed(1) : 'N/A'}
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px', fontSize: '12px', color: '#475569' }}>Debt Service Coverage</td>
                          {last12Trends.map((data, i) => (
                            <td key={i} style={{ padding: '8px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              {data?.debtSvcCov !== undefined ? data.debtSvcCov.toFixed(1) : 'N/A'}
                            </td>
                          ))}
                        </tr>
                      </tbody>
                    </table>
                  </div>
                  
                  {/* Leverage Ratios */}
                  <h3 style={{ fontSize: '16px', fontWeight: '600', color: '#475569', marginBottom: '12px' }}>Leverage Ratios</h3>
                  <div style={{ overflowX: 'auto', marginBottom: '24px' }}>
                    <table style={{ width: '100%', fontSize: '12px', borderCollapse: 'collapse' }}>
                      <thead>
                        <tr style={{ borderBottom: '2px solid #e2e8f0' }}>
                          <th style={{ textAlign: 'left', padding: '8px', fontSize: '12px', fontWeight: '600', color: '#64748b', minWidth: '120px' }}>Ratio</th>
                          {last12Months.map((m, i) => (
                            <th key={i} style={{ textAlign: 'right', padding: '8px', fontSize: '11px', fontWeight: '600', color: '#64748b', minWidth: '60px' }}>
                              {m.month.substring(0, m.month.lastIndexOf('/'))}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px', fontSize: '12px', color: '#475569' }}>Debt/Net Worth</td>
                          {last12Trends.map((data, i) => (
                            <td key={i} style={{ padding: '8px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              {data?.debtToNW !== undefined ? data.debtToNW.toFixed(1) : 'N/A'}
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px', fontSize: '12px', color: '#475569' }}>Leverage Ratio</td>
                          {last12Trends.map((data, i) => (
                            <td key={i} style={{ padding: '8px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              {data?.leverage !== undefined ? data.leverage.toFixed(1) : 'N/A'}
                            </td>
                          ))}
                        </tr>
                      </tbody>
                    </table>
                  </div>
                  
                  {/* Operating Ratios */}
                  <h3 style={{ fontSize: '16px', fontWeight: '600', color: '#475569', marginBottom: '12px' }}>Operating Ratios</h3>
                  <div style={{ overflowX: 'auto' }}>
                    <table style={{ width: '100%', fontSize: '12px', borderCollapse: 'collapse' }}>
                      <thead>
                        <tr style={{ borderBottom: '2px solid #e2e8f0' }}>
                          <th style={{ textAlign: 'left', padding: '8px', fontSize: '12px', fontWeight: '600', color: '#64748b', minWidth: '120px' }}>Ratio</th>
                          {last12Months.map((m, i) => (
                            <th key={i} style={{ textAlign: 'right', padding: '8px', fontSize: '11px', fontWeight: '600', color: '#64748b', minWidth: '60px' }}>
                              {m.month.substring(0, m.month.lastIndexOf('/'))}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px', fontSize: '12px', color: '#475569' }}>ROE</td>
                          {last12Trends.map((data, i) => (
                            <td key={i} style={{ padding: '8px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              {data?.roe !== undefined ? `${(data.roe * 100).toFixed(1)}%` : 'N/A'}
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px', fontSize: '12px', color: '#475569' }}>ROA</td>
                          {last12Trends.map((data, i) => (
                            <td key={i} style={{ padding: '8px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              {data?.roa !== undefined ? `${(data.roa * 100).toFixed(1)}%` : 'N/A'}
                            </td>
                          ))}
                        </tr>
                        <tr style={{ borderBottom: '1px solid #f1f5f9' }}>
                          <td style={{ padding: '8px', fontSize: '12px', color: '#475569' }}>EBITDA/Revenue</td>
                          {last12Trends.map((data, i) => (
                            <td key={i} style={{ padding: '8px', fontSize: '12px', color: '#1e293b', textAlign: 'right' }}>
                              {data?.ebitdaMargin !== undefined ? `${(data.ebitdaMargin * 100).toFixed(1)}%` : 'N/A'}
                            </td>
                          ))}
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>

                {/* Section 4: Company Disclosures */}
                <div style={{ background: 'white', borderRadius: '12px', padding: '32px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <div className="print-page-header">
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                      <div style={{ fontSize: '16px', fontWeight: '700', color: '#1e293b' }}>{company?.name}</div>
                      <div style={{ fontSize: '13px', color: '#64748b' }}>{new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</div>
                    </div>
                  </div>
                  <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '24px', borderBottom: '2px solid #e2e8f0', paddingBottom: '12px' }}>
                    Company Disclosures
                  </h2>
                  
                  <div style={{ display: 'grid', gridTemplateColumns: '1fr 200px', gap: '12px' }}>
                    <div style={{ fontWeight: '600', color: '#475569' }}>DISCLOSURE</div>
                    <div style={{ fontWeight: '600', color: '#475569' }}>STATUS</div>
                    
                    <div style={{ fontSize: '14px', color: '#1e293b' }}>Bankruptcies</div>
                    <input 
                      type="text" 
                      value={profile.disclosures.bankruptcies} 
                      onChange={(e) => updateProfile({ disclosures: { ...profile.disclosures, bankruptcies: e.target.value } })}
                      style={{ padding: '8px 12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    />
                    
                    <div style={{ fontSize: '14px', color: '#1e293b' }}>Liens or Judgements (business, equipment)</div>
                    <input 
                      type="text" 
                      value={profile.disclosures.liens} 
                      onChange={(e) => updateProfile({ disclosures: { ...profile.disclosures, liens: e.target.value } })}
                      style={{ padding: '8px 12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    />
                    
                    <div style={{ fontSize: '14px', color: '#1e293b' }}>Material Contract Covenants (e.g. on loans)</div>
                    <input 
                      type="text" 
                      value={profile.disclosures.contracts} 
                      onChange={(e) => updateProfile({ disclosures: { ...profile.disclosures, contracts: e.target.value } })}
                      style={{ padding: '8px 12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    />
                    
                    <div style={{ fontSize: '14px', color: '#1e293b' }}>Lawsuits (as plaintiff a/o defendant)</div>
                    <input 
                      type="text" 
                      value={profile.disclosures.lawsuits} 
                      onChange={(e) => updateProfile({ disclosures: { ...profile.disclosures, lawsuits: e.target.value } })}
                      style={{ padding: '8px 12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    />
                    
                    <div style={{ fontSize: '14px', color: '#1e293b' }}>Most Favored Nation on contracts</div>
                    <input 
                      type="text" 
                      value={profile.disclosures.mostFavoredNation} 
                      onChange={(e) => updateProfile({ disclosures: { ...profile.disclosures, mostFavoredNation: e.target.value } })}
                      style={{ padding: '8px 12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    />
                    
                    <div style={{ fontSize: '14px', color: '#1e293b' }}>Equity Control (who/how many needed)</div>
                    <input 
                      type="text" 
                      value={profile.disclosures.equityControl} 
                      onChange={(e) => updateProfile({ disclosures: { ...profile.disclosures, equityControl: e.target.value } })}
                      style={{ padding: '8px 12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    />
                    
                    <div style={{ fontSize: '14px', color: '#1e293b' }}>Right of First Refusal on sale</div>
                    <input 
                      type="text" 
                      value={profile.disclosures.rightOfFirstRefusal} 
                      onChange={(e) => updateProfile({ disclosures: { ...profile.disclosures, rightOfFirstRefusal: e.target.value } })}
                      style={{ padding: '8px 12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    />
                    
                    <div style={{ fontSize: '14px', color: '#1e293b' }}>Shareholder Protections (i.e. blocking/approvals)</div>
                    <input 
                      type="text" 
                      value={profile.disclosures.shareholderProtections} 
                      onChange={(e) => updateProfile({ disclosures: { ...profile.disclosures, shareholderProtections: e.target.value } })}
                      style={{ padding: '8px 12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    />
                    
                    <div style={{ fontSize: '14px', color: '#1e293b' }}>Change-in-Control triggers (i.e. with customers and/or suppliers)</div>
                    <input 
                      type="text" 
                      value={profile.disclosures.changeInControl} 
                      onChange={(e) => updateProfile({ disclosures: { ...profile.disclosures, changeInControl: e.target.value } })}
                      style={{ padding: '8px 12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    />
                    
                    <div style={{ fontSize: '14px', color: '#1e293b' }}>Regulatory Approvals (local/State/Federal)</div>
                    <input 
                      type="text" 
                      value={profile.disclosures.regulatoryApprovals} 
                      onChange={(e) => updateProfile({ disclosures: { ...profile.disclosures, regulatoryApprovals: e.target.value } })}
                      style={{ padding: '8px 12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    />
                    
                    <div style={{ fontSize: '14px', color: '#1e293b' }}>Audited Financial Statements</div>
                    <select
                      value={profile.disclosures.auditedFinancials}
                      onChange={(e) => updateProfile({ disclosures: { ...profile.disclosures, auditedFinancials: e.target.value } })}
                      style={{ padding: '8px 12px', borderRadius: '6px', border: '1px solid #cbd5e1', fontSize: '14px' }}
                    >
                      <option value="Yes">Yes</option>
                      <option value="No">No</option>
                      <option value="Partial">Partial</option>
                    </select>
                  </div>
                </div>

                <div className="no-print" style={{ textAlign: 'center', padding: '24px' }}>
                  <button
                    onClick={async () => {
                      setIsLoading(true);
                      try {
                        await profilesApi.save(selectedCompanyId, profile);
                        alert('Profile saved successfully!');
                      } catch (error) {
                        alert(error instanceof ApiError ? error.message : 'Failed to save profile');
                      } finally {
                        setIsLoading(false);
                      }
                    }}
                    disabled={isLoading}
                    style={{ 
                      padding: '12px 32px', 
                      background: isLoading ? '#94a3b8' : '#667eea', 
                      color: 'white', 
                      border: 'none', 
                      borderRadius: '8px', 
                      fontSize: '16px', 
                      fontWeight: '600', 
                      cursor: isLoading ? 'not-allowed' : 'pointer',
                      boxShadow: '0 4px 6px rgba(102, 126, 234, 0.3)',
                      opacity: isLoading ? 0.7 : 1
                    }}
                  >
                    {isLoading ? 'Saving...' : 'Save Profile'}
                  </button>
                </div>
              </>
            );
          })()}
        </div>
      )}

      {/* Management Assessment - Questionnaire View */}
      {(() => {
        const hasCompanyId = selectedCompanyId || currentUser?.companyId;
        const hasCorrectRole = (currentUser?.role === 'user' && currentUser?.userType === 'assessment') || currentUser?.role === 'consultant';
        const canView = currentView === 'ma-questionnaire' && hasCompanyId && hasCorrectRole;
        
        console.log('📋 Questionnaire render check:', {
          currentView,
          isQuestionnaireView: currentView === 'ma-questionnaire',
          selectedCompanyId,
          userCompanyId: currentUser?.companyId,
          hasCompanyId,
          role: currentUser?.role,
          userType: currentUser?.userType,
          hasCorrectRole,
          canView
        });
        
        return canView;
      })() && (
        <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '32px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '32px' }}>
            <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', margin: 0 }}>Management Assessment Questionnaire</h1>
            {companyName && <div style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b' }}>{companyName}</div>}
          </div>
          
          {currentUser?.role === 'consultant' && (
            <div style={{ background: '#fffbeb', border: '2px solid #fbbf24', borderRadius: '12px', padding: '20px', marginBottom: '24px' }}>
              <h3 style={{ fontSize: '18px', fontWeight: '600', color: '#92400e', marginBottom: '8px' }}>⚠ Consultant View Only</h3>
              <p style={{ fontSize: '14px', color: '#78350f', margin: 0 }}>
                As a consultant, you can view this questionnaire but cannot fill it out. Only company users can complete assessments. 
                Navigate to "View Assessments" in the Administrator Dashboard to see user responses.
              </p>
            </div>
          )}
          
          <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)', opacity: currentUser?.role === 'consultant' ? 0.6 : 1, pointerEvents: currentUser?.role === 'consultant' ? 'none' : 'auto' }}>
            <div style={{ background: '#f0f9ff', border: '1px solid #bae6fd', borderRadius: '8px', padding: '16px', marginBottom: '24px' }}>
              <h3 style={{ fontSize: '16px', fontWeight: '600', color: '#0c4a6e', marginBottom: '8px' }}>Rating Scale</h3>
              <div style={{ fontSize: '13px', color: '#0c4a6e', lineHeight: '1.6' }}>
                <strong>1:</strong> No evidence to support practices or any knowledge of subject<br />
                <strong>2:</strong> Limited practices in place, limited knowledge of subject<br />
                <strong>3:</strong> Basic practices in place, basic awareness of subject<br />
                <strong>4:</strong> Clear practices in place, above average knowledge of subject<br />
                <strong>5:</strong> Extensive practices in place, extensive knowledge of subject
              </div>
            </div>

            {assessmentData.map((category) => (
              <div key={category.id} style={{ marginBottom: '32px', background: '#f8fafc', borderRadius: '8px', padding: '20px', border: '1px solid #e2e8f0' }}>
                <h2 style={{ fontSize: '20px', fontWeight: '600', color: '#1e293b', marginBottom: '16px', borderBottom: '2px solid #cbd5e1', paddingBottom: '8px' }}>
                  {category.id}. {category.name}
                </h2>
                
                {category.questions.map((question) => (
                  <div key={question.id} style={{ marginBottom: '16px', background: 'white', borderRadius: '8px', padding: '16px', border: unansweredQuestions.includes(question.id) ? '2px solid #ef4444' : '1px solid #e2e8f0' }}>
                    <label style={{ display: 'block', fontSize: '14px', color: '#475569', marginBottom: '12px', fontWeight: '500' }}>
                      {question.text}
                    </label>
                    <div style={{ display: 'flex', gap: '12px', flexWrap: 'wrap' }}>
                      {[1, 2, 3, 4, 5].map((rating) => (
                        <label key={rating} style={{ display: 'flex', alignItems: 'center', gap: '6px', cursor: 'pointer', padding: '8px 12px', background: assessmentResponses[question.id] === rating ? '#667eea' : '#f1f5f9', color: assessmentResponses[question.id] === rating ? 'white' : '#475569', borderRadius: '6px', fontSize: '14px', fontWeight: '600', border: assessmentResponses[question.id] === rating ? '2px solid #667eea' : '1px solid #cbd5e1', transition: 'all 0.2s' }}>
                          <input 
                            type="radio" 
                            name={question.id} 
                            value={rating} 
                            checked={assessmentResponses[question.id] === rating}
                            onChange={() => setAssessmentResponses(prev => ({ ...prev, [question.id]: rating }))}
                            style={{ display: 'none' }}
                          />
                          {rating}
                        </label>
                      ))}
                    </div>
                    {unansweredQuestions.includes(question.id) && (
                      <div style={{ marginTop: '8px', fontSize: '12px', color: '#ef4444', fontWeight: '600' }}>
                        ⚠ Please select a rating
                      </div>
                    )}
                  </div>
                ))}
                
                <div style={{ marginTop: '16px' }}>
                  <label style={{ display: 'block', fontSize: '14px', fontWeight: '600', color: '#475569', marginBottom: '8px' }}>
                    Notes for {category.name}:
                  </label>
                  <textarea
                    value={assessmentNotes[category.id] || ''}
                    onChange={(e) => setAssessmentNotes(prev => ({ ...prev, [category.id]: e.target.value }))}
                    style={{ width: '100%', minHeight: '80px', padding: '12px', borderRadius: '8px', border: '1px solid #cbd5e1', fontSize: '14px', fontFamily: 'inherit', resize: 'vertical' }}
                    placeholder="Add notes or action items..."
                  />
                </div>
              </div>
            ))}

            <div style={{ display: 'flex', gap: '12px', justifyContent: 'center', marginTop: '32px' }}>
              <button 
                onClick={async () => {
                  const allQuestions = assessmentData.flatMap(cat => cat.questions.map(q => q.id));
                  const unanswered = allQuestions.filter(qId => !assessmentResponses[qId]);
                  setUnansweredQuestions(unanswered);
                  
                  if (unanswered.length === 0) {
                    setIsLoading(true);
                    try {
                      const totalScore = Object.values(assessmentResponses).reduce((sum, val) => sum + val, 0) / Object.keys(assessmentResponses).length;
                      
                      const { record } = await assessmentsApi.create({
                        userId: currentUser!.id,
                        companyId: selectedCompanyId,
                        responses: assessmentResponses,
                        notes: assessmentNotes,
                        overallScore: totalScore,
                        isCompleted: true
                      });
                      
                      // Add to local state with proper structure
                      const assessmentRecord: AssessmentRecord = {
                        id: record.id,
                        userEmail: currentUser?.email || '',
                        userName: currentUser?.name || '',
                        companyId: selectedCompanyId,
                        companyName: company?.name || '',
                        responses: assessmentResponses,
                        notes: assessmentNotes,
                        completedDate: record.completedAt,
                        overallScore: totalScore
                      };
                      
                      setAssessmentRecords(prev => [...prev, assessmentRecord]);
                      alert('Assessment saved successfully!');
                      setCurrentView('ma-your-results');
                    } catch (error) {
                      alert(error instanceof ApiError ? error.message : 'Failed to save assessment');
                    } finally {
                      setIsLoading(false);
                    }
                  } else {
                    alert(`Please answer all ${unanswered.length} unanswered question(s) before saving.`);
                  }
                }}
                disabled={isLoading}
                style={{ padding: '14px 32px', background: isLoading ? '#94a3b8' : '#667eea', color: 'white', border: 'none', borderRadius: '8px', fontSize: '16px', fontWeight: '600', cursor: isLoading ? 'not-allowed' : 'pointer', boxShadow: '0 4px 12px rgba(102,126,234,0.3)', opacity: isLoading ? 0.7 : 1 }}
              >
                {isLoading ? 'Saving...' : 'Save Assessment'}
              </button>
              <button 
                onClick={() => {
                  if (confirm('Are you sure you want to reset all responses?')) {
                    setAssessmentResponses({});
                    setAssessmentNotes({});
                    setUnansweredQuestions([]);
                  }
                }}
                style={{ padding: '14px 32px', background: '#f1f5f9', color: '#475569', border: 'none', borderRadius: '8px', fontSize: '16px', fontWeight: '600', cursor: 'pointer' }}
              >
                Reset
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Management Assessment - Your Results View */}
      {currentView === 'ma-your-results' && selectedCompanyId && ((currentUser?.role === 'user' && currentUser?.userType === 'assessment') || currentUser?.role === 'consultant') && (
        <div style={{ maxWidth: '1400px', margin: '0 auto', padding: '32px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '32px' }}>
            <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', margin: 0 }}>
              {currentUser?.role === 'consultant' ? 'Assessment Results - All Participants' : 'Your Assessment Results'}
            </h1>
            {companyName && <div style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b' }}>{companyName}</div>}
          </div>
          
          {currentUser?.role === 'consultant' ? (
            // Show all participants' results for consultants
            <>
              {assessmentRecords.filter(r => r.companyId === selectedCompanyId).length === 0 ? (
                <div style={{ background: 'white', borderRadius: '12px', padding: '60px', textAlign: 'center', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                  <div style={{ fontSize: '48px', marginBottom: '16px' }}>📋</div>
                  <h3 style={{ fontSize: '20px', fontWeight: '600', color: '#64748b', marginBottom: '8px' }}>No Assessments Yet</h3>
                  <p style={{ fontSize: '14px', color: '#94a3b8' }}>No users have completed assessments for this company</p>
                </div>
              ) : (
                <div style={{ display: 'grid', gap: '24px' }}>
                  {assessmentRecords.filter(r => r.companyId === selectedCompanyId).map((record) => (
                    <div key={record.id} style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px', borderBottom: '2px solid #e2e8f0', paddingBottom: '16px' }}>
                        <div>
                          <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '4px' }}>{record.user?.name || record.userName || 'Unknown User'}</h2>
                          <div style={{ fontSize: '14px', color: '#64748b' }}>
                            Completed: {new Date(record.completedAt || record.completedDate || '').toLocaleDateString()} | 
                            <span style={{ fontWeight: '600', color: '#667eea', marginLeft: '8px' }}>Overall Score: {record.overallScore.toFixed(2)}/5.0</span>
                          </div>
                        </div>
                      </div>
                      
                      <h3 style={{ fontSize: '18px', fontWeight: '600', color: '#475569', marginBottom: '16px' }}>Scores by Category</h3>
                      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(180px, 1fr))', gap: '12px' }}>
                        {assessmentData.map((category) => {
                          const categoryQuestions = category.questions.map(q => q.id);
                          const categoryResponses = categoryQuestions.map(qId => record.responses[qId]).filter(r => r !== undefined);
                          const avgScore = categoryResponses.length > 0 ? categoryResponses.reduce((sum, val) => sum + val, 0) / categoryResponses.length : 0;
                          
                          return (
                            <div key={category.id} style={{ background: '#f8fafc', borderRadius: '8px', padding: '12px', border: '1px solid #e2e8f0' }}>
                              <div style={{ fontSize: '11px', fontWeight: '600', color: '#64748b', marginBottom: '6px' }}>{category.name}</div>
                              <div style={{ fontSize: '24px', fontWeight: '700', color: '#667eea' }}>{avgScore.toFixed(2)}</div>
                              <div style={{ fontSize: '10px', color: '#64748b', marginTop: '2px' }}>out of 5.0</div>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </>
          ) : (
            // Show individual results for users
            <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
              <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '24px' }}>Score by Category</h2>
              
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '16px', marginBottom: '24px' }}>
                {assessmentData.map((category) => {
                  const categoryQuestions = category.questions.map(q => q.id);
                  const categoryResponses = categoryQuestions.map(qId => assessmentResponses[qId]).filter(r => r !== undefined);
                  const avgScore = categoryResponses.length > 0 ? categoryResponses.reduce((sum, val) => sum + val, 0) / categoryResponses.length : 0;
                  
                  return (
                    <div key={category.id} style={{ background: '#f8fafc', borderRadius: '8px', padding: '16px', border: '1px solid #e2e8f0' }}>
                      <div style={{ fontSize: '12px', fontWeight: '600', color: '#64748b', marginBottom: '8px' }}>{category.name}</div>
                      <div style={{ fontSize: '32px', fontWeight: '700', color: '#667eea' }}>{avgScore.toFixed(2)}</div>
                      <div style={{ fontSize: '11px', color: '#64748b', marginTop: '4px' }}>out of 5.0</div>
                    </div>
                  );
                })}
              </div>

              <div style={{ display: 'flex', gap: '12px', justifyContent: 'center' }}>
                <button 
                  onClick={() => setCurrentView('ma-questionnaire')}
                  style={{ padding: '12px 24px', background: '#667eea', color: 'white', border: 'none', borderRadius: '8px', fontSize: '14px', fontWeight: '600', cursor: 'pointer' }}
                >
                  Edit Assessment
                </button>
              </div>
            </div>
          )}
        </div>
      )}
          </>
          )}

          {/* Management Assessment Views - Available to all users including assessment users */}
          {/* Management Assessment - Welcome View */}
      {currentView === 'ma-welcome' && ((currentUser?.role === 'user' && currentUser?.userType === 'assessment') || currentUser?.role === 'consultant') && (
        <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '32px' }}>
          <div style={{ background: 'white', borderRadius: '12px', padding: '40px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
            {companyName && <div style={{ fontSize: '36px', fontWeight: '700', color: '#1e293b', textAlign: 'center', marginBottom: '12px' }}>{companyName}</div>}
            <h1 style={{ fontSize: '36px', fontWeight: '700', color: '#1e293b', marginBottom: '24px', textAlign: 'center' }}>Management Assessment Questionnaire</h1>
            
            <div style={{ fontSize: '16px', color: '#475569', lineHeight: '1.8', maxWidth: '900px', margin: '0 auto 32px', textAlign: 'left' }}>
              <p style={{ marginBottom: '16px' }}>
                Our Trademarked assessment tool is designed to facilitate the discovery of Management Maturity Level in small businesses. It has been developed to highlight areas under financial management that can be targeted for improvement.
              </p>
              
              <p style={{ marginBottom: '16px' }}>
                The tool is a questionnaire to be completed by the key employees in your company. It is designed as a tool for management to help you better understand the strengths and weaknesses of your processes and communications across teams in your company.
              </p>
              
              <p style={{ marginBottom: '0' }}>
                The Management Assessment service provides detailed evaluation of your company's management practices, leadership effectiveness, and organizational structure to help you optimize performance and drive growth.
              </p>
            </div>
            
            <div style={{ background: '#f8fafc', borderRadius: '12px', padding: '32px', marginTop: '32px', textAlign: 'left' }}>
              <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '20px' }}>Topics Covered</h2>
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: '12px', fontSize: '14px', color: '#475569' }}>
                {assessmentData.map((cat) => (
                  <div key={cat.id} style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <span style={{ color: '#10b981', fontSize: '18px' }}>✓</span>
                    <span>{cat.name}</span>
                  </div>
                ))}
              </div>
            </div>

            <button 
              onClick={() => setCurrentView('ma-questionnaire')}
              style={{ marginTop: '32px', padding: '16px 48px', background: '#667eea', color: 'white', border: 'none', borderRadius: '8px', fontSize: '18px', fontWeight: '600', cursor: 'pointer', boxShadow: '0 4px 12px rgba(102,126,234,0.3)' }}
            >
              Start Assessment
            </button>
          </div>
        </div>
      )}

      {/* Management Assessment - Scores Summary View */}
      {currentView === 'ma-scores-summary' && selectedCompanyId && ((currentUser?.role === 'user' && currentUser?.userType === 'assessment') || currentUser?.role === 'consultant') && (
        <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '32px' }}>
          <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', marginBottom: '32px' }}>Scores Summary - All Participants</h1>
          
          <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
            <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '24px' }}>Average Scores Across All Participants</h2>
            
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '16px' }}>
              {assessmentData.map((category) => {
                const companyRecords = assessmentRecords.filter(r => r.companyId === selectedCompanyId);
                const allCategoryScores = companyRecords.map(record => {
                  const categoryQuestions = category.questions.map(q => q.id);
                  const categoryResponses = categoryQuestions.map(qId => record.responses[qId]).filter(r => r !== undefined);
                  return categoryResponses.length > 0 ? categoryResponses.reduce((sum, val) => sum + val, 0) / categoryResponses.length : 0;
                }).filter(s => s > 0);
                
                const avgScore = allCategoryScores.length > 0 ? allCategoryScores.reduce((sum, val) => sum + val, 0) / allCategoryScores.length : 0;
                
                return (
                  <div key={category.id} style={{ background: '#f8fafc', borderRadius: '8px', padding: '16px', border: '1px solid #e2e8f0' }}>
                    <div style={{ fontSize: '12px', fontWeight: '600', color: '#64748b', marginBottom: '8px' }}>{category.name}</div>
                    <div style={{ fontSize: '32px', fontWeight: '700', color: '#667eea' }}>{avgScore.toFixed(2)}</div>
                    <div style={{ fontSize: '11px', color: '#64748b', marginTop: '4px' }}>avg across {allCategoryScores.length} participant(s)</div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      )}

      {/* Management Assessment - Scoring Guide View */}
      {currentView === 'ma-scoring-guide' && ((currentUser?.role === 'user' && currentUser?.userType === 'assessment') || currentUser?.role === 'consultant') && (
        <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '32px' }}>
          <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', marginBottom: '32px' }}>Scoring Guide</h1>
          
          <div style={{ background: 'white', borderRadius: '12px', padding: '32px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
            <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '24px' }}>Rating Scale Descriptions</h2>
            
            <div style={{ display: 'grid', gap: '16px' }}>
              <div style={{ background: '#fee2e2', borderRadius: '8px', padding: '20px', border: '2px solid #ef4444' }}>
                <div style={{ fontSize: '24px', fontWeight: '700', color: '#991b1b', marginBottom: '8px' }}>1 - No Evidence</div>
                <p style={{ fontSize: '14px', color: '#7f1d1d', margin: 0 }}>No evidence to support practices or any knowledge of subject</p>
              </div>
              <div style={{ background: '#fed7aa', borderRadius: '8px', padding: '20px', border: '2px solid #f97316' }}>
                <div style={{ fontSize: '24px', fontWeight: '700', color: '#9a3412', marginBottom: '8px' }}>2 - Limited</div>
                <p style={{ fontSize: '14px', color: '#7c2d12', margin: 0 }}>Limited practices in place, limited knowledge of subject</p>
              </div>
              <div style={{ background: '#fef3c7', borderRadius: '8px', padding: '20px', border: '2px solid #f59e0b' }}>
                <div style={{ fontSize: '24px', fontWeight: '700', color: '#92400e', marginBottom: '8px' }}>3 - Basic</div>
                <p style={{ fontSize: '14px', color: '#78350f', margin: 0 }}>Basic practices in place, basic awareness of subject</p>
              </div>
              <div style={{ background: '#dbeafe', borderRadius: '8px', padding: '20px', border: '2px solid #3b82f6' }}>
                <div style={{ fontSize: '24px', fontWeight: '700', color: '#1e40af', marginBottom: '8px' }}>4 - Clear Practices</div>
                <p style={{ fontSize: '14px', color: '#1e3a8a', margin: 0 }}>Clear practices in place, above average knowledge of subject</p>
              </div>
              <div style={{ background: '#d1fae5', borderRadius: '8px', padding: '20px', border: '2px solid #10b981' }}>
                <div style={{ fontSize: '24px', fontWeight: '700', color: '#065f46', marginBottom: '8px' }}>5 - Extensive</div>
                <p style={{ fontSize: '14px', color: '#064e3b', margin: 0 }}>Extensive practices in place, extensive knowledge of subject</p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Management Assessment - Charts View */}
      {currentView === 'ma-charts' && selectedCompanyId && ((currentUser?.role === 'user' && currentUser?.userType === 'assessment') || currentUser?.role === 'consultant') && (
        <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '32px' }}>
          <h1 style={{ fontSize: '32px', fontWeight: '700', color: '#1e293b', marginBottom: '32px' }}>Assessment Charts</h1>
          
          {(currentUser?.role === 'consultant' ? assessmentRecords.filter(r => r.companyId === selectedCompanyId).length === 0 : Object.keys(assessmentResponses).length === 0) ? (
            <div style={{ background: 'white', borderRadius: '12px', padding: '40px', textAlign: 'center', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
              <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#64748b', marginBottom: '16px' }}>No Assessment Data</h2>
              <p style={{ fontSize: '16px', color: '#94a3b8', marginBottom: '24px' }}>
                {currentUser?.role === 'consultant' ? 'No users have completed assessments for this company yet.' : 'Please complete the questionnaire first to view charts.'}
              </p>
              {currentUser?.role !== 'consultant' && (
                <button 
                  onClick={() => setCurrentView('ma-questionnaire')}
                  style={{ padding: '12px 32px', background: '#667eea', color: 'white', border: 'none', borderRadius: '8px', fontSize: '16px', fontWeight: '600', cursor: 'pointer' }}
                >
                  Go to Questionnaire
                </button>
              )}
            </div>
          ) : (
            <>
              <div style={{ background: 'white', borderRadius: '12px', padding: '24px', marginBottom: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
                <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '24px' }}>
                  {currentUser?.role === 'consultant' ? 'Average Category Scores - All Participants' : 'Category Scores - Bar Chart'}
                </h2>
                
                <div style={{ padding: '20px' }}>
              {assessmentData.map((category) => {
                const categoryQuestions = category.questions.map(q => q.id);
                
                let avgScore = 0;
                if (currentUser?.role === 'consultant') {
                  // Calculate average across all assessment records for this company
                  const companyRecords = assessmentRecords.filter(r => r.companyId === selectedCompanyId);
                  const allCategoryScores = companyRecords.map(record => {
                    const categoryResponses = categoryQuestions.map(qId => record.responses[qId]).filter(r => r !== undefined);
                    return categoryResponses.length > 0 ? categoryResponses.reduce((sum, val) => sum + val, 0) / categoryResponses.length : 0;
                  }).filter(s => s > 0);
                  avgScore = allCategoryScores.length > 0 ? allCategoryScores.reduce((sum, val) => sum + val, 0) / allCategoryScores.length : 0;
                } else {
                  // Use current user's responses
                  const categoryResponses = categoryQuestions.map(qId => assessmentResponses[qId]).filter(r => r !== undefined);
                  avgScore = categoryResponses.length > 0 ? categoryResponses.reduce((sum, val) => sum + val, 0) / categoryResponses.length : 0;
                }
                
                const percentage = (avgScore / 5) * 100;
                
                return (
                  <div key={category.id} style={{ marginBottom: '16px' }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '6px' }}>
                      <span style={{ fontSize: '14px', fontWeight: '600', color: '#475569' }}>{category.name}</span>
                      <span style={{ fontSize: '14px', fontWeight: '700', color: '#667eea' }}>{avgScore.toFixed(2)} / 5.0</span>
                    </div>
                    <div style={{ background: '#e2e8f0', borderRadius: '8px', height: '24px', overflow: 'hidden' }}>
                      <div style={{ background: 'linear-gradient(90deg, #667eea 0%, #764ba2 100%)', height: '100%', width: `${percentage}%`, transition: 'width 0.5s', display: 'flex', alignItems: 'center', justifyContent: 'flex-end', paddingRight: '8px' }}>
                        {percentage > 15 && <span style={{ fontSize: '12px', fontWeight: '600', color: 'white' }}>{percentage.toFixed(0)}%</span>}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          <div style={{ background: 'white', borderRadius: '12px', padding: '24px', boxShadow: '0 2px 8px rgba(0,0,0,0.06)' }}>
            <h2 style={{ fontSize: '24px', fontWeight: '600', color: '#1e293b', marginBottom: '24px' }}>Category Scores - Radar Chart</h2>
            
            <div style={{ display: 'flex', justifyContent: 'center', padding: '20px' }}>
              <svg width="500" height="500" viewBox="0 0 500 500">
                <g transform="translate(250, 250)">
                  {/* Draw concentric circles */}
                  {[1, 2, 3, 4, 5].map((level) => (
                    <circle
                      key={level}
                      cx="0"
                      cy="0"
                      r={level * 40}
                      fill="none"
                      stroke="#e2e8f0"
                      strokeWidth="1"
                    />
                  ))}
                  
                  {/* Draw axis lines and labels */}
                  {assessmentData.map((category, idx) => {
                    const angle = (idx * 2 * Math.PI) / assessmentData.length - Math.PI / 2;
                    const x2 = Math.cos(angle) * 200;
                    const y2 = Math.sin(angle) * 200;
                    const labelX = Math.cos(angle) * 220;
                    const labelY = Math.sin(angle) * 220;
                    
                    return (
                      <g key={category.id}>
                        <line x1="0" y1="0" x2={x2} y2={y2} stroke="#cbd5e1" strokeWidth="1" />
                        <text
                          x={labelX}
                          y={labelY}
                          textAnchor="middle"
                          fontSize="11"
                          fontWeight="600"
                          fill="#475569"
                          dominantBaseline="middle"
                        >
                          {category.name.length > 20 ? category.name.substring(0, 18) + '...' : category.name}
                        </text>
                      </g>
                    );
                  })}
                  
                  {/* Draw data polygon */}
                  <polygon
                    points={assessmentData.map((category, idx) => {
                      const categoryQuestions = category.questions.map(q => q.id);
                      
                      let avgScore = 0;
                      if (currentUser?.role === 'consultant') {
                        // Calculate average across all assessment records for this company
                        const companyRecords = assessmentRecords.filter(r => r.companyId === selectedCompanyId);
                        const allCategoryScores = companyRecords.map(record => {
                          const categoryResponses = categoryQuestions.map(qId => record.responses[qId]).filter(r => r !== undefined);
                          return categoryResponses.length > 0 ? categoryResponses.reduce((sum, val) => sum + val, 0) / categoryResponses.length : 0;
                        }).filter(s => s > 0);
                        avgScore = allCategoryScores.length > 0 ? allCategoryScores.reduce((sum, val) => sum + val, 0) / allCategoryScores.length : 0;
                      } else {
                        // Use current user's responses
                        const categoryResponses = categoryQuestions.map(qId => assessmentResponses[qId]).filter(r => r !== undefined);
                        avgScore = categoryResponses.length > 0 ? categoryResponses.reduce((sum, val) => sum + val, 0) / categoryResponses.length : 0;
                      }
                      
                      const angle = (idx * 2 * Math.PI) / assessmentData.length - Math.PI / 2;
                      const radius = (avgScore / 5) * 200;
                      const x = Math.cos(angle) * radius;
                      const y = Math.sin(angle) * radius;
                      return `${x},${y}`;
                    }).join(' ')}
                    fill="rgba(102, 126, 234, 0.2)"
                    stroke="#667eea"
                    strokeWidth="3"
                  />
                  
                  {/* Draw data points */}
                  {assessmentData.map((category, idx) => {
                    const categoryQuestions = category.questions.map(q => q.id);
                    
                    let avgScore = 0;
                    if (currentUser?.role === 'consultant') {
                      // Calculate average across all assessment records for this company
                      const companyRecords = assessmentRecords.filter(r => r.companyId === selectedCompanyId);
                      const allCategoryScores = companyRecords.map(record => {
                        const categoryResponses = categoryQuestions.map(qId => record.responses[qId]).filter(r => r !== undefined);
                        return categoryResponses.length > 0 ? categoryResponses.reduce((sum, val) => sum + val, 0) / categoryResponses.length : 0;
                      }).filter(s => s > 0);
                      avgScore = allCategoryScores.length > 0 ? allCategoryScores.reduce((sum, val) => sum + val, 0) / allCategoryScores.length : 0;
                    } else {
                      // Use current user's responses
                      const categoryResponses = categoryQuestions.map(qId => assessmentResponses[qId]).filter(r => r !== undefined);
                      avgScore = categoryResponses.length > 0 ? categoryResponses.reduce((sum, val) => sum + val, 0) / categoryResponses.length : 0;
                    }
                    
                    const angle = (idx * 2 * Math.PI) / assessmentData.length - Math.PI / 2;
                    const radius = (avgScore / 5) * 200;
                    const x = Math.cos(angle) * radius;
                    const y = Math.sin(angle) * radius;
                    
                    return (
                      <circle key={category.id} cx={x} cy={y} r="6" fill="#667eea" stroke="white" strokeWidth="2">
                        <title>{category.name}: {avgScore.toFixed(2)}</title>
                      </circle>
                    );
                  })}
                  
                  {/* Center circle with legend */}
                  <circle cx="0" cy="0" r="30" fill="white" stroke="#cbd5e1" strokeWidth="1" />
                  <text x="0" y="-5" textAnchor="middle" fontSize="10" fontWeight="600" fill="#64748b">Scale</text>
                  <text x="0" y="8" textAnchor="middle" fontSize="10" fill="#64748b">1 to 5</text>
                </g>
              </svg>
            </div>
          </div>
            </>
          )}
        </div>
      )}
        </main>
      </div>
    </div>
  );
}
